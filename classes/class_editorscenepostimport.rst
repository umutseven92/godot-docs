:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the EditorScenePostImport.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_EditorScenePostImport:

EditorScenePostImport
=====================

**Inherits:** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

Post-processes scenes after import.

Description
-----------

Imported scenes can be automatically modified right after import by setting their **Custom Script** Import property to a ``tool`` script that inherits from this class.

The :ref:`_post_import<class_EditorScenePostImport_method__post_import>` callback receives the imported scene's root node and returns the modified version of the scene. Usage example:


.. tabs::

 .. code-tab:: gdscript

    tool # Needed so it runs in editor.
    extends EditorScenePostImport
    # This sample changes all node names.
    # Called right after the scene is imported and gets the root node.
    func _post_import(scene):
        # Change all node names to "modified_[oldnodename]"
        iterate(scene)
        return scene # Remember to return the imported scene
    func iterate(node):
        if node != null:
            node.name = "modified_" + node.name
            for child in node.get_children():
                iterate(child)

 .. code-tab:: csharp

    using Godot;
    
    // This sample changes all node names.
    // Called right after the scene is imported and gets the root node.
    [Tool]
    public class NodeRenamer : EditorScenePostImport
    {
        public override Object PostImport(Object scene)
        {
            // Change all node names to "modified_[oldnodename]"
            Iterate(scene as Node);
            return scene; // Remember to return the imported scene
        }
        public void Iterate(Node node)
        {
            if (node != null)
            {
                node.Name = "modified_" + node.Name;
                foreach (Node child in node.GetChildren())
                {
                    Iterate(child);
                }
            }
        }
    }



Tutorials
---------

- `#custom-script <../getting_started/workflow/assets/importing_scenes.html#custom-script>`_ in :doc:`../getting_started/workflow/assets/importing_scenes`

Methods
-------

+-----------------------------+--------------------------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_Object>` | :ref:`_post_import<class_EditorScenePostImport_method__post_import>` **(** :ref:`Node<class_Node>` scene **)** |virtual| |
+-----------------------------+--------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>` | :ref:`get_source_file<class_EditorScenePostImport_method_get_source_file>` **(** **)** |const|                           |
+-----------------------------+--------------------------------------------------------------------------------------------------------------------------+

Method Descriptions
-------------------

.. _class_EditorScenePostImport_method__post_import:

- :ref:`Object<class_Object>` **_post_import** **(** :ref:`Node<class_Node>` scene **)** |virtual|

Called after the scene was imported. This method must return the modified version of the scene.

----

.. _class_EditorScenePostImport_method_get_source_file:

- :ref:`String<class_String>` **get_source_file** **(** **)** |const|

Returns the source file path which got imported (e.g. ``res://scene.dae``).

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
