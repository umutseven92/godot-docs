:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the VisualShaderNodeIntUniform.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_VisualShaderNodeIntUniform:

VisualShaderNodeIntUniform
==========================

**Inherits:** :ref:`VisualShaderNodeUniform<class_VisualShaderNodeUniform>` **<** :ref:`VisualShaderNode<class_VisualShaderNode>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

A scalar integer uniform to be used within the visual shader graph.

Description
-----------

Translated to ``uniform int`` in the shader language.

Properties
----------

+---------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`                             | :ref:`default_value<class_VisualShaderNodeIntUniform_property_default_value>`                 | ``0``     |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                           | :ref:`default_value_enabled<class_VisualShaderNodeIntUniform_property_default_value_enabled>` | ``false`` |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+
| :ref:`Hint<enum_VisualShaderNodeIntUniform_Hint>` | :ref:`hint<class_VisualShaderNodeIntUniform_property_hint>`                                   | ``0``     |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`                             | :ref:`max<class_VisualShaderNodeIntUniform_property_max>`                                     | ``100``   |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`                             | :ref:`min<class_VisualShaderNodeIntUniform_property_min>`                                     | ``0``     |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`                             | :ref:`step<class_VisualShaderNodeIntUniform_property_step>`                                   | ``1``     |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+

Enumerations
------------

.. _enum_VisualShaderNodeIntUniform_Hint:

.. _class_VisualShaderNodeIntUniform_constant_HINT_NONE:

.. _class_VisualShaderNodeIntUniform_constant_HINT_RANGE:

.. _class_VisualShaderNodeIntUniform_constant_HINT_RANGE_STEP:

.. _class_VisualShaderNodeIntUniform_constant_HINT_MAX:

enum **Hint**:

- **HINT_NONE** = **0** --- No hint used.

- **HINT_RANGE** = **1** --- A range hint for scalar value, which limits possible input values between :ref:`min<class_VisualShaderNodeIntUniform_property_min>` and :ref:`max<class_VisualShaderNodeIntUniform_property_max>`. Translated to ``hint_range(min, max)`` in shader code.

- **HINT_RANGE_STEP** = **2** --- A range hint for scalar value with step, which limits possible input values between :ref:`min<class_VisualShaderNodeIntUniform_property_min>` and :ref:`max<class_VisualShaderNodeIntUniform_property_max>`, with a step (increment) of :ref:`step<class_VisualShaderNodeIntUniform_property_step>`). Translated to ``hint_range(min, max, step)`` in shader code.

- **HINT_MAX** = **3** --- Represents the size of the :ref:`Hint<enum_VisualShaderNodeIntUniform_Hint>` enum.

Property Descriptions
---------------------

.. _class_VisualShaderNodeIntUniform_property_default_value:

- :ref:`int<class_int>` **default_value**

+-----------+--------------------------+
| *Default* | ``0``                    |
+-----------+--------------------------+
| *Setter*  | set_default_value(value) |
+-----------+--------------------------+
| *Getter*  | get_default_value()      |
+-----------+--------------------------+

A default value to be assigned within the shader.

----

.. _class_VisualShaderNodeIntUniform_property_default_value_enabled:

- :ref:`bool<class_bool>` **default_value_enabled**

+-----------+----------------------------------+
| *Default* | ``false``                        |
+-----------+----------------------------------+
| *Setter*  | set_default_value_enabled(value) |
+-----------+----------------------------------+
| *Getter*  | is_default_value_enabled()       |
+-----------+----------------------------------+

Enables usage of the :ref:`default_value<class_VisualShaderNodeIntUniform_property_default_value>`.

----

.. _class_VisualShaderNodeIntUniform_property_hint:

- :ref:`Hint<enum_VisualShaderNodeIntUniform_Hint>` **hint**

+-----------+-----------------+
| *Default* | ``0``           |
+-----------+-----------------+
| *Setter*  | set_hint(value) |
+-----------+-----------------+
| *Getter*  | get_hint()      |
+-----------+-----------------+

A hint applied to the uniform, which controls the values it can take when set through the inspector.

----

.. _class_VisualShaderNodeIntUniform_property_max:

- :ref:`int<class_int>` **max**

+-----------+----------------+
| *Default* | ``100``        |
+-----------+----------------+
| *Setter*  | set_max(value) |
+-----------+----------------+
| *Getter*  | get_max()      |
+-----------+----------------+

Minimum value for range hints. Used if :ref:`hint<class_VisualShaderNodeIntUniform_property_hint>` is set to :ref:`HINT_RANGE<class_VisualShaderNodeIntUniform_constant_HINT_RANGE>` or :ref:`HINT_RANGE_STEP<class_VisualShaderNodeIntUniform_constant_HINT_RANGE_STEP>`.

----

.. _class_VisualShaderNodeIntUniform_property_min:

- :ref:`int<class_int>` **min**

+-----------+----------------+
| *Default* | ``0``          |
+-----------+----------------+
| *Setter*  | set_min(value) |
+-----------+----------------+
| *Getter*  | get_min()      |
+-----------+----------------+

Maximum value for range hints. Used if :ref:`hint<class_VisualShaderNodeIntUniform_property_hint>` is set to :ref:`HINT_RANGE<class_VisualShaderNodeIntUniform_constant_HINT_RANGE>` or :ref:`HINT_RANGE_STEP<class_VisualShaderNodeIntUniform_constant_HINT_RANGE_STEP>`.

----

.. _class_VisualShaderNodeIntUniform_property_step:

- :ref:`int<class_int>` **step**

+-----------+-----------------+
| *Default* | ``1``           |
+-----------+-----------------+
| *Setter*  | set_step(value) |
+-----------+-----------------+
| *Getter*  | get_step()      |
+-----------+-----------------+

Step (increment) value for the range hint with step. Used if :ref:`hint<class_VisualShaderNodeIntUniform_property_hint>` is set to :ref:`HINT_RANGE_STEP<class_VisualShaderNodeIntUniform_constant_HINT_RANGE_STEP>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
