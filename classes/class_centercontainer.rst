:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the CenterContainer.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_CenterContainer:

CenterContainer
===============

**Inherits:** :ref:`Container<class_Container>` **<** :ref:`Control<class_Control>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

Keeps children controls centered.

Description
-----------

CenterContainer keeps children controls centered. This container keeps all children to their minimum size, in the center.

Properties
----------

+-------------------------+------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>` | :ref:`use_top_left<class_CenterContainer_property_use_top_left>` | ``false`` |
+-------------------------+------------------------------------------------------------------+-----------+

Property Descriptions
---------------------

.. _class_CenterContainer_property_use_top_left:

- :ref:`bool<class_bool>` **use_top_left**

+-----------+-------------------------+
| *Default* | ``false``               |
+-----------+-------------------------+
| *Setter*  | set_use_top_left(value) |
+-----------+-------------------------+
| *Getter*  | is_using_top_left()     |
+-----------+-------------------------+

If ``true``, centers children relative to the ``CenterContainer``'s top left corner.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
