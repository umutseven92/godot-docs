:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the EditorImportPlugin.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_EditorImportPlugin:

EditorImportPlugin
==================

**Inherits:** :ref:`ResourceImporter<class_ResourceImporter>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

Registers a custom resource importer in the editor. Use the class to parse any file and import it as a new resource type.

Description
-----------

EditorImportPlugins provide a way to extend the editor's resource import functionality. Use them to import resources from custom files or to provide alternatives to the editor's existing importers. Register your :ref:`EditorPlugin<class_EditorPlugin>` with :ref:`EditorPlugin.add_import_plugin<class_EditorPlugin_method_add_import_plugin>`.

EditorImportPlugins work by associating with specific file extensions and a resource type. See :ref:`_get_recognized_extensions<class_EditorImportPlugin_method__get_recognized_extensions>` and :ref:`_get_resource_type<class_EditorImportPlugin_method__get_resource_type>`. They may optionally specify some import presets that affect the import process. EditorImportPlugins are responsible for creating the resources and saving them in the ``.godot/imported`` directory.

Below is an example EditorImportPlugin that imports a :ref:`Mesh<class_Mesh>` from a file with the extension ".special" or ".spec":


.. tabs::

 .. code-tab:: gdscript

    tool
    extends EditorImportPlugin
    
    func _get_importer_name():
        return "my.special.plugin"
    
    func _get_visible_name():
        return "Special Mesh"
    
    func _get_recognized_extensions():
        return ["special", "spec"]
    
    func _get_save_extension():
        return "mesh"
    
    func _get_resource_type():
        return "Mesh"
    
    func _get_preset_count():
        return 1
    
    func _get_preset_name(i):
        return "Default"
    
    func _get_import_options(i):
        return [{"name": "my_option", "default_value": false}]
    
    func _import(source_file, save_path, options, platform_variants, gen_files):
        var file = File.new()
        if file.open(source_file, File.READ) != OK:
            return FAILED
        var mesh = ArrayMesh.new()
        # Fill the Mesh with data read in "file", left as an exercise to the reader.
    
        var filename = save_path + "." + _get_save_extension()
        return ResourceSaver.save(filename, mesh)

 .. code-tab:: csharp

    using Godot;
    using System;
    
    public class MySpecialPlugin : EditorImportPlugin
    {
        public override String GetImporterName()
        {
            return "my.special.plugin";
        }
    
        public override String GetVisibleName()
        {
            return "Special Mesh";
        }
    
        public override Godot.Collections.Array GetRecognizedExtensions()
        {
            return new Godot.Collections.Array{"special", "spec"};
        }
    
        public override String GetSaveExtension()
        {
            return "mesh";
        }
    
        public override String GetResourceType()
        {
            return "Mesh";
        }
    
        public override int GetPresetCount()
        {
            return 1;
        }
    
        public override String GetPresetName(int i)
        {
            return "Default";
        }
    
        public override Godot.Collections.Array GetImportOptions(int i)
        {
            return new Godot.Collections.Array{new Godot.Collections.Dictionary{{"name", "myOption"}, {"defaultValue", false}}};
        }
    
        public override int Import(String sourceFile, String savePath, Godot.Collections.Dictionary options, Godot.Collections.Array platformVariants, Godot.Collections.Array genFiles)
        {
            var file = new File();
            if (file.Open(sourceFile, File.ModeFlags.Read) != Error.Ok)
            {
                return (int)Error.Failed;
            }
    
            var mesh = new ArrayMesh();
            // Fill the Mesh with data read in "file", left as an exercise to the reader.
            String filename = savePath + "." + GetSaveExtension();
            return (int)ResourceSaver.Save(filename, mesh);
        }
    }



Tutorials
---------

- :doc:`../tutorials/plugins/editor/import_plugins`

Methods
-------

+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                         | :ref:`_get_import_options<class_EditorImportPlugin_method__get_import_options>` **(** :ref:`int<class_int>` preset_index **)** |virtual| |const|                                                                                                                                                    |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                             | :ref:`_get_import_order<class_EditorImportPlugin_method__get_import_order>` **(** **)** |virtual| |const|                                                                                                                                                                                           |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`_get_importer_name<class_EditorImportPlugin_method__get_importer_name>` **(** **)** |virtual| |const|                                                                                                                                                                                         |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`_get_option_visibility<class_EditorImportPlugin_method__get_option_visibility>` **(** :ref:`StringName<class_StringName>` option_name, :ref:`Dictionary<class_Dictionary>` options **)** |virtual| |const|                                                                                    |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                             | :ref:`_get_preset_count<class_EditorImportPlugin_method__get_preset_count>` **(** **)** |virtual| |const|                                                                                                                                                                                           |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`_get_preset_name<class_EditorImportPlugin_method__get_preset_name>` **(** :ref:`int<class_int>` preset_index **)** |virtual| |const|                                                                                                                                                          |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                         | :ref:`_get_priority<class_EditorImportPlugin_method__get_priority>` **(** **)** |virtual| |const|                                                                                                                                                                                                   |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedStringArray<class_PackedStringArray>` | :ref:`_get_recognized_extensions<class_EditorImportPlugin_method__get_recognized_extensions>` **(** **)** |virtual| |const|                                                                                                                                                                         |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`_get_resource_type<class_EditorImportPlugin_method__get_resource_type>` **(** **)** |virtual| |const|                                                                                                                                                                                         |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`_get_save_extension<class_EditorImportPlugin_method__get_save_extension>` **(** **)** |virtual| |const|                                                                                                                                                                                       |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`_get_visible_name<class_EditorImportPlugin_method__get_visible_name>` **(** **)** |virtual| |const|                                                                                                                                                                                           |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                             | :ref:`_import<class_EditorImportPlugin_method__import>` **(** :ref:`String<class_String>` source_file, :ref:`String<class_String>` save_path, :ref:`Dictionary<class_Dictionary>` options, :ref:`Array<class_Array>` platform_variants, :ref:`Array<class_Array>` gen_files **)** |virtual| |const| |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Method Descriptions
-------------------

.. _class_EditorImportPlugin_method__get_import_options:

- :ref:`Array<class_Array>` **_get_import_options** **(** :ref:`int<class_int>` preset_index **)** |virtual| |const|

Gets the options and default values for the preset at this index. Returns an Array of Dictionaries with the following keys: ``name``, ``default_value``, ``property_hint`` (optional), ``hint_string`` (optional), ``usage`` (optional).

----

.. _class_EditorImportPlugin_method__get_import_order:

- :ref:`int<class_int>` **_get_import_order** **(** **)** |virtual| |const|

Gets the order of this importer to be run when importing resources. Importers with *lower* import orders will be called first, and higher values will be called later. Use this to ensure the importer runs after the dependencies are already imported. The default import order is ``0`` unless overridden by a specific importer. See :ref:`ImportOrder<enum_ResourceImporter_ImportOrder>` for some predefined values.

----

.. _class_EditorImportPlugin_method__get_importer_name:

- :ref:`String<class_String>` **_get_importer_name** **(** **)** |virtual| |const|

Gets the unique name of the importer.

----

.. _class_EditorImportPlugin_method__get_option_visibility:

- :ref:`bool<class_bool>` **_get_option_visibility** **(** :ref:`StringName<class_StringName>` option_name, :ref:`Dictionary<class_Dictionary>` options **)** |virtual| |const|

This method can be overridden to hide specific import options if conditions are met. This is mainly useful for hiding options that depend on others if one of them is disabled. For example:


.. tabs::

 .. code-tab:: gdscript

    func _get_option_visibility(option, options):
        # Only show the lossy quality setting if the compression mode is set to "Lossy".
        if option == "compress/lossy_quality" and options.has("compress/mode"):
            return int(options["compress/mode"]) == COMPRESS_LOSSY # This is a constant that you set
    
        return true

 .. code-tab:: csharp

    public void GetOptionVisibility(string option, Godot.Collections.Dictionary options)
    {
        // Only show the lossy quality setting if the compression mode is set to "Lossy".
        if (option == "compress/lossyQuality" && options.Contains("compress/mode"))
        {
            return (int)options["compress/mode"] == COMPRESS_LOSSY; // This is a constant you set
        }
    
        return true;
    }



Return ``true`` to make all options always visible.

----

.. _class_EditorImportPlugin_method__get_preset_count:

- :ref:`int<class_int>` **_get_preset_count** **(** **)** |virtual| |const|

Gets the number of initial presets defined by the plugin. Use :ref:`_get_import_options<class_EditorImportPlugin_method__get_import_options>` to get the default options for the preset and :ref:`_get_preset_name<class_EditorImportPlugin_method__get_preset_name>` to get the name of the preset.

----

.. _class_EditorImportPlugin_method__get_preset_name:

- :ref:`String<class_String>` **_get_preset_name** **(** :ref:`int<class_int>` preset_index **)** |virtual| |const|

Gets the name of the options preset at this index.

----

.. _class_EditorImportPlugin_method__get_priority:

- :ref:`float<class_float>` **_get_priority** **(** **)** |virtual| |const|

Gets the priority of this plugin for the recognized extension. Higher priority plugins will be preferred. The default priority is ``1.0``.

----

.. _class_EditorImportPlugin_method__get_recognized_extensions:

- :ref:`PackedStringArray<class_PackedStringArray>` **_get_recognized_extensions** **(** **)** |virtual| |const|

Gets the list of file extensions to associate with this loader (case-insensitive). e.g. ``["obj"]``.

----

.. _class_EditorImportPlugin_method__get_resource_type:

- :ref:`String<class_String>` **_get_resource_type** **(** **)** |virtual| |const|

Gets the Godot resource type associated with this loader. e.g. ``"Mesh"`` or ``"Animation"``.

----

.. _class_EditorImportPlugin_method__get_save_extension:

- :ref:`String<class_String>` **_get_save_extension** **(** **)** |virtual| |const|

Gets the extension used to save this resource in the ``.godot/imported`` directory.

----

.. _class_EditorImportPlugin_method__get_visible_name:

- :ref:`String<class_String>` **_get_visible_name** **(** **)** |virtual| |const|

Gets the name to display in the import window. You should choose this name as a continuation to "Import as", e.g. "Import as Special Mesh".

----

.. _class_EditorImportPlugin_method__import:

- :ref:`int<class_int>` **_import** **(** :ref:`String<class_String>` source_file, :ref:`String<class_String>` save_path, :ref:`Dictionary<class_Dictionary>` options, :ref:`Array<class_Array>` platform_variants, :ref:`Array<class_Array>` gen_files **)** |virtual| |const|

Imports ``source_file`` into ``save_path`` with the import ``options`` specified. The ``platform_variants`` and ``gen_files`` arrays will be modified by this function.

This method must be overridden to do the actual importing work. See this class' description for an example of overriding this method.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
