:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Node.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Node:

Node
====

**Inherits:** :ref:`Object<class_Object>`

**Inherited By:** :ref:`AnimationPlayer<class_AnimationPlayer>`, :ref:`AnimationTree<class_AnimationTree>`, :ref:`AudioStreamPlayer<class_AudioStreamPlayer>`, :ref:`CanvasItem<class_CanvasItem>`, :ref:`CanvasLayer<class_CanvasLayer>`, :ref:`EditorFileSystem<class_EditorFileSystem>`, :ref:`EditorInterface<class_EditorInterface>`, :ref:`EditorPlugin<class_EditorPlugin>`, :ref:`EditorResourcePreview<class_EditorResourcePreview>`, :ref:`HTTPRequest<class_HTTPRequest>`, :ref:`InstancePlaceholder<class_InstancePlaceholder>`, :ref:`NavigationAgent2D<class_NavigationAgent2D>`, :ref:`NavigationAgent3D<class_NavigationAgent3D>`, :ref:`NavigationObstacle2D<class_NavigationObstacle2D>`, :ref:`NavigationObstacle3D<class_NavigationObstacle3D>`, :ref:`Node3D<class_Node3D>`, :ref:`ResourcePreloader<class_ResourcePreloader>`, :ref:`ShaderGlobalsOverride<class_ShaderGlobalsOverride>`, :ref:`SkeletonIK3D<class_SkeletonIK3D>`, :ref:`Timer<class_Timer>`, :ref:`Viewport<class_Viewport>`, :ref:`WorldEnvironment<class_WorldEnvironment>`

Base class for all *scene* objects.

Description
-----------

Nodes are Godot's building blocks. They can be assigned as the child of another node, resulting in a tree arrangement. A given node can contain any number of nodes as children with the requirement that all siblings (direct children of a node) should have unique names.

A tree of nodes is called a *scene*. Scenes can be saved to the disk and then instantiated into other scenes. This allows for very high flexibility in the architecture and data model of Godot projects.

**Scene tree:** The :ref:`SceneTree<class_SceneTree>` contains the active tree of nodes. When a node is added to the scene tree, it receives the :ref:`NOTIFICATION_ENTER_TREE<class_Node_constant_NOTIFICATION_ENTER_TREE>` notification and its :ref:`_enter_tree<class_Node_method__enter_tree>` callback is triggered. Child nodes are always added *after* their parent node, i.e. the :ref:`_enter_tree<class_Node_method__enter_tree>` callback of a parent node will be triggered before its child's.

Once all nodes have been added in the scene tree, they receive the :ref:`NOTIFICATION_READY<class_Node_constant_NOTIFICATION_READY>` notification and their respective :ref:`_ready<class_Node_method__ready>` callbacks are triggered. For groups of nodes, the :ref:`_ready<class_Node_method__ready>` callback is called in reverse order, starting with the children and moving up to the parent nodes.

This means that when adding a node to the scene tree, the following order will be used for the callbacks: :ref:`_enter_tree<class_Node_method__enter_tree>` of the parent, :ref:`_enter_tree<class_Node_method__enter_tree>` of the children, :ref:`_ready<class_Node_method__ready>` of the children and finally :ref:`_ready<class_Node_method__ready>` of the parent (recursively for the entire scene tree).

**Processing:** Nodes can override the "process" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback :ref:`_process<class_Node_method__process>`, toggled with :ref:`set_process<class_Node_method_set_process>`) happens as fast as possible and is dependent on the frame rate, so the processing time *delta* (in seconds) is passed as an argument. Physics processing (callback :ref:`_physics_process<class_Node_method__physics_process>`, toggled with :ref:`set_physics_process<class_Node_method_set_physics_process>`) happens a fixed number of times per second (60 by default) and is useful for code related to the physics engine.

Nodes can also process input events. When present, the :ref:`_input<class_Node_method__input>` function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the :ref:`_unhandled_input<class_Node_method__unhandled_input>` function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI :ref:`Control<class_Control>` nodes), ensuring that the node only receives the events that were meant for it.

To keep track of the scene hierarchy (especially when instancing scenes into other scenes), an "owner" can be set for the node with the :ref:`owner<class_Node_property_owner>` property. This keeps track of who instantiated what. This is mostly useful when writing editors and tools, though.

Finally, when a node is freed with :ref:`Object.free<class_Object_method_free>` or :ref:`queue_free<class_Node_method_queue_free>`, it will also free all its children.

**Groups:** Nodes can be added to as many groups as you want to be easy to manage, you could create groups like "enemies" or "collectables" for example, depending on your game. See :ref:`add_to_group<class_Node_method_add_to_group>`, :ref:`is_in_group<class_Node_method_is_in_group>` and :ref:`remove_from_group<class_Node_method_remove_from_group>`. You can then retrieve all nodes in these groups, iterate them and even call methods on groups via the methods on :ref:`SceneTree<class_SceneTree>`.

**Networking with nodes:** After connecting to a server (or making one, see :ref:`ENetMultiplayerPeer<class_ENetMultiplayerPeer>`), it is possible to use the built-in RPC (remote procedure call) system to communicate over the network. By calling :ref:`rpc<class_Node_method_rpc>` with a method name, it will be called locally and in all connected peers (peers = clients and the server that accepts connections). To identify which node receives the RPC call, Godot will use its :ref:`NodePath<class_NodePath>` (make sure node names are the same on all peers). Also, take a look at the high-level networking tutorial and corresponding demos.

Tutorials
---------

- :doc:`../getting_started/step_by_step/scenes_and_nodes`

- `All Demos <https://github.com/godotengine/godot-demo-projects/>`__

Properties
----------

+---------------------------------------------+-------------------------------------------------------------------+-------+
| :ref:`MultiplayerAPI<class_MultiplayerAPI>` | :ref:`custom_multiplayer<class_Node_property_custom_multiplayer>` |       |
+---------------------------------------------+-------------------------------------------------------------------+-------+
| :ref:`MultiplayerAPI<class_MultiplayerAPI>` | :ref:`multiplayer<class_Node_property_multiplayer>`               |       |
+---------------------------------------------+-------------------------------------------------------------------+-------+
| :ref:`StringName<class_StringName>`         | :ref:`name<class_Node_property_name>`                             |       |
+---------------------------------------------+-------------------------------------------------------------------+-------+
| :ref:`Node<class_Node>`                     | :ref:`owner<class_Node_property_owner>`                           |       |
+---------------------------------------------+-------------------------------------------------------------------+-------+
| :ref:`ProcessMode<enum_Node_ProcessMode>`   | :ref:`process_mode<class_Node_property_process_mode>`             | ``0`` |
+---------------------------------------------+-------------------------------------------------------------------+-------+
| :ref:`int<class_int>`                       | :ref:`process_priority<class_Node_property_process_priority>`     | ``0`` |
+---------------------------------------------+-------------------------------------------------------------------+-------+
| :ref:`String<class_String>`                 | :ref:`scene_file_path<class_Node_property_scene_file_path>`       |       |
+---------------------------------------------+-------------------------------------------------------------------+-------+

Methods
-------

+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`_enter_tree<class_Node_method__enter_tree>` **(** **)** |virtual|                                                                                                                                                                                          |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`_exit_tree<class_Node_method__exit_tree>` **(** **)** |virtual|                                                                                                                                                                                            |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedStringArray<class_PackedStringArray>` | :ref:`_get_configuration_warnings<class_Node_method__get_configuration_warnings>` **(** **)** |virtual| |const|                                                                                                                                                  |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`_input<class_Node_method__input>` **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|                                                                                                                                                          |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`_physics_process<class_Node_method__physics_process>` **(** :ref:`float<class_float>` delta **)** |virtual|                                                                                                                                                |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`_process<class_Node_method__process>` **(** :ref:`float<class_float>` delta **)** |virtual|                                                                                                                                                                |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`_ready<class_Node_method__ready>` **(** **)** |virtual|                                                                                                                                                                                                    |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`_unhandled_input<class_Node_method__unhandled_input>` **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|                                                                                                                                      |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`_unhandled_key_input<class_Node_method__unhandled_key_input>` **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|                                                                                                                              |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`add_child<class_Node_method_add_child>` **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` legible_unique_name=false, :ref:`InternalMode<enum_Node_InternalMode>` internal=0 **)**                                                                |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`add_sibling<class_Node_method_add_sibling>` **(** :ref:`Node<class_Node>` sibling, :ref:`bool<class_bool>` legible_unique_name=false **)**                                                                                                                 |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`add_to_group<class_Node_method_add_to_group>` **(** :ref:`StringName<class_StringName>` group, :ref:`bool<class_bool>` persistent=false **)**                                                                                                              |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`can_process<class_Node_method_can_process>` **(** **)** |const|                                                                                                                                                                                            |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Tween<class_Tween>`                         | :ref:`create_tween<class_Node_method_create_tween>` **(** **)**                                                                                                                                                                                                  |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`                           | :ref:`duplicate<class_Node_method_duplicate>` **(** :ref:`int<class_int>` flags=15 **)** |const|                                                                                                                                                                 |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`                           | :ref:`find_node<class_Node_method_find_node>` **(** :ref:`String<class_String>` mask, :ref:`bool<class_bool>` recursive=true, :ref:`bool<class_bool>` owned=true **)** |const|                                                                                   |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`                           | :ref:`find_parent<class_Node_method_find_parent>` **(** :ref:`String<class_String>` mask **)** |const|                                                                                                                                                           |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`                           | :ref:`get_child<class_Node_method_get_child>` **(** :ref:`int<class_int>` idx, :ref:`bool<class_bool>` include_internal=false **)** |const|                                                                                                                      |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                             | :ref:`get_child_count<class_Node_method_get_child_count>` **(** :ref:`bool<class_bool>` include_internal=false **)** |const|                                                                                                                                     |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node[]<class_Node>`                         | :ref:`get_children<class_Node_method_get_children>` **(** :ref:`bool<class_bool>` include_internal=false **)** |const|                                                                                                                                           |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`get_editor_description<class_Node_method_get_editor_description>` **(** **)** |const|                                                                                                                                                                      |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                         | :ref:`get_groups<class_Node_method_get_groups>` **(** **)** |const|                                                                                                                                                                                              |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                             | :ref:`get_index<class_Node_method_get_index>` **(** :ref:`bool<class_bool>` include_internal=false **)** |const|                                                                                                                                                 |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                             | :ref:`get_multiplayer_authority<class_Node_method_get_multiplayer_authority>` **(** **)** |const|                                                                                                                                                                |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`                           | :ref:`get_node<class_Node_method_get_node>` **(** :ref:`NodePath<class_NodePath>` path **)** |const|                                                                                                                                                             |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                         | :ref:`get_node_and_resource<class_Node_method_get_node_and_resource>` **(** :ref:`NodePath<class_NodePath>` path **)**                                                                                                                                           |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`                           | :ref:`get_node_or_null<class_Node_method_get_node_or_null>` **(** :ref:`NodePath<class_NodePath>` path **)** |const|                                                                                                                                             |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`                           | :ref:`get_parent<class_Node_method_get_parent>` **(** **)** |const|                                                                                                                                                                                              |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`NodePath<class_NodePath>`                   | :ref:`get_path<class_Node_method_get_path>` **(** **)** |const|                                                                                                                                                                                                  |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`NodePath<class_NodePath>`                   | :ref:`get_path_to<class_Node_method_get_path_to>` **(** :ref:`Node<class_Node>` node **)** |const|                                                                                                                                                               |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                         | :ref:`get_physics_process_delta_time<class_Node_method_get_physics_process_delta_time>` **(** **)** |const|                                                                                                                                                      |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                         | :ref:`get_process_delta_time<class_Node_method_get_process_delta_time>` **(** **)** |const|                                                                                                                                                                      |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`get_scene_instance_load_placeholder<class_Node_method_get_scene_instance_load_placeholder>` **(** **)** |const|                                                                                                                                            |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`SceneTree<class_SceneTree>`                 | :ref:`get_tree<class_Node_method_get_tree>` **(** **)** |const|                                                                                                                                                                                                  |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Viewport<class_Viewport>`                   | :ref:`get_viewport<class_Node_method_get_viewport>` **(** **)** |const|                                                                                                                                                                                          |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`has_node<class_Node_method_has_node>` **(** :ref:`NodePath<class_NodePath>` path **)** |const|                                                                                                                                                             |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`has_node_and_resource<class_Node_method_has_node_and_resource>` **(** :ref:`NodePath<class_NodePath>` path **)** |const|                                                                                                                                   |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_ancestor_of<class_Node_method_is_ancestor_of>` **(** :ref:`Node<class_Node>` node **)** |const|                                                                                                                                                         |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_displayed_folded<class_Node_method_is_displayed_folded>` **(** **)** |const|                                                                                                                                                                            |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_editable_instance<class_Node_method_is_editable_instance>` **(** :ref:`Node<class_Node>` node **)** |const|                                                                                                                                             |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_greater_than<class_Node_method_is_greater_than>` **(** :ref:`Node<class_Node>` node **)** |const|                                                                                                                                                       |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_in_group<class_Node_method_is_in_group>` **(** :ref:`StringName<class_StringName>` group **)** |const|                                                                                                                                                  |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_inside_tree<class_Node_method_is_inside_tree>` **(** **)** |const|                                                                                                                                                                                      |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_multiplayer_authority<class_Node_method_is_multiplayer_authority>` **(** **)** |const|                                                                                                                                                                  |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_physics_processing<class_Node_method_is_physics_processing>` **(** **)** |const|                                                                                                                                                                        |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_physics_processing_internal<class_Node_method_is_physics_processing_internal>` **(** **)** |const|                                                                                                                                                      |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_processing<class_Node_method_is_processing>` **(** **)** |const|                                                                                                                                                                                        |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_processing_input<class_Node_method_is_processing_input>` **(** **)** |const|                                                                                                                                                                            |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_processing_internal<class_Node_method_is_processing_internal>` **(** **)** |const|                                                                                                                                                                      |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_processing_unhandled_input<class_Node_method_is_processing_unhandled_input>` **(** **)** |const|                                                                                                                                                        |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_processing_unhandled_key_input<class_Node_method_is_processing_unhandled_key_input>` **(** **)** |const|                                                                                                                                                |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`move_child<class_Node_method_move_child>` **(** :ref:`Node<class_Node>` child_node, :ref:`int<class_int>` to_position **)**                                                                                                                                |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`print_stray_nodes<class_Node_method_print_stray_nodes>` **(** **)**                                                                                                                                                                                        |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`print_tree<class_Node_method_print_tree>` **(** **)**                                                                                                                                                                                                      |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`print_tree_pretty<class_Node_method_print_tree_pretty>` **(** **)**                                                                                                                                                                                        |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`propagate_call<class_Node_method_propagate_call>` **(** :ref:`StringName<class_StringName>` method, :ref:`Array<class_Array>` args=[], :ref:`bool<class_bool>` parent_first=false **)**                                                                    |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`propagate_notification<class_Node_method_propagate_notification>` **(** :ref:`int<class_int>` what **)**                                                                                                                                                   |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`queue_free<class_Node_method_queue_free>` **(** **)**                                                                                                                                                                                                      |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`raise<class_Node_method_raise>` **(** **)**                                                                                                                                                                                                                |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`remove_and_skip<class_Node_method_remove_and_skip>` **(** **)**                                                                                                                                                                                            |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`remove_child<class_Node_method_remove_child>` **(** :ref:`Node<class_Node>` node **)**                                                                                                                                                                     |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`remove_from_group<class_Node_method_remove_from_group>` **(** :ref:`StringName<class_StringName>` group **)**                                                                                                                                              |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`replace_by<class_Node_method_replace_by>` **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` keep_groups=false **)**                                                                                                                              |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`request_ready<class_Node_method_request_ready>` **(** **)**                                                                                                                                                                                                |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`                     | :ref:`rpc<class_Node_method_rpc>` **(** :ref:`StringName<class_StringName>` method, ... **)** |vararg|                                                                                                                                                           |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                             | :ref:`rpc_config<class_Node_method_rpc_config>` **(** :ref:`StringName<class_StringName>` method, :ref:`RPCMode<enum_@GlobalScope_RPCMode>` rpc_mode, :ref:`TransferMode<enum_@GlobalScope_TransferMode>` transfer_mode=2, :ref:`int<class_int>` channel=0 **)** |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`                     | :ref:`rpc_id<class_Node_method_rpc_id>` **(** :ref:`int<class_int>` peer_id, :ref:`StringName<class_StringName>` method, ... **)** |vararg|                                                                                                                      |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`set_display_folded<class_Node_method_set_display_folded>` **(** :ref:`bool<class_bool>` fold **)**                                                                                                                                                         |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`set_editable_instance<class_Node_method_set_editable_instance>` **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` is_editable **)**                                                                                                              |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`set_editor_description<class_Node_method_set_editor_description>` **(** :ref:`String<class_String>` editor_description **)**                                                                                                                               |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`set_multiplayer_authority<class_Node_method_set_multiplayer_authority>` **(** :ref:`int<class_int>` id, :ref:`bool<class_bool>` recursive=true **)**                                                                                                       |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`set_physics_process<class_Node_method_set_physics_process>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                                                                     |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`set_physics_process_internal<class_Node_method_set_physics_process_internal>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                                                   |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`set_process<class_Node_method_set_process>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                                                                                     |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`set_process_input<class_Node_method_set_process_input>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                                                                         |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`set_process_internal<class_Node_method_set_process_internal>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                                                                   |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`set_process_unhandled_input<class_Node_method_set_process_unhandled_input>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                                                     |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`set_process_unhandled_key_input<class_Node_method_set_process_unhandled_key_input>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                                             |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`set_scene_instance_load_placeholder<class_Node_method_set_scene_instance_load_placeholder>` **(** :ref:`bool<class_bool>` load_placeholder **)**                                                                                                           |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`update_configuration_warnings<class_Node_method_update_configuration_warnings>` **(** **)**                                                                                                                                                                |
+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Signals
-------

.. _class_Node_signal_ready:

- **ready** **(** **)**

Emitted when the node is ready.

----

.. _class_Node_signal_renamed:

- **renamed** **(** **)**

Emitted when the node is renamed.

----

.. _class_Node_signal_tree_entered:

- **tree_entered** **(** **)**

Emitted when the node enters the tree.

----

.. _class_Node_signal_tree_exited:

- **tree_exited** **(** **)**

Emitted after the node exits the tree and is no longer active.

----

.. _class_Node_signal_tree_exiting:

- **tree_exiting** **(** **)**

Emitted when the node is still active but about to exit the tree. This is the right place for de-initialization (or a "destructor", if you will).

Enumerations
------------

.. _enum_Node_ProcessMode:

.. _class_Node_constant_PROCESS_MODE_INHERIT:

.. _class_Node_constant_PROCESS_MODE_PAUSABLE:

.. _class_Node_constant_PROCESS_MODE_WHEN_PAUSED:

.. _class_Node_constant_PROCESS_MODE_ALWAYS:

.. _class_Node_constant_PROCESS_MODE_DISABLED:

enum **ProcessMode**:

- **PROCESS_MODE_INHERIT** = **0** --- Inherits process mode from the node's parent. For the root node, it is equivalent to :ref:`PROCESS_MODE_PAUSABLE<class_Node_constant_PROCESS_MODE_PAUSABLE>`. Default.

- **PROCESS_MODE_PAUSABLE** = **1** --- Stops processing when the :ref:`SceneTree<class_SceneTree>` is paused (process when unpaused). This is the inverse of :ref:`PROCESS_MODE_WHEN_PAUSED<class_Node_constant_PROCESS_MODE_WHEN_PAUSED>`.

- **PROCESS_MODE_WHEN_PAUSED** = **2** --- Only process when the :ref:`SceneTree<class_SceneTree>` is paused (don't process when unpaused). This is the inverse of :ref:`PROCESS_MODE_PAUSABLE<class_Node_constant_PROCESS_MODE_PAUSABLE>`.

- **PROCESS_MODE_ALWAYS** = **3** --- Always process. Continue processing always, ignoring the :ref:`SceneTree<class_SceneTree>`'s paused property. This is the inverse of :ref:`PROCESS_MODE_DISABLED<class_Node_constant_PROCESS_MODE_DISABLED>`.

- **PROCESS_MODE_DISABLED** = **4** --- Never process. Completely disables processing, ignoring the :ref:`SceneTree<class_SceneTree>`'s paused property. This is the inverse of :ref:`PROCESS_MODE_ALWAYS<class_Node_constant_PROCESS_MODE_ALWAYS>`.

----

.. _enum_Node_DuplicateFlags:

.. _class_Node_constant_DUPLICATE_SIGNALS:

.. _class_Node_constant_DUPLICATE_GROUPS:

.. _class_Node_constant_DUPLICATE_SCRIPTS:

.. _class_Node_constant_DUPLICATE_USE_INSTANCING:

enum **DuplicateFlags**:

- **DUPLICATE_SIGNALS** = **1** --- Duplicate the node's signals.

- **DUPLICATE_GROUPS** = **2** --- Duplicate the node's groups.

- **DUPLICATE_SCRIPTS** = **4** --- Duplicate the node's scripts.

- **DUPLICATE_USE_INSTANCING** = **8** --- Duplicate using instancing.

An instance stays linked to the original so when the original changes, the instance changes too.

----

.. _enum_Node_InternalMode:

.. _class_Node_constant_INTERNAL_MODE_DISABLED:

.. _class_Node_constant_INTERNAL_MODE_FRONT:

.. _class_Node_constant_INTERNAL_MODE_BACK:

enum **InternalMode**:

- **INTERNAL_MODE_DISABLED** = **0** --- Node will not be internal.

- **INTERNAL_MODE_FRONT** = **1** --- Node will be placed at the front of parent's node list, before any non-internal sibling.

- **INTERNAL_MODE_BACK** = **2** --- Node will be placed at the back of parent's node list, after any non-internal sibling.

Constants
---------

.. _class_Node_constant_NOTIFICATION_ENTER_TREE:

.. _class_Node_constant_NOTIFICATION_EXIT_TREE:

.. _class_Node_constant_NOTIFICATION_MOVED_IN_PARENT:

.. _class_Node_constant_NOTIFICATION_READY:

.. _class_Node_constant_NOTIFICATION_PAUSED:

.. _class_Node_constant_NOTIFICATION_UNPAUSED:

.. _class_Node_constant_NOTIFICATION_PHYSICS_PROCESS:

.. _class_Node_constant_NOTIFICATION_PROCESS:

.. _class_Node_constant_NOTIFICATION_PARENTED:

.. _class_Node_constant_NOTIFICATION_UNPARENTED:

.. _class_Node_constant_NOTIFICATION_INSTANCED:

.. _class_Node_constant_NOTIFICATION_DRAG_BEGIN:

.. _class_Node_constant_NOTIFICATION_DRAG_END:

.. _class_Node_constant_NOTIFICATION_PATH_CHANGED:

.. _class_Node_constant_NOTIFICATION_INTERNAL_PROCESS:

.. _class_Node_constant_NOTIFICATION_INTERNAL_PHYSICS_PROCESS:

.. _class_Node_constant_NOTIFICATION_POST_ENTER_TREE:

.. _class_Node_constant_NOTIFICATION_DISABLED:

.. _class_Node_constant_NOTIFICATION_ENABLED:

.. _class_Node_constant_NOTIFICATION_EDITOR_PRE_SAVE:

.. _class_Node_constant_NOTIFICATION_EDITOR_POST_SAVE:

.. _class_Node_constant_NOTIFICATION_WM_MOUSE_ENTER:

.. _class_Node_constant_NOTIFICATION_WM_MOUSE_EXIT:

.. _class_Node_constant_NOTIFICATION_WM_WINDOW_FOCUS_IN:

.. _class_Node_constant_NOTIFICATION_WM_WINDOW_FOCUS_OUT:

.. _class_Node_constant_NOTIFICATION_WM_CLOSE_REQUEST:

.. _class_Node_constant_NOTIFICATION_WM_GO_BACK_REQUEST:

.. _class_Node_constant_NOTIFICATION_WM_SIZE_CHANGED:

.. _class_Node_constant_NOTIFICATION_OS_MEMORY_WARNING:

.. _class_Node_constant_NOTIFICATION_TRANSLATION_CHANGED:

.. _class_Node_constant_NOTIFICATION_WM_ABOUT:

.. _class_Node_constant_NOTIFICATION_CRASH:

.. _class_Node_constant_NOTIFICATION_OS_IME_UPDATE:

.. _class_Node_constant_NOTIFICATION_APPLICATION_RESUMED:

.. _class_Node_constant_NOTIFICATION_APPLICATION_PAUSED:

.. _class_Node_constant_NOTIFICATION_APPLICATION_FOCUS_IN:

.. _class_Node_constant_NOTIFICATION_APPLICATION_FOCUS_OUT:

.. _class_Node_constant_NOTIFICATION_TEXT_SERVER_CHANGED:

- **NOTIFICATION_ENTER_TREE** = **10** --- Notification received when the node enters a :ref:`SceneTree<class_SceneTree>`.

- **NOTIFICATION_EXIT_TREE** = **11** --- Notification received when the node is about to exit a :ref:`SceneTree<class_SceneTree>`.

- **NOTIFICATION_MOVED_IN_PARENT** = **12** --- Notification received when the node is moved in the parent.

- **NOTIFICATION_READY** = **13** --- Notification received when the node is ready. See :ref:`_ready<class_Node_method__ready>`.

- **NOTIFICATION_PAUSED** = **14** --- Notification received when the node is paused.

- **NOTIFICATION_UNPAUSED** = **15** --- Notification received when the node is unpaused.

- **NOTIFICATION_PHYSICS_PROCESS** = **16** --- Notification received every frame when the physics process flag is set (see :ref:`set_physics_process<class_Node_method_set_physics_process>`).

- **NOTIFICATION_PROCESS** = **17** --- Notification received every frame when the process flag is set (see :ref:`set_process<class_Node_method_set_process>`).

- **NOTIFICATION_PARENTED** = **18** --- Notification received when a node is set as a child of another node.

**Note:** This doesn't mean that a node entered the :ref:`SceneTree<class_SceneTree>`.

- **NOTIFICATION_UNPARENTED** = **19** --- Notification received when a node is unparented (parent removed it from the list of children).

- **NOTIFICATION_INSTANCED** = **20** --- Notification received when the node is instantiated.

- **NOTIFICATION_DRAG_BEGIN** = **21** --- Notification received when a drag begins.

- **NOTIFICATION_DRAG_END** = **22** --- Notification received when a drag ends.

- **NOTIFICATION_PATH_CHANGED** = **23** --- Notification received when the node's :ref:`NodePath<class_NodePath>` changed.

- **NOTIFICATION_INTERNAL_PROCESS** = **25** --- Notification received every frame when the internal process flag is set (see :ref:`set_process_internal<class_Node_method_set_process_internal>`).

- **NOTIFICATION_INTERNAL_PHYSICS_PROCESS** = **26** --- Notification received every frame when the internal physics process flag is set (see :ref:`set_physics_process_internal<class_Node_method_set_physics_process_internal>`).

- **NOTIFICATION_POST_ENTER_TREE** = **27** --- Notification received when the node is ready, just before :ref:`NOTIFICATION_READY<class_Node_constant_NOTIFICATION_READY>` is received. Unlike the latter, it's sent every time the node enters tree, instead of only once.

- **NOTIFICATION_DISABLED** = **28** --- Notification received when the node is disabled. See :ref:`PROCESS_MODE_DISABLED<class_Node_constant_PROCESS_MODE_DISABLED>`.

- **NOTIFICATION_ENABLED** = **29** --- Notification received when the node is enabled again after being disabled. See :ref:`PROCESS_MODE_DISABLED<class_Node_constant_PROCESS_MODE_DISABLED>`.

- **NOTIFICATION_EDITOR_PRE_SAVE** = **9001** --- Notification received right before the scene with the node is saved in the editor. This notification is only sent in the Godot editor and will not occur in exported projects.

- **NOTIFICATION_EDITOR_POST_SAVE** = **9002** --- Notification received right after the scene with the node is saved in the editor. This notification is only sent in the Godot editor and will not occur in exported projects.

- **NOTIFICATION_WM_MOUSE_ENTER** = **1002** --- Notification received from the OS when the mouse enters the game window.

Implemented on desktop and web platforms.

- **NOTIFICATION_WM_MOUSE_EXIT** = **1003** --- Notification received from the OS when the mouse leaves the game window.

Implemented on desktop and web platforms.

- **NOTIFICATION_WM_WINDOW_FOCUS_IN** = **1004** --- Notification received from the OS when the node's parent :ref:`Window<class_Window>` is focused. This may be a change of focus between two windows of the same engine instance, or from the OS desktop or a third-party application to a window of the game (in which case :ref:`NOTIFICATION_APPLICATION_FOCUS_IN<class_Node_constant_NOTIFICATION_APPLICATION_FOCUS_IN>` is also emitted).

- **NOTIFICATION_WM_WINDOW_FOCUS_OUT** = **1005** --- Notification received from the OS when the node's parent :ref:`Window<class_Window>` is defocused. This may be a change of focus between two windows of the same engine instance, or from a window of the game to the OS desktop or a third-party application (in which case :ref:`NOTIFICATION_APPLICATION_FOCUS_OUT<class_Node_constant_NOTIFICATION_APPLICATION_FOCUS_OUT>` is also emitted).

- **NOTIFICATION_WM_CLOSE_REQUEST** = **1006** --- Notification received from the OS when a close request is sent (e.g. closing the window with a "Close" button or :kbd:`Alt + F4`).

Implemented on desktop platforms.

- **NOTIFICATION_WM_GO_BACK_REQUEST** = **1007** --- Notification received from the OS when a go back request is sent (e.g. pressing the "Back" button on Android).

Specific to the Android platform.

- **NOTIFICATION_WM_SIZE_CHANGED** = **1008**

- **NOTIFICATION_OS_MEMORY_WARNING** = **2009** --- Notification received from the OS when the application is exceeding its allocated memory.

Specific to the iOS platform.

- **NOTIFICATION_TRANSLATION_CHANGED** = **2010** --- Notification received when translations may have changed. Can be triggered by the user changing the locale. Can be used to respond to language changes, for example to change the UI strings on the fly. Useful when working with the built-in translation support, like :ref:`Object.tr<class_Object_method_tr>`.

- **NOTIFICATION_WM_ABOUT** = **2011** --- Notification received from the OS when a request for "About" information is sent.

Specific to the macOS platform.

- **NOTIFICATION_CRASH** = **2012** --- Notification received from Godot's crash handler when the engine is about to crash.

Implemented on desktop platforms if the crash handler is enabled.

- **NOTIFICATION_OS_IME_UPDATE** = **2013** --- Notification received from the OS when an update of the Input Method Engine occurs (e.g. change of IME cursor position or composition string).

Specific to the macOS platform.

- **NOTIFICATION_APPLICATION_RESUMED** = **2014** --- Notification received from the OS when the application is resumed.

Specific to the Android platform.

- **NOTIFICATION_APPLICATION_PAUSED** = **2015** --- Notification received from the OS when the application is paused.

Specific to the Android platform.

- **NOTIFICATION_APPLICATION_FOCUS_IN** = **2016** --- Notification received from the OS when the application is focused, i.e. when changing the focus from the OS desktop or a thirdparty application to any open window of the Godot instance.

Implemented on desktop platforms.

- **NOTIFICATION_APPLICATION_FOCUS_OUT** = **2017** --- Notification received from the OS when the application is defocused, i.e. when changing the focus from any open window of the Godot instance to the OS desktop or a thirdparty application.

Implemented on desktop platforms.

- **NOTIFICATION_TEXT_SERVER_CHANGED** = **2018** --- Notification received when text server is changed.

Property Descriptions
---------------------

.. _class_Node_property_custom_multiplayer:

- :ref:`MultiplayerAPI<class_MultiplayerAPI>` **custom_multiplayer**

+----------+-------------------------------+
| *Setter* | set_custom_multiplayer(value) |
+----------+-------------------------------+
| *Getter* | get_custom_multiplayer()      |
+----------+-------------------------------+

The override to the default :ref:`MultiplayerAPI<class_MultiplayerAPI>`. Set to ``null`` to use the default :ref:`SceneTree<class_SceneTree>` one.

----

.. _class_Node_property_multiplayer:

- :ref:`MultiplayerAPI<class_MultiplayerAPI>` **multiplayer**

+----------+-------------------+
| *Getter* | get_multiplayer() |
+----------+-------------------+

The :ref:`MultiplayerAPI<class_MultiplayerAPI>` instance associated with this node. Either the :ref:`custom_multiplayer<class_Node_property_custom_multiplayer>`, or the default SceneTree one (if inside tree).

----

.. _class_Node_property_name:

- :ref:`StringName<class_StringName>` **name**

+----------+-----------------+
| *Setter* | set_name(value) |
+----------+-----------------+
| *Getter* | get_name()      |
+----------+-----------------+

The name of the node. This name is unique among the siblings (other child nodes from the same parent). When set to an existing name, the node will be automatically renamed.

**Note:** Auto-generated names might include the ``@`` character, which is reserved for unique names when using :ref:`add_child<class_Node_method_add_child>`. When setting the name manually, any ``@`` will be removed.

----

.. _class_Node_property_owner:

- :ref:`Node<class_Node>` **owner**

+----------+------------------+
| *Setter* | set_owner(value) |
+----------+------------------+
| *Getter* | get_owner()      |
+----------+------------------+

The node owner. A node can have any other node as owner (as long as it is a valid parent, grandparent, etc. ascending in the tree). When saving a node (using :ref:`PackedScene<class_PackedScene>`), all the nodes it owns will be saved with it. This allows for the creation of complex :ref:`SceneTree<class_SceneTree>`\ s, with instancing and subinstancing.

----

.. _class_Node_property_process_mode:

- :ref:`ProcessMode<enum_Node_ProcessMode>` **process_mode**

+-----------+-------------------------+
| *Default* | ``0``                   |
+-----------+-------------------------+
| *Setter*  | set_process_mode(value) |
+-----------+-------------------------+
| *Getter*  | get_process_mode()      |
+-----------+-------------------------+

Can be used to pause or unpause the node, or make the node paused based on the :ref:`SceneTree<class_SceneTree>`, or make it inherit the process mode from its parent (default).

----

.. _class_Node_property_process_priority:

- :ref:`int<class_int>` **process_priority**

+-----------+-----------------------------+
| *Default* | ``0``                       |
+-----------+-----------------------------+
| *Setter*  | set_process_priority(value) |
+-----------+-----------------------------+
| *Getter*  | get_process_priority()      |
+-----------+-----------------------------+

The node's priority in the execution order of the enabled processing callbacks (i.e. :ref:`NOTIFICATION_PROCESS<class_Node_constant_NOTIFICATION_PROCESS>`, :ref:`NOTIFICATION_PHYSICS_PROCESS<class_Node_constant_NOTIFICATION_PHYSICS_PROCESS>` and their internal counterparts). Nodes whose process priority value is *lower* will have their processing callbacks executed first.

----

.. _class_Node_property_scene_file_path:

- :ref:`String<class_String>` **scene_file_path**

+----------+----------------------------+
| *Setter* | set_scene_file_path(value) |
+----------+----------------------------+
| *Getter* | get_scene_file_path()      |
+----------+----------------------------+

If a scene is instantiated from a file, its topmost node contains the absolute file path from which it was loaded in :ref:`scene_file_path<class_Node_property_scene_file_path>` (e.g. ``res://levels/1.tscn``). Otherwise, :ref:`scene_file_path<class_Node_property_scene_file_path>` is set to an empty string.

Method Descriptions
-------------------

.. _class_Node_method__enter_tree:

- void **_enter_tree** **(** **)** |virtual|

Called when the node enters the :ref:`SceneTree<class_SceneTree>` (e.g. upon instancing, scene changing, or after calling :ref:`add_child<class_Node_method_add_child>` in a script). If the node has children, its :ref:`_enter_tree<class_Node_method__enter_tree>` callback will be called first, and then that of the children.

Corresponds to the :ref:`NOTIFICATION_ENTER_TREE<class_Node_constant_NOTIFICATION_ENTER_TREE>` notification in :ref:`Object._notification<class_Object_method__notification>`.

----

.. _class_Node_method__exit_tree:

- void **_exit_tree** **(** **)** |virtual|

Called when the node is about to leave the :ref:`SceneTree<class_SceneTree>` (e.g. upon freeing, scene changing, or after calling :ref:`remove_child<class_Node_method_remove_child>` in a script). If the node has children, its :ref:`_exit_tree<class_Node_method__exit_tree>` callback will be called last, after all its children have left the tree.

Corresponds to the :ref:`NOTIFICATION_EXIT_TREE<class_Node_constant_NOTIFICATION_EXIT_TREE>` notification in :ref:`Object._notification<class_Object_method__notification>` and signal :ref:`tree_exiting<class_Node_signal_tree_exiting>`. To get notified when the node has already left the active tree, connect to the :ref:`tree_exited<class_Node_signal_tree_exited>`.

----

.. _class_Node_method__get_configuration_warnings:

- :ref:`PackedStringArray<class_PackedStringArray>` **_get_configuration_warnings** **(** **)** |virtual| |const|

The elements in the array returned from this method are displayed as warnings in the Scene Dock if the script that overrides it is a ``tool`` script.

Returning an empty array produces no warnings.

Call :ref:`update_configuration_warnings<class_Node_method_update_configuration_warnings>` when the warnings need to be updated for this node.

----

.. _class_Node_method__input:

- void **_input** **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|

Called when there is an input event. The input event propagates up through the node tree until a node consumes it.

It is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with :ref:`set_process_input<class_Node_method_set_process_input>`.

To consume the input event and stop it propagating further to other nodes, :ref:`Viewport.set_input_as_handled<class_Viewport_method_set_input_as_handled>` can be called.

For gameplay input, :ref:`_unhandled_input<class_Node_method__unhandled_input>` and :ref:`_unhandled_key_input<class_Node_method__unhandled_key_input>` are usually a better fit as they allow the GUI to intercept the events first.

**Note:** This method is only called if the node is present in the scene tree (i.e. if it's not orphan).

----

.. _class_Node_method__physics_process:

- void **_physics_process** **(** :ref:`float<class_float>` delta **)** |virtual|

Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the ``delta`` variable should be constant. ``delta`` is in seconds.

It is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with :ref:`set_physics_process<class_Node_method_set_physics_process>`.

Corresponds to the :ref:`NOTIFICATION_PHYSICS_PROCESS<class_Node_constant_NOTIFICATION_PHYSICS_PROCESS>` notification in :ref:`Object._notification<class_Object_method__notification>`.

**Note:** This method is only called if the node is present in the scene tree (i.e. if it's not orphan).

----

.. _class_Node_method__process:

- void **_process** **(** :ref:`float<class_float>` delta **)** |virtual|

Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the ``delta`` time since the previous frame is not constant. ``delta`` is in seconds.

It is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with :ref:`set_process<class_Node_method_set_process>`.

Corresponds to the :ref:`NOTIFICATION_PROCESS<class_Node_constant_NOTIFICATION_PROCESS>` notification in :ref:`Object._notification<class_Object_method__notification>`.

**Note:** This method is only called if the node is present in the scene tree (i.e. if it's not orphan).

----

.. _class_Node_method__ready:

- void **_ready** **(** **)** |virtual|

Called when the node is "ready", i.e. when both the node and its children have entered the scene tree. If the node has children, their :ref:`_ready<class_Node_method__ready>` callbacks get triggered first, and the parent node will receive the ready notification afterwards.

Corresponds to the :ref:`NOTIFICATION_READY<class_Node_constant_NOTIFICATION_READY>` notification in :ref:`Object._notification<class_Object_method__notification>`. See also the ``onready`` keyword for variables.

Usually used for initialization. For even earlier initialization, :ref:`Object._init<class_Object_method__init>` may be used. See also :ref:`_enter_tree<class_Node_method__enter_tree>`.

**Note:** :ref:`_ready<class_Node_method__ready>` may be called only once for each node. After removing a node from the scene tree and adding again, ``_ready`` will not be called for the second time. This can be bypassed with requesting another call with :ref:`request_ready<class_Node_method_request_ready>`, which may be called anywhere before adding the node again.

----

.. _class_Node_method__unhandled_input:

- void **_unhandled_input** **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|

Called when an :ref:`InputEvent<class_InputEvent>` hasn't been consumed by :ref:`_input<class_Node_method__input>` or any GUI. The input event propagates up through the node tree until a node consumes it.

It is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with :ref:`set_process_unhandled_input<class_Node_method_set_process_unhandled_input>`.

To consume the input event and stop it propagating further to other nodes, :ref:`Viewport.set_input_as_handled<class_Viewport_method_set_input_as_handled>` can be called.

For gameplay input, this and :ref:`_unhandled_key_input<class_Node_method__unhandled_key_input>` are usually a better fit than :ref:`_input<class_Node_method__input>` as they allow the GUI to intercept the events first.

**Note:** This method is only called if the node is present in the scene tree (i.e. if it's not orphan).

----

.. _class_Node_method__unhandled_key_input:

- void **_unhandled_key_input** **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|

Called when an :ref:`InputEventKey<class_InputEventKey>` or :ref:`InputEventShortcut<class_InputEventShortcut>` hasn't been consumed by :ref:`_input<class_Node_method__input>` or any GUI. The input event propagates up through the node tree until a node consumes it.

It is only called if unhandled key input processing is enabled, which is done automatically if this method is overridden, and can be toggled with :ref:`set_process_unhandled_key_input<class_Node_method_set_process_unhandled_key_input>`.

To consume the input event and stop it propagating further to other nodes, :ref:`Viewport.set_input_as_handled<class_Viewport_method_set_input_as_handled>` can be called.

For gameplay input, this and :ref:`_unhandled_input<class_Node_method__unhandled_input>` are usually a better fit than :ref:`_input<class_Node_method__input>` as they allow the GUI to intercept the events first.

**Note:** This method is only called if the node is present in the scene tree (i.e. if it's not orphan).

----

.. _class_Node_method_add_child:

- void **add_child** **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` legible_unique_name=false, :ref:`InternalMode<enum_Node_InternalMode>` internal=0 **)**

Adds a child node. Nodes can have any number of children, but every child must have a unique name. Child nodes are automatically deleted when the parent node is deleted, so an entire scene can be removed by deleting its topmost node.

If ``legible_unique_name`` is ``true``, the child node will have a human-readable name based on the name of the node being instantiated instead of its type.

If ``internal`` is different than :ref:`INTERNAL_MODE_DISABLED<class_Node_constant_INTERNAL_MODE_DISABLED>`, the child will be added as internal node. Such nodes are ignored by methods like :ref:`get_children<class_Node_method_get_children>`, unless their parameter ``include_internal`` is ``true``.The intended usage is to hide the internal nodes from the user, so the user won't accidentally delete or modify them. Used by some GUI nodes, e.g. :ref:`ColorPicker<class_ColorPicker>`. See :ref:`InternalMode<enum_Node_InternalMode>` for available modes.

**Note:** If the child node already has a parent, the function will fail. Use :ref:`remove_child<class_Node_method_remove_child>` first to remove the node from its current parent. For example:


.. tabs::

 .. code-tab:: gdscript

    var child_node = get_child(0)
    if child_node.get_parent():
        child_node.get_parent().remove_child(child_node)
    add_child(child_node)

 .. code-tab:: csharp

    Node childNode = GetChild(0);
    if (childNode.GetParent() != null)
    {
        childNode.GetParent().RemoveChild(childNode);
    }
    AddChild(childNode);



If you need the child node to be added below a specific node in the list of children, use :ref:`add_sibling<class_Node_method_add_sibling>` instead of this method.

**Note:** If you want a child to be persisted to a :ref:`PackedScene<class_PackedScene>`, you must set :ref:`owner<class_Node_property_owner>` in addition to calling :ref:`add_child<class_Node_method_add_child>`. This is typically relevant for `tool scripts <https://godot.readthedocs.io/en/latest/tutorials/misc/running_code_in_the_editor.html>`__ and `editor plugins <https://godot.readthedocs.io/en/latest/tutorials/plugins/editor/index.html>`__. If :ref:`add_child<class_Node_method_add_child>` is called without setting :ref:`owner<class_Node_property_owner>`, the newly added ``Node`` will not be visible in the scene tree, though it will be visible in the 2D/3D view.

----

.. _class_Node_method_add_sibling:

- void **add_sibling** **(** :ref:`Node<class_Node>` sibling, :ref:`bool<class_bool>` legible_unique_name=false **)**

Adds a ``sibling`` node to current's node parent, at the same level as that node, right below it.

If ``legible_unique_name`` is ``true``, the child node will have a human-readable name based on the name of the node being instantiated instead of its type.

Use :ref:`add_child<class_Node_method_add_child>` instead of this method if you don't need the child node to be added below a specific node in the list of children.

**Note:** If this node is internal, the new sibling will be internal too (see ``internal`` parameter in :ref:`add_child<class_Node_method_add_child>`).

----

.. _class_Node_method_add_to_group:

- void **add_to_group** **(** :ref:`StringName<class_StringName>` group, :ref:`bool<class_bool>` persistent=false **)**

Adds the node to a group. Groups are helpers to name and organize a subset of nodes, for example "enemies" or "collectables". A node can be in any number of groups. Nodes can be assigned a group at any time, but will not be added until they are inside the scene tree (see :ref:`is_inside_tree<class_Node_method_is_inside_tree>`). See notes in the description, and the group methods in :ref:`SceneTree<class_SceneTree>`.

The ``persistent`` option is used when packing node to :ref:`PackedScene<class_PackedScene>` and saving to file. Non-persistent groups aren't stored.

**Note:** For performance reasons, the order of node groups is *not* guaranteed. The order of node groups should not be relied upon as it can vary across project runs.

----

.. _class_Node_method_can_process:

- :ref:`bool<class_bool>` **can_process** **(** **)** |const|

Returns ``true`` if the node can process while the scene tree is paused (see :ref:`process_mode<class_Node_property_process_mode>`). Always returns ``true`` if the scene tree is not paused, and ``false`` if the node is not in the tree.

----

.. _class_Node_method_create_tween:

- :ref:`Tween<class_Tween>` **create_tween** **(** **)**

Creates a new :ref:`Tween<class_Tween>` and binds it to this node. This is equivalent of doing:

::

    get_tree().create_tween().bind_node(self)

----

.. _class_Node_method_duplicate:

- :ref:`Node<class_Node>` **duplicate** **(** :ref:`int<class_int>` flags=15 **)** |const|

Duplicates the node, returning a new node.

You can fine-tune the behavior using the ``flags`` (see :ref:`DuplicateFlags<enum_Node_DuplicateFlags>`).

**Note:** It will not work properly if the node contains a script with constructor arguments (i.e. needs to supply arguments to :ref:`Object._init<class_Object_method__init>` method). In that case, the node will be duplicated without a script.

----

.. _class_Node_method_find_node:

- :ref:`Node<class_Node>` **find_node** **(** :ref:`String<class_String>` mask, :ref:`bool<class_bool>` recursive=true, :ref:`bool<class_bool>` owned=true **)** |const|

Finds a descendant of this node whose name matches ``mask`` as in :ref:`String.match<class_String_method_match>` (i.e. case-sensitive, but ``"*"`` matches zero or more characters and ``"?"`` matches any single character except ``"."``).

**Note:** It does not match against the full path, just against individual node names.

If ``owned`` is ``true``, this method only finds nodes whose owner is this node. This is especially important for scenes instantiated through a script, because those scenes don't have an owner.

**Note:** As this method walks through all the descendants of the node, it is the slowest way to get a reference to another node. Whenever possible, consider using :ref:`get_node<class_Node_method_get_node>` instead. To avoid using :ref:`find_node<class_Node_method_find_node>` too often, consider caching the node reference into a variable.

----

.. _class_Node_method_find_parent:

- :ref:`Node<class_Node>` **find_parent** **(** :ref:`String<class_String>` mask **)** |const|

Finds the first parent of the current node whose name matches ``mask`` as in :ref:`String.match<class_String_method_match>` (i.e. case-sensitive, but ``"*"`` matches zero or more characters and ``"?"`` matches any single character except ``"."``).

**Note:** It does not match against the full path, just against individual node names.

**Note:** As this method walks upwards in the scene tree, it can be slow in large, deeply nested scene trees. Whenever possible, consider using :ref:`get_node<class_Node_method_get_node>` instead. To avoid using :ref:`find_parent<class_Node_method_find_parent>` too often, consider caching the node reference into a variable.

----

.. _class_Node_method_get_child:

- :ref:`Node<class_Node>` **get_child** **(** :ref:`int<class_int>` idx, :ref:`bool<class_bool>` include_internal=false **)** |const|

Returns a child node by its index (see :ref:`get_child_count<class_Node_method_get_child_count>`). This method is often used for iterating all children of a node.

Negative indices access the children from the last one.

If ``include_internal`` is ``true``, internal children are skipped (see ``internal`` parameter in :ref:`add_child<class_Node_method_add_child>`).

To access a child node via its name, use :ref:`get_node<class_Node_method_get_node>`.

----

.. _class_Node_method_get_child_count:

- :ref:`int<class_int>` **get_child_count** **(** :ref:`bool<class_bool>` include_internal=false **)** |const|

Returns the number of child nodes.

If ``include_internal`` is ``false``, internal children aren't counted (see ``internal`` parameter in :ref:`add_child<class_Node_method_add_child>`).

----

.. _class_Node_method_get_children:

- :ref:`Node[]<class_Node>` **get_children** **(** :ref:`bool<class_bool>` include_internal=false **)** |const|

Returns an array of references to node's children.

If ``include_internal`` is ``false``, the returned array won't include internal children (see ``internal`` parameter in :ref:`add_child<class_Node_method_add_child>`).

----

.. _class_Node_method_get_editor_description:

- :ref:`String<class_String>` **get_editor_description** **(** **)** |const|

----

.. _class_Node_method_get_groups:

- :ref:`Array<class_Array>` **get_groups** **(** **)** |const|

Returns an array listing the groups that the node is a member of.

**Note:** For performance reasons, the order of node groups is *not* guaranteed. The order of node groups should not be relied upon as it can vary across project runs.

----

.. _class_Node_method_get_index:

- :ref:`int<class_int>` **get_index** **(** :ref:`bool<class_bool>` include_internal=false **)** |const|

Returns the node's order in the scene tree branch. For example, if called on the first child node the position is ``0``.

If ``include_internal`` is ``false``, the index won't take internal children into account, i.e. first non-internal child will have index of 0 (see ``internal`` parameter in :ref:`add_child<class_Node_method_add_child>`).

----

.. _class_Node_method_get_multiplayer_authority:

- :ref:`int<class_int>` **get_multiplayer_authority** **(** **)** |const|

Returns the peer ID of the multiplayer authority for this node. See :ref:`set_multiplayer_authority<class_Node_method_set_multiplayer_authority>`.

----

.. _class_Node_method_get_node:

- :ref:`Node<class_Node>` **get_node** **(** :ref:`NodePath<class_NodePath>` path **)** |const|

Fetches a node. The :ref:`NodePath<class_NodePath>` can be either a relative path (from the current node) or an absolute path (in the scene tree) to a node. If the path does not exist, a ``null instance`` is returned and an error is logged. Attempts to access methods on the return value will result in an "Attempt to call <method> on a null instance." error.

**Note:** Fetching absolute paths only works when the node is inside the scene tree (see :ref:`is_inside_tree<class_Node_method_is_inside_tree>`).

**Example:** Assume your current node is Character and the following tree:

::

    /root
    /root/Character
    /root/Character/Sword
    /root/Character/Backpack/Dagger
    /root/MyGame
    /root/Swamp/Alligator
    /root/Swamp/Mosquito
    /root/Swamp/Goblin

Possible paths are:


.. tabs::

 .. code-tab:: gdscript

    get_node("Sword")
    get_node("Backpack/Dagger")
    get_node("../Swamp/Alligator")
    get_node("/root/MyGame")

 .. code-tab:: csharp

    GetNode("Sword");
    GetNode("Backpack/Dagger");
    GetNode("../Swamp/Alligator");
    GetNode("/root/MyGame");



----

.. _class_Node_method_get_node_and_resource:

- :ref:`Array<class_Array>` **get_node_and_resource** **(** :ref:`NodePath<class_NodePath>` path **)**

Fetches a node and one of its resources as specified by the :ref:`NodePath<class_NodePath>`'s subname (e.g. ``Area2D/CollisionShape2D:shape``). If several nested resources are specified in the :ref:`NodePath<class_NodePath>`, the last one will be fetched.

The return value is an array of size 3: the first index points to the ``Node`` (or ``null`` if not found), the second index points to the :ref:`Resource<class_Resource>` (or ``null`` if not found), and the third index is the remaining :ref:`NodePath<class_NodePath>`, if any.

For example, assuming that ``Area2D/CollisionShape2D`` is a valid node and that its ``shape`` property has been assigned a :ref:`RectangleShape2D<class_RectangleShape2D>` resource, one could have this kind of output:


.. tabs::

 .. code-tab:: gdscript

    print(get_node_and_resource("Area2D/CollisionShape2D")) # [[CollisionShape2D:1161], Null, ]
    print(get_node_and_resource("Area2D/CollisionShape2D:shape")) # [[CollisionShape2D:1161], [RectangleShape2D:1156], ]
    print(get_node_and_resource("Area2D/CollisionShape2D:shape:extents")) # [[CollisionShape2D:1161], [RectangleShape2D:1156], :extents]

 .. code-tab:: csharp

    GD.Print(GetNodeAndResource("Area2D/CollisionShape2D")); // [[CollisionShape2D:1161], Null, ]
    GD.Print(GetNodeAndResource("Area2D/CollisionShape2D:shape")); // [[CollisionShape2D:1161], [RectangleShape2D:1156], ]
    GD.Print(GetNodeAndResource("Area2D/CollisionShape2D:shape:extents")); // [[CollisionShape2D:1161], [RectangleShape2D:1156], :extents]



----

.. _class_Node_method_get_node_or_null:

- :ref:`Node<class_Node>` **get_node_or_null** **(** :ref:`NodePath<class_NodePath>` path **)** |const|

Similar to :ref:`get_node<class_Node_method_get_node>`, but does not log an error if ``path`` does not point to a valid ``Node``.

----

.. _class_Node_method_get_parent:

- :ref:`Node<class_Node>` **get_parent** **(** **)** |const|

Returns the parent node of the current node, or a ``null instance`` if the node lacks a parent.

----

.. _class_Node_method_get_path:

- :ref:`NodePath<class_NodePath>` **get_path** **(** **)** |const|

Returns the absolute path of the current node. This only works if the current node is inside the scene tree (see :ref:`is_inside_tree<class_Node_method_is_inside_tree>`).

----

.. _class_Node_method_get_path_to:

- :ref:`NodePath<class_NodePath>` **get_path_to** **(** :ref:`Node<class_Node>` node **)** |const|

Returns the relative :ref:`NodePath<class_NodePath>` from this node to the specified ``node``. Both nodes must be in the same scene or the function will fail.

----

.. _class_Node_method_get_physics_process_delta_time:

- :ref:`float<class_float>` **get_physics_process_delta_time** **(** **)** |const|

Returns the time elapsed (in seconds) since the last physics-bound frame (see :ref:`_physics_process<class_Node_method__physics_process>`). This is always a constant value in physics processing unless the frames per second is changed via :ref:`Engine.physics_ticks_per_second<class_Engine_property_physics_ticks_per_second>`.

----

.. _class_Node_method_get_process_delta_time:

- :ref:`float<class_float>` **get_process_delta_time** **(** **)** |const|

Returns the time elapsed (in seconds) since the last process callback. This value may vary from frame to frame.

----

.. _class_Node_method_get_scene_instance_load_placeholder:

- :ref:`bool<class_bool>` **get_scene_instance_load_placeholder** **(** **)** |const|

Returns ``true`` if this is an instance load placeholder. See :ref:`InstancePlaceholder<class_InstancePlaceholder>`.

----

.. _class_Node_method_get_tree:

- :ref:`SceneTree<class_SceneTree>` **get_tree** **(** **)** |const|

Returns the :ref:`SceneTree<class_SceneTree>` that contains this node.

----

.. _class_Node_method_get_viewport:

- :ref:`Viewport<class_Viewport>` **get_viewport** **(** **)** |const|

Returns the node's :ref:`Viewport<class_Viewport>`.

----

.. _class_Node_method_has_node:

- :ref:`bool<class_bool>` **has_node** **(** :ref:`NodePath<class_NodePath>` path **)** |const|

Returns ``true`` if the node that the :ref:`NodePath<class_NodePath>` points to exists.

----

.. _class_Node_method_has_node_and_resource:

- :ref:`bool<class_bool>` **has_node_and_resource** **(** :ref:`NodePath<class_NodePath>` path **)** |const|

Returns ``true`` if the :ref:`NodePath<class_NodePath>` points to a valid node and its subname points to a valid resource, e.g. ``Area2D/CollisionShape2D:shape``. Properties with a non-:ref:`Resource<class_Resource>` type (e.g. nodes or primitive math types) are not considered resources.

----

.. _class_Node_method_is_ancestor_of:

- :ref:`bool<class_bool>` **is_ancestor_of** **(** :ref:`Node<class_Node>` node **)** |const|

Returns ``true`` if the given node is a direct or indirect child of the current node.

----

.. _class_Node_method_is_displayed_folded:

- :ref:`bool<class_bool>` **is_displayed_folded** **(** **)** |const|

Returns ``true`` if the node is folded (collapsed) in the Scene dock. This method is only intended for use with editor tooling.

----

.. _class_Node_method_is_editable_instance:

- :ref:`bool<class_bool>` **is_editable_instance** **(** :ref:`Node<class_Node>` node **)** |const|

Returns ``true`` if ``node`` has editable children enabled relative to this node. This method is only intended for use with editor tooling.

----

.. _class_Node_method_is_greater_than:

- :ref:`bool<class_bool>` **is_greater_than** **(** :ref:`Node<class_Node>` node **)** |const|

Returns ``true`` if the given node occurs later in the scene hierarchy than the current node.

----

.. _class_Node_method_is_in_group:

- :ref:`bool<class_bool>` **is_in_group** **(** :ref:`StringName<class_StringName>` group **)** |const|

Returns ``true`` if this node is in the specified group. See notes in the description, and the group methods in :ref:`SceneTree<class_SceneTree>`.

----

.. _class_Node_method_is_inside_tree:

- :ref:`bool<class_bool>` **is_inside_tree** **(** **)** |const|

Returns ``true`` if this node is currently inside a :ref:`SceneTree<class_SceneTree>`.

----

.. _class_Node_method_is_multiplayer_authority:

- :ref:`bool<class_bool>` **is_multiplayer_authority** **(** **)** |const|

Returns ``true`` if the local system is the multiplayer authority of this node.

----

.. _class_Node_method_is_physics_processing:

- :ref:`bool<class_bool>` **is_physics_processing** **(** **)** |const|

Returns ``true`` if physics processing is enabled (see :ref:`set_physics_process<class_Node_method_set_physics_process>`).

----

.. _class_Node_method_is_physics_processing_internal:

- :ref:`bool<class_bool>` **is_physics_processing_internal** **(** **)** |const|

Returns ``true`` if internal physics processing is enabled (see :ref:`set_physics_process_internal<class_Node_method_set_physics_process_internal>`).

----

.. _class_Node_method_is_processing:

- :ref:`bool<class_bool>` **is_processing** **(** **)** |const|

Returns ``true`` if processing is enabled (see :ref:`set_process<class_Node_method_set_process>`).

----

.. _class_Node_method_is_processing_input:

- :ref:`bool<class_bool>` **is_processing_input** **(** **)** |const|

Returns ``true`` if the node is processing input (see :ref:`set_process_input<class_Node_method_set_process_input>`).

----

.. _class_Node_method_is_processing_internal:

- :ref:`bool<class_bool>` **is_processing_internal** **(** **)** |const|

Returns ``true`` if internal processing is enabled (see :ref:`set_process_internal<class_Node_method_set_process_internal>`).

----

.. _class_Node_method_is_processing_unhandled_input:

- :ref:`bool<class_bool>` **is_processing_unhandled_input** **(** **)** |const|

Returns ``true`` if the node is processing unhandled input (see :ref:`set_process_unhandled_input<class_Node_method_set_process_unhandled_input>`).

----

.. _class_Node_method_is_processing_unhandled_key_input:

- :ref:`bool<class_bool>` **is_processing_unhandled_key_input** **(** **)** |const|

Returns ``true`` if the node is processing unhandled key input (see :ref:`set_process_unhandled_key_input<class_Node_method_set_process_unhandled_key_input>`).

----

.. _class_Node_method_move_child:

- void **move_child** **(** :ref:`Node<class_Node>` child_node, :ref:`int<class_int>` to_position **)**

Moves a child node to a different position (order) among the other children. Since calls, signals, etc are performed by tree order, changing the order of children nodes may be useful.

**Note:** Internal children can only be moved within their expected "internal range" (see ``internal`` parameter in :ref:`add_child<class_Node_method_add_child>`).

----

.. _class_Node_method_print_stray_nodes:

- void **print_stray_nodes** **(** **)**

Prints all stray nodes (nodes outside the :ref:`SceneTree<class_SceneTree>`). Used for debugging. Works only in debug builds.

----

.. _class_Node_method_print_tree:

- void **print_tree** **(** **)**

Prints the tree to stdout. Used mainly for debugging purposes. This version displays the path relative to the current node, and is good for copy/pasting into the :ref:`get_node<class_Node_method_get_node>` function.

**Example output:**

::

    TheGame
    TheGame/Menu
    TheGame/Menu/Label
    TheGame/Menu/Camera2D
    TheGame/SplashScreen
    TheGame/SplashScreen/Camera2D

----

.. _class_Node_method_print_tree_pretty:

- void **print_tree_pretty** **(** **)**

Similar to :ref:`print_tree<class_Node_method_print_tree>`, this prints the tree to stdout. This version displays a more graphical representation similar to what is displayed in the scene inspector. It is useful for inspecting larger trees.

**Example output:**

::

     ┖╴TheGame
        ┠╴Menu
        ┃  ┠╴Label
        ┃  ┖╴Camera2D
        ┖╴SplashScreen
           ┖╴Camera2D

----

.. _class_Node_method_propagate_call:

- void **propagate_call** **(** :ref:`StringName<class_StringName>` method, :ref:`Array<class_Array>` args=[], :ref:`bool<class_bool>` parent_first=false **)**

Calls the given method (if present) with the arguments given in ``args`` on this node and recursively on all its children. If the ``parent_first`` argument is ``true``, the method will be called on the current node first, then on all its children. If ``parent_first`` is ``false``, the children will be called first.

----

.. _class_Node_method_propagate_notification:

- void **propagate_notification** **(** :ref:`int<class_int>` what **)**

Notifies the current node and all its children recursively by calling :ref:`Object.notification<class_Object_method_notification>` on all of them.

----

.. _class_Node_method_queue_free:

- void **queue_free** **(** **)**

Queues a node for deletion at the end of the current frame. When deleted, all of its child nodes will be deleted as well. This method ensures it's safe to delete the node, contrary to :ref:`Object.free<class_Object_method_free>`. Use :ref:`Object.is_queued_for_deletion<class_Object_method_is_queued_for_deletion>` to check whether a node will be deleted at the end of the frame.

----

.. _class_Node_method_raise:

- void **raise** **(** **)**

Moves this node to the bottom of parent node's children hierarchy. This is often useful in GUIs (:ref:`Control<class_Control>` nodes), because their order of drawing depends on their order in the tree. The top Node is drawn first, then any siblings below the top Node in the hierarchy are successively drawn on top of it. After using ``raise``, a Control will be drawn on top of its siblings.

----

.. _class_Node_method_remove_and_skip:

- void **remove_and_skip** **(** **)**

Removes a node and sets all its children as children of the parent node (if it exists). All event subscriptions that pass by the removed node will be unsubscribed.

----

.. _class_Node_method_remove_child:

- void **remove_child** **(** :ref:`Node<class_Node>` node **)**

Removes a child node. The node is NOT deleted and must be deleted manually.

----

.. _class_Node_method_remove_from_group:

- void **remove_from_group** **(** :ref:`StringName<class_StringName>` group **)**

Removes a node from a group. See notes in the description, and the group methods in :ref:`SceneTree<class_SceneTree>`.

----

.. _class_Node_method_replace_by:

- void **replace_by** **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` keep_groups=false **)**

Replaces a node in a scene by the given one. Subscriptions that pass through this node will be lost.

If ``keep_groups`` is ``true``, the ``node`` is added to the same groups that the replaced node is in.

----

.. _class_Node_method_request_ready:

- void **request_ready** **(** **)**

Requests that ``_ready`` be called again. Note that the method won't be called immediately, but is scheduled for when the node is added to the scene tree again (see :ref:`_ready<class_Node_method__ready>`). ``_ready`` is called only for the node which requested it, which means that you need to request ready for each child if you want them to call ``_ready`` too (in which case, ``_ready`` will be called in the same order as it would normally).

----

.. _class_Node_method_rpc:

- :ref:`Variant<class_Variant>` **rpc** **(** :ref:`StringName<class_StringName>` method, ... **)** |vararg|

Sends a remote procedure call request for the given ``method`` to peers on the network (and locally), optionally sending all additional arguments as arguments to the method called by the RPC. The call request will only be received by nodes with the same :ref:`NodePath<class_NodePath>`, including the exact same node name. Behaviour depends on the RPC configuration for the given method, see :ref:`rpc_config<class_Node_method_rpc_config>`. Methods are not exposed to RPCs by default. Returns an empty :ref:`Variant<class_Variant>`.

**Note:** You can only safely use RPCs on clients after you received the ``connected_to_server`` signal from the :ref:`MultiplayerAPI<class_MultiplayerAPI>`. You also need to keep track of the connection state, either by the :ref:`MultiplayerAPI<class_MultiplayerAPI>` signals like ``server_disconnected`` or by checking ``get_multiplayer().peer.get_connection_status() == CONNECTION_CONNECTED``.

----

.. _class_Node_method_rpc_config:

- :ref:`int<class_int>` **rpc_config** **(** :ref:`StringName<class_StringName>` method, :ref:`RPCMode<enum_@GlobalScope_RPCMode>` rpc_mode, :ref:`TransferMode<enum_@GlobalScope_TransferMode>` transfer_mode=2, :ref:`int<class_int>` channel=0 **)**

Changes the RPC mode for the given ``method`` to the given ``rpc_mode``, optionally specifying the ``transfer_mode`` and ``channel`` (on supported peers). See :ref:`RPCMode<enum_@GlobalScope_RPCMode>` and :ref:`TransferMode<enum_@GlobalScope_TransferMode>`. An alternative is annotating methods and properties with the corresponding annotation (``@rpc(any)``, ``@rpc(auth)``). By default, methods are not exposed to networking (and RPCs).

----

.. _class_Node_method_rpc_id:

- :ref:`Variant<class_Variant>` **rpc_id** **(** :ref:`int<class_int>` peer_id, :ref:`StringName<class_StringName>` method, ... **)** |vararg|

Sends a :ref:`rpc<class_Node_method_rpc>` to a specific peer identified by ``peer_id`` (see :ref:`MultiplayerPeer.set_target_peer<class_MultiplayerPeer_method_set_target_peer>`). Returns an empty :ref:`Variant<class_Variant>`.

----

.. _class_Node_method_set_display_folded:

- void **set_display_folded** **(** :ref:`bool<class_bool>` fold **)**

Sets the folded state of the node in the Scene dock. This method is only intended for use with editor tooling.

----

.. _class_Node_method_set_editable_instance:

- void **set_editable_instance** **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` is_editable **)**

Sets the editable children state of ``node`` relative to this node. This method is only intended for use with editor tooling.

----

.. _class_Node_method_set_editor_description:

- void **set_editor_description** **(** :ref:`String<class_String>` editor_description **)**

----

.. _class_Node_method_set_multiplayer_authority:

- void **set_multiplayer_authority** **(** :ref:`int<class_int>` id, :ref:`bool<class_bool>` recursive=true **)**

Sets the node's multiplayer authority to the peer with the given peer ID. The multiplayer authority is the peer that has authority over the node on the network. Useful in conjunction with :ref:`rpc_config<class_Node_method_rpc_config>` and the :ref:`MultiplayerAPI<class_MultiplayerAPI>`. Inherited from the parent node by default, which ultimately defaults to peer ID 1 (the server). If ``recursive``, the given peer is recursively set as the authority for all children of this node.

----

.. _class_Node_method_set_physics_process:

- void **set_physics_process** **(** :ref:`bool<class_bool>` enable **)**

Enables or disables physics (i.e. fixed framerate) processing. When a node is being processed, it will receive a :ref:`NOTIFICATION_PHYSICS_PROCESS<class_Node_constant_NOTIFICATION_PHYSICS_PROCESS>` at a fixed (usually 60 FPS, see :ref:`Engine.physics_ticks_per_second<class_Engine_property_physics_ticks_per_second>` to change) interval (and the :ref:`_physics_process<class_Node_method__physics_process>` callback will be called if exists). Enabled automatically if :ref:`_physics_process<class_Node_method__physics_process>` is overridden. Any calls to this before :ref:`_ready<class_Node_method__ready>` will be ignored.

----

.. _class_Node_method_set_physics_process_internal:

- void **set_physics_process_internal** **(** :ref:`bool<class_bool>` enable **)**

Enables or disables internal physics for this node. Internal physics processing happens in isolation from the normal :ref:`_physics_process<class_Node_method__physics_process>` calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or physics processing is disabled for scripting (:ref:`set_physics_process<class_Node_method_set_physics_process>`). Only useful for advanced uses to manipulate built-in nodes' behavior.

**Warning:** Built-in Nodes rely on the internal processing for their own logic, so changing this value from your code may lead to unexpected behavior. Script access to this internal logic is provided for specific advanced uses, but is unsafe and not supported.

----

.. _class_Node_method_set_process:

- void **set_process** **(** :ref:`bool<class_bool>` enable **)**

Enables or disables processing. When a node is being processed, it will receive a :ref:`NOTIFICATION_PROCESS<class_Node_constant_NOTIFICATION_PROCESS>` on every drawn frame (and the :ref:`_process<class_Node_method__process>` callback will be called if exists). Enabled automatically if :ref:`_process<class_Node_method__process>` is overridden. Any calls to this before :ref:`_ready<class_Node_method__ready>` will be ignored.

----

.. _class_Node_method_set_process_input:

- void **set_process_input** **(** :ref:`bool<class_bool>` enable **)**

Enables or disables input processing. This is not required for GUI controls! Enabled automatically if :ref:`_input<class_Node_method__input>` is overridden. Any calls to this before :ref:`_ready<class_Node_method__ready>` will be ignored.

----

.. _class_Node_method_set_process_internal:

- void **set_process_internal** **(** :ref:`bool<class_bool>` enable **)**

Enables or disabled internal processing for this node. Internal processing happens in isolation from the normal :ref:`_process<class_Node_method__process>` calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or processing is disabled for scripting (:ref:`set_process<class_Node_method_set_process>`). Only useful for advanced uses to manipulate built-in nodes' behavior.

**Warning:** Built-in Nodes rely on the internal processing for their own logic, so changing this value from your code may lead to unexpected behavior. Script access to this internal logic is provided for specific advanced uses, but is unsafe and not supported.

----

.. _class_Node_method_set_process_unhandled_input:

- void **set_process_unhandled_input** **(** :ref:`bool<class_bool>` enable **)**

Enables unhandled input processing. This is not required for GUI controls! It enables the node to receive all input that was not previously handled (usually by a :ref:`Control<class_Control>`). Enabled automatically if :ref:`_unhandled_input<class_Node_method__unhandled_input>` is overridden. Any calls to this before :ref:`_ready<class_Node_method__ready>` will be ignored.

----

.. _class_Node_method_set_process_unhandled_key_input:

- void **set_process_unhandled_key_input** **(** :ref:`bool<class_bool>` enable **)**

Enables unhandled key input processing. Enabled automatically if :ref:`_unhandled_key_input<class_Node_method__unhandled_key_input>` is overridden. Any calls to this before :ref:`_ready<class_Node_method__ready>` will be ignored.

----

.. _class_Node_method_set_scene_instance_load_placeholder:

- void **set_scene_instance_load_placeholder** **(** :ref:`bool<class_bool>` load_placeholder **)**

Sets whether this is an instance load placeholder. See :ref:`InstancePlaceholder<class_InstancePlaceholder>`.

----

.. _class_Node_method_update_configuration_warnings:

- void **update_configuration_warnings** **(** **)**

Updates the warning displayed for this node in the Scene Dock.

Use :ref:`_get_configuration_warnings<class_Node_method__get_configuration_warnings>` to setup the warning message to display.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
