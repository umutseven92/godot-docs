:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the PackedByteArray.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_PackedByteArray:

PackedByteArray
===============

A packed :ref:`Array<class_Array>` of bytes.

Description
-----------

An :ref:`Array<class_Array>` specifically designed to hold bytes. Packs data tightly, so it saves memory for large array sizes.

Methods
-------

+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedByteArray<class_PackedByteArray>`       | :ref:`PackedByteArray<class_PackedByteArray_method_PackedByteArray>` **(** **)** |constructor|                                                                                             |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedByteArray<class_PackedByteArray>`       | :ref:`PackedByteArray<class_PackedByteArray_method_PackedByteArray>` **(** :ref:`PackedByteArray<class_PackedByteArray>` from **)** |constructor|                                          |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedByteArray<class_PackedByteArray>`       | :ref:`PackedByteArray<class_PackedByteArray_method_PackedByteArray>` **(** :ref:`Array<class_Array>` from **)** |constructor|                                                              |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`append<class_PackedByteArray_method_append>` **(** :ref:`int<class_int>` value **)**                                                                                                 |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`append_array<class_PackedByteArray_method_append_array>` **(** :ref:`PackedByteArray<class_PackedByteArray>` array **)**                                                             |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`bsearch<class_PackedByteArray_method_bsearch>` **(** :ref:`int<class_int>` value, :ref:`bool<class_bool>` before=true **)**                                                          |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedByteArray<class_PackedByteArray>`       | :ref:`compress<class_PackedByteArray_method_compress>` **(** :ref:`int<class_int>` compression_mode=0 **)** |const|                                                                        |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                           | :ref:`decode_double<class_PackedByteArray_method_decode_double>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                     |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                           | :ref:`decode_float<class_PackedByteArray_method_decode_float>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                       |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                           | :ref:`decode_half<class_PackedByteArray_method_decode_half>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                         |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`decode_s16<class_PackedByteArray_method_decode_s16>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                           |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`decode_s32<class_PackedByteArray_method_decode_s32>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                           |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`decode_s64<class_PackedByteArray_method_decode_s64>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                           |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`decode_s8<class_PackedByteArray_method_decode_s8>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                             |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`decode_u16<class_PackedByteArray_method_decode_u16>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                           |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`decode_u32<class_PackedByteArray_method_decode_u32>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                           |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`decode_u64<class_PackedByteArray_method_decode_u64>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                           |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`decode_u8<class_PackedByteArray_method_decode_u8>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                             |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`                       | :ref:`decode_var<class_PackedByteArray_method_decode_var>` **(** :ref:`int<class_int>` byte_offset, :ref:`bool<class_bool>` allow_objects=false **)** |const|                              |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`decode_var_size<class_PackedByteArray_method_decode_var_size>` **(** :ref:`int<class_int>` byte_offset, :ref:`bool<class_bool>` allow_objects=false **)** |const|                    |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedByteArray<class_PackedByteArray>`       | :ref:`decompress<class_PackedByteArray_method_decompress>` **(** :ref:`int<class_int>` buffer_size, :ref:`int<class_int>` compression_mode=0 **)** |const|                                 |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedByteArray<class_PackedByteArray>`       | :ref:`decompress_dynamic<class_PackedByteArray_method_decompress_dynamic>` **(** :ref:`int<class_int>` max_output_size, :ref:`int<class_int>` compression_mode=0 **)** |const|             |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedByteArray<class_PackedByteArray>`       | :ref:`duplicate<class_PackedByteArray_method_duplicate>` **(** **)**                                                                                                                       |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`encode_double<class_PackedByteArray_method_encode_double>` **(** :ref:`int<class_int>` byte_offset, :ref:`float<class_float>` value **)**                                            |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`encode_float<class_PackedByteArray_method_encode_float>` **(** :ref:`int<class_int>` byte_offset, :ref:`float<class_float>` value **)**                                              |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`encode_half<class_PackedByteArray_method_encode_half>` **(** :ref:`int<class_int>` byte_offset, :ref:`float<class_float>` value **)**                                                |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`encode_s16<class_PackedByteArray_method_encode_s16>` **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**                                                      |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`encode_s32<class_PackedByteArray_method_encode_s32>` **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**                                                      |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`encode_s64<class_PackedByteArray_method_encode_s64>` **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**                                                      |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`encode_s8<class_PackedByteArray_method_encode_s8>` **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**                                                        |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`encode_u16<class_PackedByteArray_method_encode_u16>` **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**                                                      |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`encode_u32<class_PackedByteArray_method_encode_u32>` **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**                                                      |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`encode_u64<class_PackedByteArray_method_encode_u64>` **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**                                                      |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`encode_u8<class_PackedByteArray_method_encode_u8>` **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**                                                        |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`encode_var<class_PackedByteArray_method_encode_var>` **(** :ref:`int<class_int>` byte_offset, :ref:`Variant<class_Variant>` value, :ref:`bool<class_bool>` allow_objects=false **)** |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`fill<class_PackedByteArray_method_fill>` **(** :ref:`int<class_int>` value **)**                                                                                                     |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                         | :ref:`get_string_from_ascii<class_PackedByteArray_method_get_string_from_ascii>` **(** **)** |const|                                                                                       |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                         | :ref:`get_string_from_utf16<class_PackedByteArray_method_get_string_from_utf16>` **(** **)** |const|                                                                                       |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                         | :ref:`get_string_from_utf32<class_PackedByteArray_method_get_string_from_utf32>` **(** **)** |const|                                                                                       |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                         | :ref:`get_string_from_utf8<class_PackedByteArray_method_get_string_from_utf8>` **(** **)** |const|                                                                                         |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`has<class_PackedByteArray_method_has>` **(** :ref:`int<class_int>` value **)** |const|                                                                                               |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`has_encoded_var<class_PackedByteArray_method_has_encoded_var>` **(** :ref:`int<class_int>` byte_offset, :ref:`bool<class_bool>` allow_objects=false **)** |const|                    |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                         | :ref:`hex_encode<class_PackedByteArray_method_hex_encode>` **(** **)** |const|                                                                                                             |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`insert<class_PackedByteArray_method_insert>` **(** :ref:`int<class_int>` at_index, :ref:`int<class_int>` value **)**                                                                 |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`is_empty<class_PackedByteArray_method_is_empty>` **(** **)** |const|                                                                                                                 |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | **operator !=** **(** **)** |operator|                                                                                                                                                     |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | **operator !=** **(** :ref:`PackedByteArray<class_PackedByteArray>` right **)** |operator|                                                                                                 |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedByteArray<class_PackedByteArray>`       | **operator +** **(** :ref:`PackedByteArray<class_PackedByteArray>` right **)** |operator|                                                                                                  |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | **operator ==** **(** **)** |operator|                                                                                                                                                     |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | **operator ==** **(** :ref:`PackedByteArray<class_PackedByteArray>` right **)** |operator|                                                                                                 |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | **operator []** **(** :ref:`int<class_int>` index **)** |operator|                                                                                                                         |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`push_back<class_PackedByteArray_method_push_back>` **(** :ref:`int<class_int>` value **)**                                                                                           |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove<class_PackedByteArray_method_remove>` **(** :ref:`int<class_int>` index **)**                                                                                                 |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`resize<class_PackedByteArray_method_resize>` **(** :ref:`int<class_int>` new_size **)**                                                                                              |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`reverse<class_PackedByteArray_method_reverse>` **(** **)**                                                                                                                           |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`set<class_PackedByteArray_method_set>` **(** :ref:`int<class_int>` index, :ref:`int<class_int>` value **)**                                                                          |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`size<class_PackedByteArray_method_size>` **(** **)** |const|                                                                                                                         |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`sort<class_PackedByteArray_method_sort>` **(** **)**                                                                                                                                 |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedByteArray<class_PackedByteArray>`       | :ref:`subarray<class_PackedByteArray_method_subarray>` **(** :ref:`int<class_int>` from, :ref:`int<class_int>` to **)** |const|                                                            |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedFloat32Array<class_PackedFloat32Array>` | :ref:`to_float32_array<class_PackedByteArray_method_to_float32_array>` **(** **)** |const|                                                                                                 |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedFloat64Array<class_PackedFloat64Array>` | :ref:`to_float64_array<class_PackedByteArray_method_to_float64_array>` **(** **)** |const|                                                                                                 |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedInt32Array<class_PackedInt32Array>`     | :ref:`to_int32_array<class_PackedByteArray_method_to_int32_array>` **(** **)** |const|                                                                                                     |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedInt64Array<class_PackedInt64Array>`     | :ref:`to_int64_array<class_PackedByteArray_method_to_int64_array>` **(** **)** |const|                                                                                                     |
+-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Method Descriptions
-------------------

.. _class_PackedByteArray_method_PackedByteArray:

- :ref:`PackedByteArray<class_PackedByteArray>` **PackedByteArray** **(** **)** |constructor|

Constructs an empty ``PackedByteArray``.

----

- :ref:`PackedByteArray<class_PackedByteArray>` **PackedByteArray** **(** :ref:`PackedByteArray<class_PackedByteArray>` from **)** |constructor|

Constructs a ``PackedByteArray`` as a copy of the given ``PackedByteArray``.

----

- :ref:`PackedByteArray<class_PackedByteArray>` **PackedByteArray** **(** :ref:`Array<class_Array>` from **)** |constructor|

Constructs a new ``PackedByteArray``. Optionally, you can pass in a generic :ref:`Array<class_Array>` that will be converted.

----

.. _class_PackedByteArray_method_append:

- :ref:`bool<class_bool>` **append** **(** :ref:`int<class_int>` value **)**

Appends an element at the end of the array (alias of :ref:`push_back<class_PackedByteArray_method_push_back>`).

----

.. _class_PackedByteArray_method_append_array:

- void **append_array** **(** :ref:`PackedByteArray<class_PackedByteArray>` array **)**

Appends a ``PackedByteArray`` at the end of this array.

----

.. _class_PackedByteArray_method_bsearch:

- :ref:`int<class_int>` **bsearch** **(** :ref:`int<class_int>` value, :ref:`bool<class_bool>` before=true **)**

Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a ``before`` specifier can be passed. If ``false``, the returned index comes after all existing entries of the value in the array.

**Note:** Calling :ref:`bsearch<class_PackedByteArray_method_bsearch>` on an unsorted array results in unexpected behavior.

----

.. _class_PackedByteArray_method_compress:

- :ref:`PackedByteArray<class_PackedByteArray>` **compress** **(** :ref:`int<class_int>` compression_mode=0 **)** |const|

Returns a new ``PackedByteArray`` with the data compressed. Set the compression mode using one of :ref:`CompressionMode<enum_File_CompressionMode>`'s constants.

----

.. _class_PackedByteArray_method_decode_double:

- :ref:`float<class_float>` **decode_double** **(** :ref:`int<class_int>` byte_offset **)** |const|

----

.. _class_PackedByteArray_method_decode_float:

- :ref:`float<class_float>` **decode_float** **(** :ref:`int<class_int>` byte_offset **)** |const|

----

.. _class_PackedByteArray_method_decode_half:

- :ref:`float<class_float>` **decode_half** **(** :ref:`int<class_int>` byte_offset **)** |const|

----

.. _class_PackedByteArray_method_decode_s16:

- :ref:`int<class_int>` **decode_s16** **(** :ref:`int<class_int>` byte_offset **)** |const|

----

.. _class_PackedByteArray_method_decode_s32:

- :ref:`int<class_int>` **decode_s32** **(** :ref:`int<class_int>` byte_offset **)** |const|

----

.. _class_PackedByteArray_method_decode_s64:

- :ref:`int<class_int>` **decode_s64** **(** :ref:`int<class_int>` byte_offset **)** |const|

----

.. _class_PackedByteArray_method_decode_s8:

- :ref:`int<class_int>` **decode_s8** **(** :ref:`int<class_int>` byte_offset **)** |const|

----

.. _class_PackedByteArray_method_decode_u16:

- :ref:`int<class_int>` **decode_u16** **(** :ref:`int<class_int>` byte_offset **)** |const|

----

.. _class_PackedByteArray_method_decode_u32:

- :ref:`int<class_int>` **decode_u32** **(** :ref:`int<class_int>` byte_offset **)** |const|

----

.. _class_PackedByteArray_method_decode_u64:

- :ref:`int<class_int>` **decode_u64** **(** :ref:`int<class_int>` byte_offset **)** |const|

----

.. _class_PackedByteArray_method_decode_u8:

- :ref:`int<class_int>` **decode_u8** **(** :ref:`int<class_int>` byte_offset **)** |const|

----

.. _class_PackedByteArray_method_decode_var:

- :ref:`Variant<class_Variant>` **decode_var** **(** :ref:`int<class_int>` byte_offset, :ref:`bool<class_bool>` allow_objects=false **)** |const|

----

.. _class_PackedByteArray_method_decode_var_size:

- :ref:`int<class_int>` **decode_var_size** **(** :ref:`int<class_int>` byte_offset, :ref:`bool<class_bool>` allow_objects=false **)** |const|

----

.. _class_PackedByteArray_method_decompress:

- :ref:`PackedByteArray<class_PackedByteArray>` **decompress** **(** :ref:`int<class_int>` buffer_size, :ref:`int<class_int>` compression_mode=0 **)** |const|

Returns a new ``PackedByteArray`` with the data decompressed. Set ``buffer_size`` to the size of the uncompressed data. Set the compression mode using one of :ref:`CompressionMode<enum_File_CompressionMode>`'s constants.

----

.. _class_PackedByteArray_method_decompress_dynamic:

- :ref:`PackedByteArray<class_PackedByteArray>` **decompress_dynamic** **(** :ref:`int<class_int>` max_output_size, :ref:`int<class_int>` compression_mode=0 **)** |const|

Returns a new ``PackedByteArray`` with the data decompressed. Set the compression mode using one of :ref:`CompressionMode<enum_File_CompressionMode>`'s constants. **This method only accepts gzip and deflate compression modes.**

This method is potentially slower than ``decompress``, as it may have to re-allocate its output buffer multiple times while decompressing, whereas ``decompress`` knows it's output buffer size from the beginning.

GZIP has a maximal compression ratio of 1032:1, meaning it's very possible for a small compressed payload to decompress to a potentially very large output. To guard against this, you may provide a maximum size this function is allowed to allocate in bytes via ``max_output_size``. Passing -1 will allow for unbounded output. If any positive value is passed, and the decompression exceeds that amount in bytes, then an error will be returned.

----

.. _class_PackedByteArray_method_duplicate:

- :ref:`PackedByteArray<class_PackedByteArray>` **duplicate** **(** **)**

Creates a copy of the array, and returns it.

----

.. _class_PackedByteArray_method_encode_double:

- void **encode_double** **(** :ref:`int<class_int>` byte_offset, :ref:`float<class_float>` value **)**

----

.. _class_PackedByteArray_method_encode_float:

- void **encode_float** **(** :ref:`int<class_int>` byte_offset, :ref:`float<class_float>` value **)**

----

.. _class_PackedByteArray_method_encode_half:

- void **encode_half** **(** :ref:`int<class_int>` byte_offset, :ref:`float<class_float>` value **)**

----

.. _class_PackedByteArray_method_encode_s16:

- void **encode_s16** **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**

----

.. _class_PackedByteArray_method_encode_s32:

- void **encode_s32** **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**

----

.. _class_PackedByteArray_method_encode_s64:

- void **encode_s64** **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**

----

.. _class_PackedByteArray_method_encode_s8:

- void **encode_s8** **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**

----

.. _class_PackedByteArray_method_encode_u16:

- void **encode_u16** **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**

----

.. _class_PackedByteArray_method_encode_u32:

- void **encode_u32** **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**

----

.. _class_PackedByteArray_method_encode_u64:

- void **encode_u64** **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**

----

.. _class_PackedByteArray_method_encode_u8:

- void **encode_u8** **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**

----

.. _class_PackedByteArray_method_encode_var:

- :ref:`int<class_int>` **encode_var** **(** :ref:`int<class_int>` byte_offset, :ref:`Variant<class_Variant>` value, :ref:`bool<class_bool>` allow_objects=false **)**

----

.. _class_PackedByteArray_method_fill:

- void **fill** **(** :ref:`int<class_int>` value **)**

Assigns the given value to all elements in the array. This can typically be used together with :ref:`resize<class_PackedByteArray_method_resize>` to create an array with a given size and initialized elements.

----

.. _class_PackedByteArray_method_get_string_from_ascii:

- :ref:`String<class_String>` **get_string_from_ascii** **(** **)** |const|

Converts ASCII/Latin-1 encoded array to :ref:`String<class_String>`. Fast alternative to :ref:`get_string_from_utf8<class_PackedByteArray_method_get_string_from_utf8>` if the content is ASCII/Latin-1 only. Unlike the UTF-8 function this function maps every byte to a character in the array. Multibyte sequences will not be interpreted correctly. For parsing user input always use :ref:`get_string_from_utf8<class_PackedByteArray_method_get_string_from_utf8>`.

----

.. _class_PackedByteArray_method_get_string_from_utf16:

- :ref:`String<class_String>` **get_string_from_utf16** **(** **)** |const|

Converts UTF-16 encoded array to :ref:`String<class_String>`. If the BOM is missing, system endianness is assumed. Returns empty string if source array is not valid UTF-16 string.

----

.. _class_PackedByteArray_method_get_string_from_utf32:

- :ref:`String<class_String>` **get_string_from_utf32** **(** **)** |const|

Converts UTF-32 encoded array to :ref:`String<class_String>`. System endianness is assumed. Returns empty string if source array is not valid UTF-32 string.

----

.. _class_PackedByteArray_method_get_string_from_utf8:

- :ref:`String<class_String>` **get_string_from_utf8** **(** **)** |const|

Converts UTF-8 encoded array to :ref:`String<class_String>`. Slower than :ref:`get_string_from_ascii<class_PackedByteArray_method_get_string_from_ascii>` but supports UTF-8 encoded data. Use this function if you are unsure about the source of the data. For user input this function should always be preferred. Returns empty string if source array is not valid UTF-8 string.

----

.. _class_PackedByteArray_method_has:

- :ref:`bool<class_bool>` **has** **(** :ref:`int<class_int>` value **)** |const|

Returns ``true`` if the array contains ``value``.

----

.. _class_PackedByteArray_method_has_encoded_var:

- :ref:`bool<class_bool>` **has_encoded_var** **(** :ref:`int<class_int>` byte_offset, :ref:`bool<class_bool>` allow_objects=false **)** |const|

----

.. _class_PackedByteArray_method_hex_encode:

- :ref:`String<class_String>` **hex_encode** **(** **)** |const|

Returns a hexadecimal representation of this array as a :ref:`String<class_String>`.


.. tabs::

 .. code-tab:: gdscript

    var array = PackedByteArray([11, 46, 255])
    print(array.hex_encode()) # Prints: 0b2eff

 .. code-tab:: csharp

    var array = new byte[] {11, 46, 255};
    GD.Print(array.HexEncode()); // Prints: 0b2eff



----

.. _class_PackedByteArray_method_insert:

- :ref:`int<class_int>` **insert** **(** :ref:`int<class_int>` at_index, :ref:`int<class_int>` value **)**

Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (``idx == size()``).

----

.. _class_PackedByteArray_method_is_empty:

- :ref:`bool<class_bool>` **is_empty** **(** **)** |const|

Returns ``true`` if the array is empty.

----

.. _class_PackedByteArray_method_operator !=:

- :ref:`bool<class_bool>` **operator !=** **(** **)** |operator|

----

- :ref:`bool<class_bool>` **operator !=** **(** :ref:`PackedByteArray<class_PackedByteArray>` right **)** |operator|

----

.. _class_PackedByteArray_method_operator +:

- :ref:`PackedByteArray<class_PackedByteArray>` **operator +** **(** :ref:`PackedByteArray<class_PackedByteArray>` right **)** |operator|

----

.. _class_PackedByteArray_method_operator ==:

- :ref:`bool<class_bool>` **operator ==** **(** **)** |operator|

----

- :ref:`bool<class_bool>` **operator ==** **(** :ref:`PackedByteArray<class_PackedByteArray>` right **)** |operator|

----

.. _class_PackedByteArray_method_operator []:

- :ref:`int<class_int>` **operator []** **(** :ref:`int<class_int>` index **)** |operator|

----

.. _class_PackedByteArray_method_push_back:

- :ref:`bool<class_bool>` **push_back** **(** :ref:`int<class_int>` value **)**

Appends an element at the end of the array.

----

.. _class_PackedByteArray_method_remove:

- void **remove** **(** :ref:`int<class_int>` index **)**

Removes an element from the array by index.

----

.. _class_PackedByteArray_method_resize:

- :ref:`int<class_int>` **resize** **(** :ref:`int<class_int>` new_size **)**

Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size.

----

.. _class_PackedByteArray_method_reverse:

- void **reverse** **(** **)**

Reverses the order of the elements in the array.

----

.. _class_PackedByteArray_method_set:

- void **set** **(** :ref:`int<class_int>` index, :ref:`int<class_int>` value **)**

Changes the byte at the given index.

----

.. _class_PackedByteArray_method_size:

- :ref:`int<class_int>` **size** **(** **)** |const|

Returns the size of the array.

----

.. _class_PackedByteArray_method_sort:

- void **sort** **(** **)**

Sorts the elements of the array in ascending order.

----

.. _class_PackedByteArray_method_subarray:

- :ref:`PackedByteArray<class_PackedByteArray>` **subarray** **(** :ref:`int<class_int>` from, :ref:`int<class_int>` to **)** |const|

Returns the slice of the ``PackedByteArray`` between indices (inclusive) as a new ``PackedByteArray``. Any negative index is considered to be from the end of the array.

----

.. _class_PackedByteArray_method_to_float32_array:

- :ref:`PackedFloat32Array<class_PackedFloat32Array>` **to_float32_array** **(** **)** |const|

Returns a copy of the data converted to a :ref:`PackedFloat32Array<class_PackedFloat32Array>`, where each block of 4 bytes has been converted to a 32-bit float (C++ ``float``).

The size of the new array will be ``byte_array.size() / 4``.

If the original data can't be converted to 32-bit floats, the resulting data is undefined.

----

.. _class_PackedByteArray_method_to_float64_array:

- :ref:`PackedFloat64Array<class_PackedFloat64Array>` **to_float64_array** **(** **)** |const|

Returns a copy of the data converted to a :ref:`PackedFloat64Array<class_PackedFloat64Array>`, where each block of 8 bytes has been converted to a 64-bit float (C++ ``double``, Godot :ref:`float<class_float>`).

The size of the new array will be ``byte_array.size() / 8``.

If the original data can't be converted to 64-bit floats, the resulting data is undefined.

----

.. _class_PackedByteArray_method_to_int32_array:

- :ref:`PackedInt32Array<class_PackedInt32Array>` **to_int32_array** **(** **)** |const|

Returns a copy of the data converted to a :ref:`PackedInt32Array<class_PackedInt32Array>`, where each block of 4 bytes has been converted to a signed 32-bit integer (C++ ``int32_t``).

The size of the new array will be ``byte_array.size() / 4``.

If the original data can't be converted to signed 32-bit integers, the resulting data is undefined.

----

.. _class_PackedByteArray_method_to_int64_array:

- :ref:`PackedInt64Array<class_PackedInt64Array>` **to_int64_array** **(** **)** |const|

Returns a copy of the data converted to a :ref:`PackedInt64Array<class_PackedInt64Array>`, where each block of 4 bytes has been converted to a signed 64-bit integer (C++ ``int64_t``, Godot :ref:`int<class_int>`).

The size of the new array will be ``byte_array.size() / 8``.

If the original data can't be converted to signed 64-bit integers, the resulting data is undefined.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
