:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the SceneTree.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_SceneTree:

SceneTree
=========

**Inherits:** :ref:`MainLoop<class_MainLoop>` **<** :ref:`Object<class_Object>`

Manages the game loop via a hierarchy of nodes.

Description
-----------

As one of the most important classes, the ``SceneTree`` manages the hierarchy of nodes in a scene as well as scenes themselves. Nodes can be added, retrieved and removed. The whole scene tree (and thus the current scene) can be paused. Scenes can be loaded, switched and reloaded.

You can also use the ``SceneTree`` to organize your nodes into groups: every node can be assigned as many groups as you want to create, e.g. an "enemy" group. You can then iterate these groups or even call methods and set properties on all the group's members at once.

``SceneTree`` is the default :ref:`MainLoop<class_MainLoop>` implementation used by scenes, and is thus in charge of the game loop.

Tutorials
---------

- :doc:`../getting_started/step_by_step/scene_tree`

- :doc:`../tutorials/viewports/multiple_resolutions`

Properties
----------

+---------------------------------------------+------------------------------------------------------------------------------+-----------+
| :ref:`Node<class_Node>`                     | :ref:`current_scene<class_SceneTree_property_current_scene>`                 |           |
+---------------------------------------------+------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                     | :ref:`debug_collisions_hint<class_SceneTree_property_debug_collisions_hint>` | ``false`` |
+---------------------------------------------+------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                     | :ref:`debug_navigation_hint<class_SceneTree_property_debug_navigation_hint>` | ``false`` |
+---------------------------------------------+------------------------------------------------------------------------------+-----------+
| :ref:`Node<class_Node>`                     | :ref:`edited_scene_root<class_SceneTree_property_edited_scene_root>`         |           |
+---------------------------------------------+------------------------------------------------------------------------------+-----------+
| :ref:`MultiplayerAPI<class_MultiplayerAPI>` | :ref:`multiplayer<class_SceneTree_property_multiplayer>`                     |           |
+---------------------------------------------+------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                     | :ref:`multiplayer_poll<class_SceneTree_property_multiplayer_poll>`           | ``true``  |
+---------------------------------------------+------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                     | :ref:`paused<class_SceneTree_property_paused>`                               | ``false`` |
+---------------------------------------------+------------------------------------------------------------------------------+-----------+
| :ref:`Window<class_Window>`                 | :ref:`root<class_SceneTree_property_root>`                                   |           |
+---------------------------------------------+------------------------------------------------------------------------------+-----------+

Methods
-------

+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`               | :ref:`call_group<class_SceneTree_method_call_group>` **(** :ref:`StringName<class_StringName>` group, :ref:`StringName<class_StringName>` method, ... **)** |vararg|                                                              |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`               | :ref:`call_group_flags<class_SceneTree_method_call_group_flags>` **(** :ref:`int<class_int>` flags, :ref:`StringName<class_StringName>` group, :ref:`StringName<class_StringName>` method, ... **)** |vararg|                     |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`       | :ref:`change_scene<class_SceneTree_method_change_scene>` **(** :ref:`String<class_String>` path **)**                                                                                                                             |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`       | :ref:`change_scene_to<class_SceneTree_method_change_scene_to>` **(** :ref:`PackedScene<class_PackedScene>` packed_scene **)**                                                                                                     |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`SceneTreeTimer<class_SceneTreeTimer>` | :ref:`create_timer<class_SceneTree_method_create_timer>` **(** :ref:`float<class_float>` time_sec, :ref:`bool<class_bool>` process_always=true **)**                                                                              |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Tween<class_Tween>`                   | :ref:`create_tween<class_SceneTree_method_create_tween>` **(** **)**                                                                                                                                                              |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`                     | :ref:`get_first_node_in_group<class_SceneTree_method_get_first_node_in_group>` **(** :ref:`StringName<class_StringName>` group **)**                                                                                              |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                       | :ref:`get_frame<class_SceneTree_method_get_frame>` **(** **)** |const|                                                                                                                                                            |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                       | :ref:`get_node_count<class_SceneTree_method_get_node_count>` **(** **)** |const|                                                                                                                                                  |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                   | :ref:`get_nodes_in_group<class_SceneTree_method_get_nodes_in_group>` **(** :ref:`StringName<class_StringName>` group **)**                                                                                                        |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                   | :ref:`get_processed_tweens<class_SceneTree_method_get_processed_tweens>` **(** **)**                                                                                                                                              |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                     | :ref:`has_group<class_SceneTree_method_has_group>` **(** :ref:`StringName<class_StringName>` name **)** |const|                                                                                                                   |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`notify_group<class_SceneTree_method_notify_group>` **(** :ref:`StringName<class_StringName>` group, :ref:`int<class_int>` notification **)**                                                                                |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`notify_group_flags<class_SceneTree_method_notify_group_flags>` **(** :ref:`int<class_int>` call_flags, :ref:`StringName<class_StringName>` group, :ref:`int<class_int>` notification **)**                                  |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`queue_delete<class_SceneTree_method_queue_delete>` **(** :ref:`Object<class_Object>` obj **)**                                                                                                                              |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`quit<class_SceneTree_method_quit>` **(** :ref:`int<class_int>` exit_code=0 **)**                                                                                                                                            |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`       | :ref:`reload_current_scene<class_SceneTree_method_reload_current_scene>` **(** **)**                                                                                                                                              |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`set_auto_accept_quit<class_SceneTree_method_set_auto_accept_quit>` **(** :ref:`bool<class_bool>` enabled **)**                                                                                                              |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`set_group<class_SceneTree_method_set_group>` **(** :ref:`StringName<class_StringName>` group, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**                                               |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`set_group_flags<class_SceneTree_method_set_group_flags>` **(** :ref:`int<class_int>` call_flags, :ref:`StringName<class_StringName>` group, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)** |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`set_quit_on_go_back<class_SceneTree_method_set_quit_on_go_back>` **(** :ref:`bool<class_bool>` enabled **)**                                                                                                                |
+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Signals
-------

.. _class_SceneTree_signal_files_dropped:

- **files_dropped** **(** :ref:`PackedStringArray<class_PackedStringArray>` files, :ref:`int<class_int>` screen **)**

Emitted when files are dragged from the OS file manager and dropped in the game window. The arguments are a list of file paths and the identifier of the screen where the drag originated.

----

.. _class_SceneTree_signal_node_added:

- **node_added** **(** :ref:`Node<class_Node>` node **)**

Emitted whenever a node is added to the ``SceneTree``.

----

.. _class_SceneTree_signal_node_configuration_warning_changed:

- **node_configuration_warning_changed** **(** :ref:`Node<class_Node>` node **)**

Emitted when a node's configuration changed. Only emitted in ``tool`` mode.

----

.. _class_SceneTree_signal_node_removed:

- **node_removed** **(** :ref:`Node<class_Node>` node **)**

Emitted whenever a node is removed from the ``SceneTree``.

----

.. _class_SceneTree_signal_node_renamed:

- **node_renamed** **(** :ref:`Node<class_Node>` node **)**

Emitted whenever a node is renamed.

----

.. _class_SceneTree_signal_physics_frame:

- **physics_frame** **(** **)**

Emitted immediately before :ref:`Node._physics_process<class_Node_method__physics_process>` is called on every node in the ``SceneTree``.

----

.. _class_SceneTree_signal_process_frame:

- **process_frame** **(** **)**

Emitted immediately before :ref:`Node._process<class_Node_method__process>` is called on every node in the ``SceneTree``.

----

.. _class_SceneTree_signal_tree_changed:

- **tree_changed** **(** **)**

Emitted whenever the ``SceneTree`` hierarchy changed (children being moved or renamed, etc.).

----

.. _class_SceneTree_signal_tree_process_mode_changed:

- **tree_process_mode_changed** **(** **)**

This signal is only emitted in the editor, it allows the editor to update the visibility of disabled nodes. Emitted whenever any node's :ref:`Node.process_mode<class_Node_property_process_mode>` is changed.

Enumerations
------------

.. _enum_SceneTree_GroupCallFlags:

.. _class_SceneTree_constant_GROUP_CALL_DEFAULT:

.. _class_SceneTree_constant_GROUP_CALL_REVERSE:

.. _class_SceneTree_constant_GROUP_CALL_REALTIME:

.. _class_SceneTree_constant_GROUP_CALL_UNIQUE:

enum **GroupCallFlags**:

- **GROUP_CALL_DEFAULT** = **0** --- Call a group with no flags (default).

- **GROUP_CALL_REVERSE** = **1** --- Call a group in reverse scene order.

- **GROUP_CALL_REALTIME** = **2** --- Call a group immediately (calls are normally made on idle).

- **GROUP_CALL_UNIQUE** = **4** --- Call a group only once even if the call is executed many times.

Property Descriptions
---------------------

.. _class_SceneTree_property_current_scene:

- :ref:`Node<class_Node>` **current_scene**

+----------+--------------------------+
| *Setter* | set_current_scene(value) |
+----------+--------------------------+
| *Getter* | get_current_scene()      |
+----------+--------------------------+

The current scene.

----

.. _class_SceneTree_property_debug_collisions_hint:

- :ref:`bool<class_bool>` **debug_collisions_hint**

+-----------+----------------------------------+
| *Default* | ``false``                        |
+-----------+----------------------------------+
| *Setter*  | set_debug_collisions_hint(value) |
+-----------+----------------------------------+
| *Getter*  | is_debugging_collisions_hint()   |
+-----------+----------------------------------+

If ``true``, collision shapes will be visible when running the game from the editor for debugging purposes.

----

.. _class_SceneTree_property_debug_navigation_hint:

- :ref:`bool<class_bool>` **debug_navigation_hint**

+-----------+----------------------------------+
| *Default* | ``false``                        |
+-----------+----------------------------------+
| *Setter*  | set_debug_navigation_hint(value) |
+-----------+----------------------------------+
| *Getter*  | is_debugging_navigation_hint()   |
+-----------+----------------------------------+

If ``true``, navigation polygons will be visible when running the game from the editor for debugging purposes.

----

.. _class_SceneTree_property_edited_scene_root:

- :ref:`Node<class_Node>` **edited_scene_root**

+----------+------------------------------+
| *Setter* | set_edited_scene_root(value) |
+----------+------------------------------+
| *Getter* | get_edited_scene_root()      |
+----------+------------------------------+

The root of the edited scene.

----

.. _class_SceneTree_property_multiplayer:

- :ref:`MultiplayerAPI<class_MultiplayerAPI>` **multiplayer**

+----------+------------------------+
| *Setter* | set_multiplayer(value) |
+----------+------------------------+
| *Getter* | get_multiplayer()      |
+----------+------------------------+

The default :ref:`MultiplayerAPI<class_MultiplayerAPI>` instance for this ``SceneTree``.

----

.. _class_SceneTree_property_multiplayer_poll:

- :ref:`bool<class_bool>` **multiplayer_poll**

+-----------+-------------------------------------+
| *Default* | ``true``                            |
+-----------+-------------------------------------+
| *Setter*  | set_multiplayer_poll_enabled(value) |
+-----------+-------------------------------------+
| *Getter*  | is_multiplayer_poll_enabled()       |
+-----------+-------------------------------------+

If ``true`` (default value), enables automatic polling of the :ref:`MultiplayerAPI<class_MultiplayerAPI>` for this SceneTree during :ref:`process_frame<class_SceneTree_signal_process_frame>`.

If ``false``, you need to manually call :ref:`MultiplayerAPI.poll<class_MultiplayerAPI_method_poll>` to process network packets and deliver RPCs. This allows running RPCs in a different loop (e.g. physics, thread, specific time step) and for manual :ref:`Mutex<class_Mutex>` protection when accessing the :ref:`MultiplayerAPI<class_MultiplayerAPI>` from threads.

----

.. _class_SceneTree_property_paused:

- :ref:`bool<class_bool>` **paused**

+-----------+------------------+
| *Default* | ``false``        |
+-----------+------------------+
| *Setter*  | set_pause(value) |
+-----------+------------------+
| *Getter*  | is_paused()      |
+-----------+------------------+

If ``true``, the ``SceneTree`` is paused. Doing so will have the following behavior:

- 2D and 3D physics will be stopped. This includes signals and collision detection.

- :ref:`Node._process<class_Node_method__process>`, :ref:`Node._physics_process<class_Node_method__physics_process>` and :ref:`Node._input<class_Node_method__input>` will not be called anymore in nodes.

----

.. _class_SceneTree_property_root:

- :ref:`Window<class_Window>` **root**

+----------+------------+
| *Getter* | get_root() |
+----------+------------+

The ``SceneTree``'s root :ref:`Window<class_Window>`.

Method Descriptions
-------------------

.. _class_SceneTree_method_call_group:

- :ref:`Variant<class_Variant>` **call_group** **(** :ref:`StringName<class_StringName>` group, :ref:`StringName<class_StringName>` method, ... **)** |vararg|

Calls ``method`` on each member of the given group. You can pass arguments to ``method`` by specifying them at the end of the method call. This method is equivalent of calling :ref:`call_group_flags<class_SceneTree_method_call_group_flags>` with :ref:`GROUP_CALL_DEFAULT<class_SceneTree_constant_GROUP_CALL_DEFAULT>` flag.

**Note:** :ref:`call_group<class_SceneTree_method_call_group>` will always call methods with an one-frame delay, in a way similar to :ref:`Object.call_deferred<class_Object_method_call_deferred>`. To call methods immediately, use :ref:`call_group_flags<class_SceneTree_method_call_group_flags>` with the :ref:`GROUP_CALL_REALTIME<class_SceneTree_constant_GROUP_CALL_REALTIME>` flag.

----

.. _class_SceneTree_method_call_group_flags:

- :ref:`Variant<class_Variant>` **call_group_flags** **(** :ref:`int<class_int>` flags, :ref:`StringName<class_StringName>` group, :ref:`StringName<class_StringName>` method, ... **)** |vararg|

Calls ``method`` on each member of the given group, respecting the given :ref:`GroupCallFlags<enum_SceneTree_GroupCallFlags>`. You can pass arguments to ``method`` by specifying them at the end of the method call.

::

    get_tree().call_group_flags(SceneTree.GROUP_CALL_REALTIME | SceneTree.GROUP_CALL_REVERSE, "bases", "destroy") # Call the method immediately and in reverse order.

----

.. _class_SceneTree_method_change_scene:

- :ref:`Error<enum_@GlobalScope_Error>` **change_scene** **(** :ref:`String<class_String>` path **)**

Changes the running scene to the one at the given ``path``, after loading it into a :ref:`PackedScene<class_PackedScene>` and creating a new instance.

Returns :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>` on success, :ref:`@GlobalScope.ERR_CANT_OPEN<class_@GlobalScope_constant_ERR_CANT_OPEN>` if the ``path`` cannot be loaded into a :ref:`PackedScene<class_PackedScene>`, or :ref:`@GlobalScope.ERR_CANT_CREATE<class_@GlobalScope_constant_ERR_CANT_CREATE>` if that scene cannot be instantiated.

**Note:** The scene change is deferred, which means that the new scene node is added on the next idle frame. You won't be able to access it immediately after the :ref:`change_scene<class_SceneTree_method_change_scene>` call.

----

.. _class_SceneTree_method_change_scene_to:

- :ref:`Error<enum_@GlobalScope_Error>` **change_scene_to** **(** :ref:`PackedScene<class_PackedScene>` packed_scene **)**

Changes the running scene to a new instance of the given :ref:`PackedScene<class_PackedScene>`.

Returns :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>` on success or :ref:`@GlobalScope.ERR_CANT_CREATE<class_@GlobalScope_constant_ERR_CANT_CREATE>` if the scene cannot be instantiated.

**Note:** The scene change is deferred, which means that the new scene node is added on the next idle frame. You won't be able to access it immediately after the :ref:`change_scene_to<class_SceneTree_method_change_scene_to>` call.

----

.. _class_SceneTree_method_create_timer:

- :ref:`SceneTreeTimer<class_SceneTreeTimer>` **create_timer** **(** :ref:`float<class_float>` time_sec, :ref:`bool<class_bool>` process_always=true **)**

Returns a :ref:`SceneTreeTimer<class_SceneTreeTimer>` which will :ref:`SceneTreeTimer.timeout<class_SceneTreeTimer_signal_timeout>` after the given time in seconds elapsed in this ``SceneTree``. If ``process_always`` is set to ``false``, pausing the ``SceneTree`` will also pause the timer.

Commonly used to create a one-shot delay timer as in the following example:


.. tabs::

 .. code-tab:: gdscript

    func some_function():
        print("start")
        yield(get_tree().create_timer(1.0), "timeout")
        print("end")

 .. code-tab:: csharp

    public async void SomeFunction()
    {
        GD.Print("start");
        await ToSignal(GetTree().CreateTimer(1.0f), "timeout");
        GD.Print("end");
    }



The timer will be automatically freed after its time elapses.

----

.. _class_SceneTree_method_create_tween:

- :ref:`Tween<class_Tween>` **create_tween** **(** **)**

Creates and returns a new :ref:`Tween<class_Tween>`.

----

.. _class_SceneTree_method_get_first_node_in_group:

- :ref:`Node<class_Node>` **get_first_node_in_group** **(** :ref:`StringName<class_StringName>` group **)**

----

.. _class_SceneTree_method_get_frame:

- :ref:`int<class_int>` **get_frame** **(** **)** |const|

Returns the current frame number, i.e. the total frame count since the application started.

----

.. _class_SceneTree_method_get_node_count:

- :ref:`int<class_int>` **get_node_count** **(** **)** |const|

Returns the number of nodes in this ``SceneTree``.

----

.. _class_SceneTree_method_get_nodes_in_group:

- :ref:`Array<class_Array>` **get_nodes_in_group** **(** :ref:`StringName<class_StringName>` group **)**

Returns a list of all nodes assigned to the given group.

----

.. _class_SceneTree_method_get_processed_tweens:

- :ref:`Array<class_Array>` **get_processed_tweens** **(** **)**

Returns an array of currently existing :ref:`Tween<class_Tween>`\ s in the ``SceneTree`` (both running and paused).

----

.. _class_SceneTree_method_has_group:

- :ref:`bool<class_bool>` **has_group** **(** :ref:`StringName<class_StringName>` name **)** |const|

Returns ``true`` if the given group exists.

----

.. _class_SceneTree_method_notify_group:

- void **notify_group** **(** :ref:`StringName<class_StringName>` group, :ref:`int<class_int>` notification **)**

Sends the given notification to all members of the ``group``.

----

.. _class_SceneTree_method_notify_group_flags:

- void **notify_group_flags** **(** :ref:`int<class_int>` call_flags, :ref:`StringName<class_StringName>` group, :ref:`int<class_int>` notification **)**

Sends the given notification to all members of the ``group``, respecting the given :ref:`GroupCallFlags<enum_SceneTree_GroupCallFlags>`.

----

.. _class_SceneTree_method_queue_delete:

- void **queue_delete** **(** :ref:`Object<class_Object>` obj **)**

Queues the given object for deletion, delaying the call to :ref:`Object.free<class_Object_method_free>` to after the current frame.

----

.. _class_SceneTree_method_quit:

- void **quit** **(** :ref:`int<class_int>` exit_code=0 **)**

Quits the application at the end of the current iteration. Argument ``exit_code`` can optionally be given (defaulting to 0) to customize the exit status code.

By convention, an exit code of ``0`` indicates success whereas a non-zero exit code indicates an error.

For portability reasons, the exit code should be set between 0 and 125 (inclusive).

**Note:** On iOS this method doesn't work. Instead, as recommended by the iOS Human Interface Guidelines, the user is expected to close apps via the Home button.

----

.. _class_SceneTree_method_reload_current_scene:

- :ref:`Error<enum_@GlobalScope_Error>` **reload_current_scene** **(** **)**

Reloads the currently active scene.

Returns :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>` on success, :ref:`@GlobalScope.ERR_UNCONFIGURED<class_@GlobalScope_constant_ERR_UNCONFIGURED>` if no :ref:`current_scene<class_SceneTree_property_current_scene>` was defined yet, :ref:`@GlobalScope.ERR_CANT_OPEN<class_@GlobalScope_constant_ERR_CANT_OPEN>` if :ref:`current_scene<class_SceneTree_property_current_scene>` cannot be loaded into a :ref:`PackedScene<class_PackedScene>`, or :ref:`@GlobalScope.ERR_CANT_CREATE<class_@GlobalScope_constant_ERR_CANT_CREATE>` if the scene cannot be instantiated.

----

.. _class_SceneTree_method_set_auto_accept_quit:

- void **set_auto_accept_quit** **(** :ref:`bool<class_bool>` enabled **)**

If ``true``, the application automatically accepts quitting. Enabled by default.

For mobile platforms, see :ref:`set_quit_on_go_back<class_SceneTree_method_set_quit_on_go_back>`.

----

.. _class_SceneTree_method_set_group:

- void **set_group** **(** :ref:`StringName<class_StringName>` group, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**

Sets the given ``property`` to ``value`` on all members of the given group.

----

.. _class_SceneTree_method_set_group_flags:

- void **set_group_flags** **(** :ref:`int<class_int>` call_flags, :ref:`StringName<class_StringName>` group, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**

Sets the given ``property`` to ``value`` on all members of the given group, respecting the given :ref:`GroupCallFlags<enum_SceneTree_GroupCallFlags>`.

----

.. _class_SceneTree_method_set_quit_on_go_back:

- void **set_quit_on_go_back** **(** :ref:`bool<class_bool>` enabled **)**

If ``true``, the application quits automatically on going back (e.g. on Android). Enabled by default.

To handle 'Go Back' button when this option is disabled, use :ref:`DisplayServer.WINDOW_EVENT_GO_BACK_REQUEST<class_DisplayServer_constant_WINDOW_EVENT_GO_BACK_REQUEST>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
