:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the InputEventWithModifiers.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_InputEventWithModifiers:

InputEventWithModifiers
=======================

**Inherits:** :ref:`InputEventFromWindow<class_InputEventFromWindow>` **<** :ref:`InputEvent<class_InputEvent>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`InputEventGesture<class_InputEventGesture>`, :ref:`InputEventKey<class_InputEventKey>`, :ref:`InputEventMouse<class_InputEventMouse>`

Base class for keys events with modifiers.

Description
-----------

Contains keys events information with modifiers support like :kbd:`Shift` or :kbd:`Alt`. See :ref:`Node._input<class_Node_method__input>`.

Tutorials
---------

- :doc:`../tutorials/inputs/inputevent`

Properties
----------

+-------------------------+--------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>` | :ref:`alt_pressed<class_InputEventWithModifiers_property_alt_pressed>`         | ``false`` |
+-------------------------+--------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>` | :ref:`command_pressed<class_InputEventWithModifiers_property_command_pressed>` | ``false`` |
+-------------------------+--------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>` | :ref:`ctrl_pressed<class_InputEventWithModifiers_property_ctrl_pressed>`       | ``false`` |
+-------------------------+--------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>` | :ref:`meta_pressed<class_InputEventWithModifiers_property_meta_pressed>`       | ``false`` |
+-------------------------+--------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>` | :ref:`shift_pressed<class_InputEventWithModifiers_property_shift_pressed>`     | ``false`` |
+-------------------------+--------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>` | :ref:`store_command<class_InputEventWithModifiers_property_store_command>`     | ``true``  |
+-------------------------+--------------------------------------------------------------------------------+-----------+

Property Descriptions
---------------------

.. _class_InputEventWithModifiers_property_alt_pressed:

- :ref:`bool<class_bool>` **alt_pressed**

+-----------+------------------------+
| *Default* | ``false``              |
+-----------+------------------------+
| *Setter*  | set_alt_pressed(value) |
+-----------+------------------------+
| *Getter*  | is_alt_pressed()       |
+-----------+------------------------+

State of the :kbd:`Alt` modifier.

----

.. _class_InputEventWithModifiers_property_command_pressed:

- :ref:`bool<class_bool>` **command_pressed**

+-----------+----------------------------+
| *Default* | ``false``                  |
+-----------+----------------------------+
| *Setter*  | set_command_pressed(value) |
+-----------+----------------------------+
| *Getter*  | is_command_pressed()       |
+-----------+----------------------------+

State of the :kbd:`Cmd` modifier.

----

.. _class_InputEventWithModifiers_property_ctrl_pressed:

- :ref:`bool<class_bool>` **ctrl_pressed**

+-----------+-------------------------+
| *Default* | ``false``               |
+-----------+-------------------------+
| *Setter*  | set_ctrl_pressed(value) |
+-----------+-------------------------+
| *Getter*  | is_ctrl_pressed()       |
+-----------+-------------------------+

State of the :kbd:`Ctrl` modifier.

----

.. _class_InputEventWithModifiers_property_meta_pressed:

- :ref:`bool<class_bool>` **meta_pressed**

+-----------+-------------------------+
| *Default* | ``false``               |
+-----------+-------------------------+
| *Setter*  | set_meta_pressed(value) |
+-----------+-------------------------+
| *Getter*  | is_meta_pressed()       |
+-----------+-------------------------+

State of the :kbd:`Meta` modifier.

----

.. _class_InputEventWithModifiers_property_shift_pressed:

- :ref:`bool<class_bool>` **shift_pressed**

+-----------+--------------------------+
| *Default* | ``false``                |
+-----------+--------------------------+
| *Setter*  | set_shift_pressed(value) |
+-----------+--------------------------+
| *Getter*  | is_shift_pressed()       |
+-----------+--------------------------+

State of the :kbd:`Shift` modifier.

----

.. _class_InputEventWithModifiers_property_store_command:

- :ref:`bool<class_bool>` **store_command**

+-----------+--------------------------+
| *Default* | ``true``                 |
+-----------+--------------------------+
| *Setter*  | set_store_command(value) |
+-----------+--------------------------+
| *Getter*  | is_storing_command()     |
+-----------+--------------------------+

If ``true``, pressing :kbd:`Cmd` on macOS or :kbd:`Ctrl` on all other platforms will both be serialized as :ref:`command_pressed<class_InputEventWithModifiers_property_command_pressed>`. If ``false``, those same keys will be serialized as :ref:`meta_pressed<class_InputEventWithModifiers_property_meta_pressed>` on macOS and :ref:`ctrl_pressed<class_InputEventWithModifiers_property_ctrl_pressed>` on all other platforms.

This aids with cross-platform compatibility when developing e.g. on Windows for macOS, or vice-versa.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
