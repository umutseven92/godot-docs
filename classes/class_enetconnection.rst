:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the ENetConnection.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_ENetConnection:

ENetConnection
==============

**Inherits:** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

A wrapper class for an `ENetHost <http://enet.bespin.org/group__host.html>`__.

Description
-----------

ENet's purpose is to provide a relatively thin, simple and robust network communication layer on top of UDP (User Datagram Protocol).

Tutorials
---------

- `API documentation on the ENet website <http://enet.bespin.org/usergroup0.html>`__

Methods
-------

+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`bandwidth_limit<class_ENetConnection_method_bandwidth_limit>` **(** :ref:`int<class_int>` in_bandwidth=0, :ref:`int<class_int>` out_bandwidth=0 **)**                                                                                                                                                          |
+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`broadcast<class_ENetConnection_method_broadcast>` **(** :ref:`int<class_int>` channel, :ref:`PackedByteArray<class_PackedByteArray>` packet, :ref:`int<class_int>` flags **)**                                                                                                                                 |
+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`channel_limit<class_ENetConnection_method_channel_limit>` **(** :ref:`int<class_int>` limit **)**                                                                                                                                                                                                              |
+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`compress<class_ENetConnection_method_compress>` **(** :ref:`CompressionMode<enum_ENetConnection_CompressionMode>` mode **)**                                                                                                                                                                                   |
+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ENetPacketPeer<class_ENetPacketPeer>` | :ref:`connect_to_host<class_ENetConnection_method_connect_to_host>` **(** :ref:`String<class_String>` address, :ref:`int<class_int>` port, :ref:`int<class_int>` channels=0, :ref:`int<class_int>` data=0 **)**                                                                                                      |
+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`       | :ref:`create_host<class_ENetConnection_method_create_host>` **(** :ref:`int<class_int>` max_peers=32, :ref:`int<class_int>` max_channels=0, :ref:`int<class_int>` in_bandwidth=0, :ref:`int<class_int>` out_bandwidth=0 **)**                                                                                        |
+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`       | :ref:`create_host_bound<class_ENetConnection_method_create_host_bound>` **(** :ref:`String<class_String>` bind_address, :ref:`int<class_int>` bind_port, :ref:`int<class_int>` max_peers=32, :ref:`int<class_int>` max_channels=0, :ref:`int<class_int>` in_bandwidth=0, :ref:`int<class_int>` out_bandwidth=0 **)** |
+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`destroy<class_ENetConnection_method_destroy>` **(** **)**                                                                                                                                                                                                                                                      |
+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`       | :ref:`dtls_client_setup<class_ENetConnection_method_dtls_client_setup>` **(** :ref:`X509Certificate<class_X509Certificate>` certificate, :ref:`String<class_String>` hostname, :ref:`bool<class_bool>` verify=true **)**                                                                                             |
+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`       | :ref:`dtls_server_setup<class_ENetConnection_method_dtls_server_setup>` **(** :ref:`CryptoKey<class_CryptoKey>` key, :ref:`X509Certificate<class_X509Certificate>` certificate **)**                                                                                                                                 |
+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`flush<class_ENetConnection_method_flush>` **(** **)**                                                                                                                                                                                                                                                          |
+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                       | :ref:`get_local_port<class_ENetConnection_method_get_local_port>` **(** **)** |const|                                                                                                                                                                                                                                |
+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                       | :ref:`get_max_channels<class_ENetConnection_method_get_max_channels>` **(** **)** |const|                                                                                                                                                                                                                            |
+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                   | :ref:`get_peers<class_ENetConnection_method_get_peers>` **(** **)**                                                                                                                                                                                                                                                  |
+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                   | :ref:`pop_statistic<class_ENetConnection_method_pop_statistic>` **(** :ref:`HostStatistic<enum_ENetConnection_HostStatistic>` statistic **)**                                                                                                                                                                        |
+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`refuse_new_connections<class_ENetConnection_method_refuse_new_connections>` **(** :ref:`bool<class_bool>` refuse **)**                                                                                                                                                                                         |
+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                   | :ref:`service<class_ENetConnection_method_service>` **(** :ref:`int<class_int>` timeout=0 **)**                                                                                                                                                                                                                      |
+---------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumerations
------------

.. _enum_ENetConnection_CompressionMode:

.. _class_ENetConnection_constant_COMPRESS_NONE:

.. _class_ENetConnection_constant_COMPRESS_RANGE_CODER:

.. _class_ENetConnection_constant_COMPRESS_FASTLZ:

.. _class_ENetConnection_constant_COMPRESS_ZLIB:

.. _class_ENetConnection_constant_COMPRESS_ZSTD:

enum **CompressionMode**:

- **COMPRESS_NONE** = **0** --- No compression. This uses the most bandwidth, but has the upside of requiring the fewest CPU resources. This option may also be used to make network debugging using tools like Wireshark easier.

- **COMPRESS_RANGE_CODER** = **1** --- ENet's built-in range encoding. Works well on small packets, but is not the most efficient algorithm on packets larger than 4 KB.

- **COMPRESS_FASTLZ** = **2** --- `FastLZ <https://fastlz.org/>`__ compression. This option uses less CPU resources compared to :ref:`COMPRESS_ZLIB<class_ENetConnection_constant_COMPRESS_ZLIB>`, at the expense of using more bandwidth.

- **COMPRESS_ZLIB** = **3** --- `Zlib <https://www.zlib.net/>`__ compression. This option uses less bandwidth compared to :ref:`COMPRESS_FASTLZ<class_ENetConnection_constant_COMPRESS_FASTLZ>`, at the expense of using more CPU resources.

- **COMPRESS_ZSTD** = **4** --- `Zstandard <https://facebook.github.io/zstd/>`__ compression. Note that this algorithm is not very efficient on packets smaller than 4 KB. Therefore, it's recommended to use other compression algorithms in most cases.

----

.. _enum_ENetConnection_EventType:

.. _class_ENetConnection_constant_EVENT_ERROR:

.. _class_ENetConnection_constant_EVENT_NONE:

.. _class_ENetConnection_constant_EVENT_CONNECT:

.. _class_ENetConnection_constant_EVENT_DISCONNECT:

.. _class_ENetConnection_constant_EVENT_RECEIVE:

enum **EventType**:

- **EVENT_ERROR** = **-1** --- An error occurred during :ref:`service<class_ENetConnection_method_service>`. You will likely need to :ref:`destroy<class_ENetConnection_method_destroy>` the host and recreate it.

- **EVENT_NONE** = **0** --- No event occurred within the specified time limit.

- **EVENT_CONNECT** = **1** --- A connection request initiated by enet_host_connect has completed. The array will contain the peer which successfully connected.

- **EVENT_DISCONNECT** = **2** --- A peer has disconnected. This event is generated on a successful completion of a disconnect initiated by :ref:`ENetPacketPeer.peer_disconnect<class_ENetPacketPeer_method_peer_disconnect>`, if a peer has timed out, or if a connection request intialized by :ref:`connect_to_host<class_ENetConnection_method_connect_to_host>` has timed out. The array will contain the peer which disconnected. The data field contains user supplied data describing the disconnection, or 0, if none is available.

- **EVENT_RECEIVE** = **3** --- A packet has been received from a peer. The array will contain the peer which sent the packet, the channel number upon which the packet was received, and the received packet.

----

.. _enum_ENetConnection_HostStatistic:

.. _class_ENetConnection_constant_HOST_TOTAL_SENT_DATA:

.. _class_ENetConnection_constant_HOST_TOTAL_SENT_PACKETS:

.. _class_ENetConnection_constant_HOST_TOTAL_RECEIVED_DATA:

.. _class_ENetConnection_constant_HOST_TOTAL_RECEIVED_PACKETS:

enum **HostStatistic**:

- **HOST_TOTAL_SENT_DATA** = **0** --- Total data sent.

- **HOST_TOTAL_SENT_PACKETS** = **1** --- Total UDP packets sent.

- **HOST_TOTAL_RECEIVED_DATA** = **2** --- Total data received.

- **HOST_TOTAL_RECEIVED_PACKETS** = **3** --- Total UDP packets received.

Method Descriptions
-------------------

.. _class_ENetConnection_method_bandwidth_limit:

- void **bandwidth_limit** **(** :ref:`int<class_int>` in_bandwidth=0, :ref:`int<class_int>` out_bandwidth=0 **)**

Adjusts the bandwidth limits of a host.

----

.. _class_ENetConnection_method_broadcast:

- void **broadcast** **(** :ref:`int<class_int>` channel, :ref:`PackedByteArray<class_PackedByteArray>` packet, :ref:`int<class_int>` flags **)**

Queues a ``packet`` to be sent to all peers associated with the host over the specified ``channel``. See :ref:`ENetPacketPeer<class_ENetPacketPeer>` ``FLAG_*`` constants for available packet flags.

----

.. _class_ENetConnection_method_channel_limit:

- void **channel_limit** **(** :ref:`int<class_int>` limit **)**

Limits the maximum allowed channels of future incoming connections.

----

.. _class_ENetConnection_method_compress:

- void **compress** **(** :ref:`CompressionMode<enum_ENetConnection_CompressionMode>` mode **)**

Sets the compression method used for network packets. These have different tradeoffs of compression speed versus bandwidth, you may need to test which one works best for your use case if you use compression at all.

**Note:** Most games' network design involve sending many small packets frequently (smaller than 4 KB each). If in doubt, it is recommended to keep the default compression algorithm as it works best on these small packets.

**Note:** The compression mode must be set to the same value on both the server and all its clients. Clients will fail to connect if the compression mode set on the client differs from the one set on the server.

----

.. _class_ENetConnection_method_connect_to_host:

- :ref:`ENetPacketPeer<class_ENetPacketPeer>` **connect_to_host** **(** :ref:`String<class_String>` address, :ref:`int<class_int>` port, :ref:`int<class_int>` channels=0, :ref:`int<class_int>` data=0 **)**

Initiates a connection to a foreign ``address`` using the specified ``port`` and allocting the requested ``channels``. Optional ``data`` can be passed during connection in the form of a 32 bit integer.

**Note:** You must call either :ref:`create_host<class_ENetConnection_method_create_host>` or :ref:`create_host_bound<class_ENetConnection_method_create_host_bound>` before calling this method.

----

.. _class_ENetConnection_method_create_host:

- :ref:`Error<enum_@GlobalScope_Error>` **create_host** **(** :ref:`int<class_int>` max_peers=32, :ref:`int<class_int>` max_channels=0, :ref:`int<class_int>` in_bandwidth=0, :ref:`int<class_int>` out_bandwidth=0 **)**

Create an ENetHost that will allow up to ``max_peers`` connected peers, each allocating up to ``max_channels`` channels, optionally limiting bandwith to ``in_bandwidth`` and ``out_bandwidth``.

----

.. _class_ENetConnection_method_create_host_bound:

- :ref:`Error<enum_@GlobalScope_Error>` **create_host_bound** **(** :ref:`String<class_String>` bind_address, :ref:`int<class_int>` bind_port, :ref:`int<class_int>` max_peers=32, :ref:`int<class_int>` max_channels=0, :ref:`int<class_int>` in_bandwidth=0, :ref:`int<class_int>` out_bandwidth=0 **)**

Create an ENetHost like :ref:`create_host<class_ENetConnection_method_create_host>` which is also bound to the given ``bind_address`` and ``bind_port``.

----

.. _class_ENetConnection_method_destroy:

- void **destroy** **(** **)**

Destroys the host and all resources associated with it.

----

.. _class_ENetConnection_method_dtls_client_setup:

- :ref:`Error<enum_@GlobalScope_Error>` **dtls_client_setup** **(** :ref:`X509Certificate<class_X509Certificate>` certificate, :ref:`String<class_String>` hostname, :ref:`bool<class_bool>` verify=true **)**

Configure this ENetHost to use the custom Godot extension allowing DTLS encryption for ENet clients. Call this before :ref:`connect_to_host<class_ENetConnection_method_connect_to_host>` to have ENet connect using DTLS with ``certificate`` and ``hostname`` verification. Verification can be optionally turned off via the ``verify`` parameter.

----

.. _class_ENetConnection_method_dtls_server_setup:

- :ref:`Error<enum_@GlobalScope_Error>` **dtls_server_setup** **(** :ref:`CryptoKey<class_CryptoKey>` key, :ref:`X509Certificate<class_X509Certificate>` certificate **)**

Configure this ENetHost to use the custom Godot extension allowing DTLS encryption for ENet servers. Call this right after :ref:`create_host_bound<class_ENetConnection_method_create_host_bound>` to have ENet expect peers to connect using DTLS.

----

.. _class_ENetConnection_method_flush:

- void **flush** **(** **)**

Sends any queued packets on the host specified to its designated peers.

----

.. _class_ENetConnection_method_get_local_port:

- :ref:`int<class_int>` **get_local_port** **(** **)** |const|

Returns the local port to which this peer is bound.

----

.. _class_ENetConnection_method_get_max_channels:

- :ref:`int<class_int>` **get_max_channels** **(** **)** |const|

Returns the maximum number of channels allowed for connected peers.

----

.. _class_ENetConnection_method_get_peers:

- :ref:`Array<class_Array>` **get_peers** **(** **)**

Returns the list of peers associated with this host.

**Note:** This list might include some peers that are not fully connected or are still being disconnected.

----

.. _class_ENetConnection_method_pop_statistic:

- :ref:`float<class_float>` **pop_statistic** **(** :ref:`HostStatistic<enum_ENetConnection_HostStatistic>` statistic **)**

Returns and resets host statistics. See :ref:`HostStatistic<enum_ENetConnection_HostStatistic>` for more info.

----

.. _class_ENetConnection_method_refuse_new_connections:

- void **refuse_new_connections** **(** :ref:`bool<class_bool>` refuse **)**

Configures the DTLS server to automatically drop new connections.

**Note:** This method is only relevant after calling :ref:`dtls_server_setup<class_ENetConnection_method_dtls_server_setup>`.

----

.. _class_ENetConnection_method_service:

- :ref:`Array<class_Array>` **service** **(** :ref:`int<class_int>` timeout=0 **)**

Waits for events on the host specified and shuttles packets between the host and its peers. The returned :ref:`Array<class_Array>` will have 4 elements. An :ref:`EventType<enum_ENetConnection_EventType>`, the :ref:`ENetPacketPeer<class_ENetPacketPeer>` which generated the event, the event associated data (if any), the event associated channel (if any). If the generated event is :ref:`EVENT_RECEIVE<class_ENetConnection_constant_EVENT_RECEIVE>`, the received packet will be queued to the associated :ref:`ENetPacketPeer<class_ENetPacketPeer>`.

Call this function regularly to handle connections, disconnections, and to receive new packets.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
