:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the PhysicsShapeQueryParameters2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_PhysicsShapeQueryParameters2D:

PhysicsShapeQueryParameters2D
=============================

**Inherits:** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

Parameters to be sent to a 2D shape physics query.

Description
-----------

This class contains the shape and other parameters for 2D intersection/collision queries.

Properties
----------

+---------------------------------------+----------------------------------------------------------------------------------------------+-----------------------------------+
| :ref:`bool<class_bool>`               | :ref:`collide_with_areas<class_PhysicsShapeQueryParameters2D_property_collide_with_areas>`   | ``false``                         |
+---------------------------------------+----------------------------------------------------------------------------------------------+-----------------------------------+
| :ref:`bool<class_bool>`               | :ref:`collide_with_bodies<class_PhysicsShapeQueryParameters2D_property_collide_with_bodies>` | ``true``                          |
+---------------------------------------+----------------------------------------------------------------------------------------------+-----------------------------------+
| :ref:`int<class_int>`                 | :ref:`collision_mask<class_PhysicsShapeQueryParameters2D_property_collision_mask>`           | ``4294967295``                    |
+---------------------------------------+----------------------------------------------------------------------------------------------+-----------------------------------+
| :ref:`Array<class_Array>`             | :ref:`exclude<class_PhysicsShapeQueryParameters2D_property_exclude>`                         | ``[]``                            |
+---------------------------------------+----------------------------------------------------------------------------------------------+-----------------------------------+
| :ref:`float<class_float>`             | :ref:`margin<class_PhysicsShapeQueryParameters2D_property_margin>`                           | ``0.0``                           |
+---------------------------------------+----------------------------------------------------------------------------------------------+-----------------------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`motion<class_PhysicsShapeQueryParameters2D_property_motion>`                           | ``Vector2(0, 0)``                 |
+---------------------------------------+----------------------------------------------------------------------------------------------+-----------------------------------+
| :ref:`Resource<class_Resource>`       | :ref:`shape<class_PhysicsShapeQueryParameters2D_property_shape>`                             |                                   |
+---------------------------------------+----------------------------------------------------------------------------------------------+-----------------------------------+
| :ref:`RID<class_RID>`                 | :ref:`shape_rid<class_PhysicsShapeQueryParameters2D_property_shape_rid>`                     |                                   |
+---------------------------------------+----------------------------------------------------------------------------------------------+-----------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`transform<class_PhysicsShapeQueryParameters2D_property_transform>`                     | ``Transform2D(1, 0, 0, 1, 0, 0)`` |
+---------------------------------------+----------------------------------------------------------------------------------------------+-----------------------------------+

Property Descriptions
---------------------

.. _class_PhysicsShapeQueryParameters2D_property_collide_with_areas:

- :ref:`bool<class_bool>` **collide_with_areas**

+-----------+---------------------------------+
| *Default* | ``false``                       |
+-----------+---------------------------------+
| *Setter*  | set_collide_with_areas(value)   |
+-----------+---------------------------------+
| *Getter*  | is_collide_with_areas_enabled() |
+-----------+---------------------------------+

If ``true``, the query will take :ref:`Area2D<class_Area2D>`\ s into account.

----

.. _class_PhysicsShapeQueryParameters2D_property_collide_with_bodies:

- :ref:`bool<class_bool>` **collide_with_bodies**

+-----------+----------------------------------+
| *Default* | ``true``                         |
+-----------+----------------------------------+
| *Setter*  | set_collide_with_bodies(value)   |
+-----------+----------------------------------+
| *Getter*  | is_collide_with_bodies_enabled() |
+-----------+----------------------------------+

If ``true``, the query will take :ref:`PhysicsBody2D<class_PhysicsBody2D>`\ s into account.

----

.. _class_PhysicsShapeQueryParameters2D_property_collision_mask:

- :ref:`int<class_int>` **collision_mask**

+-----------+---------------------------+
| *Default* | ``4294967295``            |
+-----------+---------------------------+
| *Setter*  | set_collision_mask(value) |
+-----------+---------------------------+
| *Getter*  | get_collision_mask()      |
+-----------+---------------------------+

The physics layers the query will detect (as a bitmask). By default, all collision layers are detected. See `Collision layers and masks <https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks>`__ in the documentation for more information.

----

.. _class_PhysicsShapeQueryParameters2D_property_exclude:

- :ref:`Array<class_Array>` **exclude**

+-----------+--------------------+
| *Default* | ``[]``             |
+-----------+--------------------+
| *Setter*  | set_exclude(value) |
+-----------+--------------------+
| *Getter*  | get_exclude()      |
+-----------+--------------------+

The list of objects or object :ref:`RID<class_RID>`\ s that will be excluded from collisions.

----

.. _class_PhysicsShapeQueryParameters2D_property_margin:

- :ref:`float<class_float>` **margin**

+-----------+-------------------+
| *Default* | ``0.0``           |
+-----------+-------------------+
| *Setter*  | set_margin(value) |
+-----------+-------------------+
| *Getter*  | get_margin()      |
+-----------+-------------------+

The collision margin for the shape.

----

.. _class_PhysicsShapeQueryParameters2D_property_motion:

- :ref:`Vector2<class_Vector2>` **motion**

+-----------+-------------------+
| *Default* | ``Vector2(0, 0)`` |
+-----------+-------------------+
| *Setter*  | set_motion(value) |
+-----------+-------------------+
| *Getter*  | get_motion()      |
+-----------+-------------------+

The motion of the shape being queried for.

----

.. _class_PhysicsShapeQueryParameters2D_property_shape:

- :ref:`Resource<class_Resource>` **shape**

+----------+------------------+
| *Setter* | set_shape(value) |
+----------+------------------+
| *Getter* | get_shape()      |
+----------+------------------+

The :ref:`Shape2D<class_Shape2D>` that will be used for collision/intersection queries. This stores the actual reference which avoids the shape to be released while being used for queries, so always prefer using this over :ref:`shape_rid<class_PhysicsShapeQueryParameters2D_property_shape_rid>`.

----

.. _class_PhysicsShapeQueryParameters2D_property_shape_rid:

- :ref:`RID<class_RID>` **shape_rid**

+----------+----------------------+
| *Setter* | set_shape_rid(value) |
+----------+----------------------+
| *Getter* | get_shape_rid()      |
+----------+----------------------+

The queried shape's :ref:`RID<class_RID>` that will be used for collision/intersection queries. Use this over :ref:`shape<class_PhysicsShapeQueryParameters2D_property_shape>` if you want to optimize for performance using the Servers API:


.. tabs::

 .. code-tab:: gdscript

    var shape_rid = PhysicsServer2D.circle_shape_create()
    var radius = 64
    PhysicsServer2D.shape_set_data(shape_rid, radius)
    
    var params = PhysicsShapeQueryParameters2D.new()
    params.shape_rid = shape_rid
    
    # Execute physics queries here...
    
    # Release the shape when done with physics queries.
    PhysicsServer2D.free_rid(shape_rid)

 .. code-tab:: csharp

    RID shapeRid = PhysicsServer2D.CircleShapeCreate();
    int radius = 64;
    PhysicsServer2D.ShapeSetData(shapeRid, radius);
    
    var params = new PhysicsShapeQueryParameters2D();
    params.ShapeRid = shapeRid;
    
    // Execute physics queries here...
    
    // Release the shape when done with physics queries.
    PhysicsServer2D.FreeRid(shapeRid);



----

.. _class_PhysicsShapeQueryParameters2D_property_transform:

- :ref:`Transform2D<class_Transform2D>` **transform**

+-----------+-----------------------------------+
| *Default* | ``Transform2D(1, 0, 0, 1, 0, 0)`` |
+-----------+-----------------------------------+
| *Setter*  | set_transform(value)              |
+-----------+-----------------------------------+
| *Getter*  | get_transform()                   |
+-----------+-----------------------------------+

The queried shape's transform matrix.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
