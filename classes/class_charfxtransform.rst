:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the CharFXTransform.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_CharFXTransform:

CharFXTransform
===============

**Inherits:** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

Controls how an individual character will be displayed in a :ref:`RichTextEffect<class_RichTextEffect>`.

Description
-----------

By setting various properties on this object, you can control how individual characters will be displayed in a :ref:`RichTextEffect<class_RichTextEffect>`.

Tutorials
---------

- :doc:`../tutorials/gui/bbcode_in_richtextlabel`

- `RichTextEffect test project (third-party) <https://github.com/Eoin-ONeill-Yokai/Godot-Rich-Text-Effect-Test-Project>`__

Properties
----------

+-------------------------------------+------------------------------------------------------------------+-----------------------+
| :ref:`Color<class_Color>`           | :ref:`color<class_CharFXTransform_property_color>`               | ``Color(0, 0, 0, 1)`` |
+-------------------------------------+------------------------------------------------------------------+-----------------------+
| :ref:`float<class_float>`           | :ref:`elapsed_time<class_CharFXTransform_property_elapsed_time>` | ``0.0``               |
+-------------------------------------+------------------------------------------------------------------+-----------------------+
| :ref:`Dictionary<class_Dictionary>` | :ref:`env<class_CharFXTransform_property_env>`                   | ``{}``                |
+-------------------------------------+------------------------------------------------------------------+-----------------------+
| :ref:`RID<class_RID>`               | :ref:`font<class_CharFXTransform_property_font>`                 |                       |
+-------------------------------------+------------------------------------------------------------------+-----------------------+
| :ref:`int<class_int>`               | :ref:`glyph_count<class_CharFXTransform_property_glyph_count>`   | ``0``                 |
+-------------------------------------+------------------------------------------------------------------+-----------------------+
| :ref:`int<class_int>`               | :ref:`glyph_flags<class_CharFXTransform_property_glyph_flags>`   | ``0``                 |
+-------------------------------------+------------------------------------------------------------------+-----------------------+
| :ref:`int<class_int>`               | :ref:`glyph_index<class_CharFXTransform_property_glyph_index>`   | ``0``                 |
+-------------------------------------+------------------------------------------------------------------+-----------------------+
| :ref:`Vector2<class_Vector2>`       | :ref:`offset<class_CharFXTransform_property_offset>`             | ``Vector2(0, 0)``     |
+-------------------------------------+------------------------------------------------------------------+-----------------------+
| :ref:`bool<class_bool>`             | :ref:`outline<class_CharFXTransform_property_outline>`           | ``false``             |
+-------------------------------------+------------------------------------------------------------------+-----------------------+
| :ref:`Vector2i<class_Vector2i>`     | :ref:`range<class_CharFXTransform_property_range>`               | ``Vector2i(0, 0)``    |
+-------------------------------------+------------------------------------------------------------------+-----------------------+
| :ref:`bool<class_bool>`             | :ref:`visible<class_CharFXTransform_property_visible>`           | ``true``              |
+-------------------------------------+------------------------------------------------------------------+-----------------------+

Property Descriptions
---------------------

.. _class_CharFXTransform_property_color:

- :ref:`Color<class_Color>` **color**

+-----------+-----------------------+
| *Default* | ``Color(0, 0, 0, 1)`` |
+-----------+-----------------------+
| *Setter*  | set_color(value)      |
+-----------+-----------------------+
| *Getter*  | get_color()           |
+-----------+-----------------------+

The color the character will be drawn with.

----

.. _class_CharFXTransform_property_elapsed_time:

- :ref:`float<class_float>` **elapsed_time**

+-----------+-------------------------+
| *Default* | ``0.0``                 |
+-----------+-------------------------+
| *Setter*  | set_elapsed_time(value) |
+-----------+-------------------------+
| *Getter*  | get_elapsed_time()      |
+-----------+-------------------------+

The time elapsed since the :ref:`RichTextLabel<class_RichTextLabel>` was added to the scene tree (in seconds). Time stops when the project is paused depending on the value of the :ref:`RichTextLabel<class_RichTextLabel>`'s :ref:`Node.process_mode<class_Node_property_process_mode>`.

**Note:** Time still passes while the :ref:`RichTextLabel<class_RichTextLabel>` is hidden.

----

.. _class_CharFXTransform_property_env:

- :ref:`Dictionary<class_Dictionary>` **env**

+-----------+------------------------+
| *Default* | ``{}``                 |
+-----------+------------------------+
| *Setter*  | set_environment(value) |
+-----------+------------------------+
| *Getter*  | get_environment()      |
+-----------+------------------------+

Contains the arguments passed in the opening BBCode tag. By default, arguments are strings; if their contents match a type such as :ref:`bool<class_bool>`, :ref:`int<class_int>` or :ref:`float<class_float>`, they will be converted automatically. Color codes in the form ``#rrggbb`` or ``#rgb`` will be converted to an opaque :ref:`Color<class_Color>`. String arguments may not contain spaces, even if they're quoted. If present, quotes will also be present in the final string.

For example, the opening BBCode tag ``[example foo=hello bar=true baz=42 color=#ffffff]`` will map to the following :ref:`Dictionary<class_Dictionary>`:

::

    {"foo": "hello", "bar": true, "baz": 42, "color": Color(1, 1, 1, 1)}

----

.. _class_CharFXTransform_property_font:

- :ref:`RID<class_RID>` **font**

+----------+-----------------+
| *Setter* | set_font(value) |
+----------+-----------------+
| *Getter* | get_font()      |
+----------+-----------------+

Font resource used to render glyph.

----

.. _class_CharFXTransform_property_glyph_count:

- :ref:`int<class_int>` **glyph_count**

+-----------+------------------------+
| *Default* | ``0``                  |
+-----------+------------------------+
| *Setter*  | set_glyph_count(value) |
+-----------+------------------------+
| *Getter*  | get_glyph_count()      |
+-----------+------------------------+

Number of glyphs in the grapheme cluster. This value is set in the first glyph of a cluster. Setting this property won't affect drawing.

----

.. _class_CharFXTransform_property_glyph_flags:

- :ref:`int<class_int>` **glyph_flags**

+-----------+------------------------+
| *Default* | ``0``                  |
+-----------+------------------------+
| *Setter*  | set_glyph_flags(value) |
+-----------+------------------------+
| *Getter*  | get_glyph_flags()      |
+-----------+------------------------+

Glyph flags. See :ref:`GraphemeFlag<enum_TextServer_GraphemeFlag>` for more info. Setting this property won't affect drawing.

----

.. _class_CharFXTransform_property_glyph_index:

- :ref:`int<class_int>` **glyph_index**

+-----------+------------------------+
| *Default* | ``0``                  |
+-----------+------------------------+
| *Setter*  | set_glyph_index(value) |
+-----------+------------------------+
| *Getter*  | get_glyph_index()      |
+-----------+------------------------+

Font specific glyph index.

----

.. _class_CharFXTransform_property_offset:

- :ref:`Vector2<class_Vector2>` **offset**

+-----------+-------------------+
| *Default* | ``Vector2(0, 0)`` |
+-----------+-------------------+
| *Setter*  | set_offset(value) |
+-----------+-------------------+
| *Getter*  | get_offset()      |
+-----------+-------------------+

The position offset the character will be drawn with (in pixels).

----

.. _class_CharFXTransform_property_outline:

- :ref:`bool<class_bool>` **outline**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_outline(value) |
+-----------+--------------------+
| *Getter*  | is_outline()       |
+-----------+--------------------+

If ``true``, FX transform is called for outline drawing. Setting this property won't affect drawing.

----

.. _class_CharFXTransform_property_range:

- :ref:`Vector2i<class_Vector2i>` **range**

+-----------+--------------------+
| *Default* | ``Vector2i(0, 0)`` |
+-----------+--------------------+
| *Setter*  | set_range(value)   |
+-----------+--------------------+
| *Getter*  | get_range()        |
+-----------+--------------------+

Absolute character range in the string, corresponding to the glyph. Setting this property won't affect drawing.

----

.. _class_CharFXTransform_property_visible:

- :ref:`bool<class_bool>` **visible**

+-----------+-----------------------+
| *Default* | ``true``              |
+-----------+-----------------------+
| *Setter*  | set_visibility(value) |
+-----------+-----------------------+
| *Getter*  | is_visible()          |
+-----------+-----------------------+

If ``true``, the character will be drawn. If ``false``, the character will be hidden. Characters around hidden characters will reflow to take the space of hidden characters. If this is not desired, set their :ref:`color<class_CharFXTransform_property_color>` to ``Color(1, 1, 1, 0)`` instead.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
