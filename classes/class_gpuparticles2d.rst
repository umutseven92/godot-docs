:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the GPUParticles2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_GPUParticles2D:

GPUParticles2D
==============

**Inherits:** :ref:`Node2D<class_Node2D>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

2D particle emitter.

Description
-----------

2D particle node used to create a variety of particle systems and effects. ``GPUParticles2D`` features an emitter that generates some number of particles at a given rate.

Use the ``process_material`` property to add a :ref:`ParticlesMaterial<class_ParticlesMaterial>` to configure particle appearance and behavior. Alternatively, you can add a :ref:`ShaderMaterial<class_ShaderMaterial>` which will be applied to all particles.

Tutorials
---------

- :doc:`../tutorials/2d/particle_systems_2d`

- `2D Dodge The Creeps Demo <https://godotengine.org/asset-library/asset/515>`__

Properties
----------

+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`int<class_int>`                           | :ref:`amount<class_GPUParticles2D_property_amount>`                                         | ``8``                           |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`float<class_float>`                       | :ref:`collision_base_size<class_GPUParticles2D_property_collision_base_size>`               | ``1.0``                         |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`DrawOrder<enum_GPUParticles2D_DrawOrder>` | :ref:`draw_order<class_GPUParticles2D_property_draw_order>`                                 | ``1``                           |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`bool<class_bool>`                         | :ref:`emitting<class_GPUParticles2D_property_emitting>`                                     | ``true``                        |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`float<class_float>`                       | :ref:`explosiveness<class_GPUParticles2D_property_explosiveness>`                           | ``0.0``                         |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`int<class_int>`                           | :ref:`fixed_fps<class_GPUParticles2D_property_fixed_fps>`                                   | ``30``                          |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`bool<class_bool>`                         | :ref:`fract_delta<class_GPUParticles2D_property_fract_delta>`                               | ``true``                        |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`float<class_float>`                       | :ref:`lifetime<class_GPUParticles2D_property_lifetime>`                                     | ``1.0``                         |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`bool<class_bool>`                         | :ref:`local_coords<class_GPUParticles2D_property_local_coords>`                             | ``true``                        |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`bool<class_bool>`                         | :ref:`one_shot<class_GPUParticles2D_property_one_shot>`                                     | ``false``                       |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`float<class_float>`                       | :ref:`preprocess<class_GPUParticles2D_property_preprocess>`                                 | ``0.0``                         |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`Material<class_Material>`                 | :ref:`process_material<class_GPUParticles2D_property_process_material>`                     |                                 |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`float<class_float>`                       | :ref:`randomness<class_GPUParticles2D_property_randomness>`                                 | ``0.0``                         |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`float<class_float>`                       | :ref:`speed_scale<class_GPUParticles2D_property_speed_scale>`                               | ``1.0``                         |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`Texture2D<class_Texture2D>`               | :ref:`texture<class_GPUParticles2D_property_texture>`                                       |                                 |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`bool<class_bool>`                         | :ref:`trail_enabled<class_GPUParticles2D_property_trail_enabled>`                           | ``false``                       |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`float<class_float>`                       | :ref:`trail_length_secs<class_GPUParticles2D_property_trail_length_secs>`                   | ``0.3``                         |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`int<class_int>`                           | :ref:`trail_section_subdivisions<class_GPUParticles2D_property_trail_section_subdivisions>` | ``4``                           |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`int<class_int>`                           | :ref:`trail_sections<class_GPUParticles2D_property_trail_sections>`                         | ``8``                           |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+
| :ref:`Rect2<class_Rect2>`                       | :ref:`visibility_rect<class_GPUParticles2D_property_visibility_rect>`                       | ``Rect2(-100, -100, 200, 200)`` |
+-------------------------------------------------+---------------------------------------------------------------------------------------------+---------------------------------+

Methods
-------

+---------------------------+-----------------------------------------------------------------------------------+
| :ref:`Rect2<class_Rect2>` | :ref:`capture_rect<class_GPUParticles2D_method_capture_rect>` **(** **)** |const| |
+---------------------------+-----------------------------------------------------------------------------------+
| void                      | :ref:`restart<class_GPUParticles2D_method_restart>` **(** **)**                   |
+---------------------------+-----------------------------------------------------------------------------------+

Enumerations
------------

.. _enum_GPUParticles2D_DrawOrder:

.. _class_GPUParticles2D_constant_DRAW_ORDER_INDEX:

.. _class_GPUParticles2D_constant_DRAW_ORDER_LIFETIME:

.. _class_GPUParticles2D_constant_DRAW_ORDER_REVERSE_LIFETIME:

enum **DrawOrder**:

- **DRAW_ORDER_INDEX** = **0** --- Particles are drawn in the order emitted.

- **DRAW_ORDER_LIFETIME** = **1** --- Particles are drawn in order of remaining lifetime.

- **DRAW_ORDER_REVERSE_LIFETIME** = **2**

Property Descriptions
---------------------

.. _class_GPUParticles2D_property_amount:

- :ref:`int<class_int>` **amount**

+-----------+-------------------+
| *Default* | ``8``             |
+-----------+-------------------+
| *Setter*  | set_amount(value) |
+-----------+-------------------+
| *Getter*  | get_amount()      |
+-----------+-------------------+

Number of particles emitted in one emission cycle.

----

.. _class_GPUParticles2D_property_collision_base_size:

- :ref:`float<class_float>` **collision_base_size**

+-----------+--------------------------------+
| *Default* | ``1.0``                        |
+-----------+--------------------------------+
| *Setter*  | set_collision_base_size(value) |
+-----------+--------------------------------+
| *Getter*  | get_collision_base_size()      |
+-----------+--------------------------------+

----

.. _class_GPUParticles2D_property_draw_order:

- :ref:`DrawOrder<enum_GPUParticles2D_DrawOrder>` **draw_order**

+-----------+-----------------------+
| *Default* | ``1``                 |
+-----------+-----------------------+
| *Setter*  | set_draw_order(value) |
+-----------+-----------------------+
| *Getter*  | get_draw_order()      |
+-----------+-----------------------+

Particle draw order. Uses :ref:`DrawOrder<enum_GPUParticles2D_DrawOrder>` values.

----

.. _class_GPUParticles2D_property_emitting:

- :ref:`bool<class_bool>` **emitting**

+-----------+---------------------+
| *Default* | ``true``            |
+-----------+---------------------+
| *Setter*  | set_emitting(value) |
+-----------+---------------------+
| *Getter*  | is_emitting()       |
+-----------+---------------------+

If ``true``, particles are being emitted.

----

.. _class_GPUParticles2D_property_explosiveness:

- :ref:`float<class_float>` **explosiveness**

+-----------+--------------------------------+
| *Default* | ``0.0``                        |
+-----------+--------------------------------+
| *Setter*  | set_explosiveness_ratio(value) |
+-----------+--------------------------------+
| *Getter*  | get_explosiveness_ratio()      |
+-----------+--------------------------------+

How rapidly particles in an emission cycle are emitted. If greater than ``0``, there will be a gap in emissions before the next cycle begins.

----

.. _class_GPUParticles2D_property_fixed_fps:

- :ref:`int<class_int>` **fixed_fps**

+-----------+----------------------+
| *Default* | ``30``               |
+-----------+----------------------+
| *Setter*  | set_fixed_fps(value) |
+-----------+----------------------+
| *Getter*  | get_fixed_fps()      |
+-----------+----------------------+

The particle system's frame rate is fixed to a value. For instance, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the simulation of the particle system itself.

----

.. _class_GPUParticles2D_property_fract_delta:

- :ref:`bool<class_bool>` **fract_delta**

+-----------+-----------------------------+
| *Default* | ``true``                    |
+-----------+-----------------------------+
| *Setter*  | set_fractional_delta(value) |
+-----------+-----------------------------+
| *Getter*  | get_fractional_delta()      |
+-----------+-----------------------------+

If ``true``, results in fractional delta calculation which has a smoother particles display effect.

----

.. _class_GPUParticles2D_property_lifetime:

- :ref:`float<class_float>` **lifetime**

+-----------+---------------------+
| *Default* | ``1.0``             |
+-----------+---------------------+
| *Setter*  | set_lifetime(value) |
+-----------+---------------------+
| *Getter*  | get_lifetime()      |
+-----------+---------------------+

Amount of time each particle will exist.

----

.. _class_GPUParticles2D_property_local_coords:

- :ref:`bool<class_bool>` **local_coords**

+-----------+----------------------------------+
| *Default* | ``true``                         |
+-----------+----------------------------------+
| *Setter*  | set_use_local_coordinates(value) |
+-----------+----------------------------------+
| *Getter*  | get_use_local_coordinates()      |
+-----------+----------------------------------+

If ``true``, particles use the parent node's coordinate space. If ``false``, they use global coordinates.

----

.. _class_GPUParticles2D_property_one_shot:

- :ref:`bool<class_bool>` **one_shot**

+-----------+---------------------+
| *Default* | ``false``           |
+-----------+---------------------+
| *Setter*  | set_one_shot(value) |
+-----------+---------------------+
| *Getter*  | get_one_shot()      |
+-----------+---------------------+

If ``true``, only one emission cycle occurs. If set ``true`` during a cycle, emission will stop at the cycle's end.

----

.. _class_GPUParticles2D_property_preprocess:

- :ref:`float<class_float>` **preprocess**

+-----------+-----------------------------+
| *Default* | ``0.0``                     |
+-----------+-----------------------------+
| *Setter*  | set_pre_process_time(value) |
+-----------+-----------------------------+
| *Getter*  | get_pre_process_time()      |
+-----------+-----------------------------+

Particle system starts as if it had already run for this many seconds.

----

.. _class_GPUParticles2D_property_process_material:

- :ref:`Material<class_Material>` **process_material**

+----------+-----------------------------+
| *Setter* | set_process_material(value) |
+----------+-----------------------------+
| *Getter* | get_process_material()      |
+----------+-----------------------------+

:ref:`Material<class_Material>` for processing particles. Can be a :ref:`ParticlesMaterial<class_ParticlesMaterial>` or a :ref:`ShaderMaterial<class_ShaderMaterial>`.

----

.. _class_GPUParticles2D_property_randomness:

- :ref:`float<class_float>` **randomness**

+-----------+-----------------------------+
| *Default* | ``0.0``                     |
+-----------+-----------------------------+
| *Setter*  | set_randomness_ratio(value) |
+-----------+-----------------------------+
| *Getter*  | get_randomness_ratio()      |
+-----------+-----------------------------+

Emission lifetime randomness ratio.

----

.. _class_GPUParticles2D_property_speed_scale:

- :ref:`float<class_float>` **speed_scale**

+-----------+------------------------+
| *Default* | ``1.0``                |
+-----------+------------------------+
| *Setter*  | set_speed_scale(value) |
+-----------+------------------------+
| *Getter*  | get_speed_scale()      |
+-----------+------------------------+

Particle system's running speed scaling ratio. A value of ``0`` can be used to pause the particles.

----

.. _class_GPUParticles2D_property_texture:

- :ref:`Texture2D<class_Texture2D>` **texture**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

Particle texture. If ``null``, particles will be squares.

----

.. _class_GPUParticles2D_property_trail_enabled:

- :ref:`bool<class_bool>` **trail_enabled**

+-----------+--------------------------+
| *Default* | ``false``                |
+-----------+--------------------------+
| *Setter*  | set_trail_enabled(value) |
+-----------+--------------------------+
| *Getter*  | is_trail_enabled()       |
+-----------+--------------------------+

----

.. _class_GPUParticles2D_property_trail_length_secs:

- :ref:`float<class_float>` **trail_length_secs**

+-----------+-------------------------+
| *Default* | ``0.3``                 |
+-----------+-------------------------+
| *Setter*  | set_trail_length(value) |
+-----------+-------------------------+
| *Getter*  | get_trail_length()      |
+-----------+-------------------------+

----

.. _class_GPUParticles2D_property_trail_section_subdivisions:

- :ref:`int<class_int>` **trail_section_subdivisions**

+-----------+---------------------------------------+
| *Default* | ``4``                                 |
+-----------+---------------------------------------+
| *Setter*  | set_trail_section_subdivisions(value) |
+-----------+---------------------------------------+
| *Getter*  | get_trail_section_subdivisions()      |
+-----------+---------------------------------------+

----

.. _class_GPUParticles2D_property_trail_sections:

- :ref:`int<class_int>` **trail_sections**

+-----------+---------------------------+
| *Default* | ``8``                     |
+-----------+---------------------------+
| *Setter*  | set_trail_sections(value) |
+-----------+---------------------------+
| *Getter*  | get_trail_sections()      |
+-----------+---------------------------+

----

.. _class_GPUParticles2D_property_visibility_rect:

- :ref:`Rect2<class_Rect2>` **visibility_rect**

+-----------+---------------------------------+
| *Default* | ``Rect2(-100, -100, 200, 200)`` |
+-----------+---------------------------------+
| *Setter*  | set_visibility_rect(value)      |
+-----------+---------------------------------+
| *Getter*  | get_visibility_rect()           |
+-----------+---------------------------------+

The :ref:`Rect2<class_Rect2>` that determines the node's region which needs to be visible on screen for the particle system to be active.

Grow the rect if particles suddenly appear/disappear when the node enters/exits the screen. The :ref:`Rect2<class_Rect2>` can be grown via code or with the **Particles → Generate Visibility Rect** editor tool.

Method Descriptions
-------------------

.. _class_GPUParticles2D_method_capture_rect:

- :ref:`Rect2<class_Rect2>` **capture_rect** **(** **)** |const|

Returns a rectangle containing the positions of all existing particles.

----

.. _class_GPUParticles2D_method_restart:

- void **restart** **(** **)**

Restarts all the existing particles.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
