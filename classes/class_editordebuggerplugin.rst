:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the EditorDebuggerPlugin.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_EditorDebuggerPlugin:

EditorDebuggerPlugin
====================

**Inherits:** :ref:`Control<class_Control>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

A base class to implement debugger plugins.

Description
-----------

All debugger plugin scripts must extend ``EditorDebuggerPlugin``. It provides functions related to editor side of debugger.

You don't need to instantiate this class. That is handled by the debugger itself. :ref:`Control<class_Control>` nodes can be added as child nodes to provide a GUI front-end for the plugin.

Do not queue_free/reparent it's instance otherwise the instance becomes unusable.

Methods
-------

+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`has_capture<class_EditorDebuggerPlugin_method_has_capture>` **(** :ref:`StringName<class_StringName>` name **)**                                                                     |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`is_breaked<class_EditorDebuggerPlugin_method_is_breaked>` **(** **)**                                                                                                                |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`is_debuggable<class_EditorDebuggerPlugin_method_is_debuggable>` **(** **)**                                                                                                          |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`is_session_active<class_EditorDebuggerPlugin_method_is_session_active>` **(** **)**                                                                                                  |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`register_message_capture<class_EditorDebuggerPlugin_method_register_message_capture>` **(** :ref:`StringName<class_StringName>` name, :ref:`Callable<class_Callable>` callable **)** |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`send_message<class_EditorDebuggerPlugin_method_send_message>` **(** :ref:`String<class_String>` message, :ref:`Array<class_Array>` data **)**                                        |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`unregister_message_capture<class_EditorDebuggerPlugin_method_unregister_message_capture>` **(** :ref:`StringName<class_StringName>` name **)**                                       |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Signals
-------

.. _class_EditorDebuggerPlugin_signal_breaked:

- **breaked** **(** :ref:`bool<class_bool>` can_debug **)**

Emitted when the game enters a break state.

----

.. _class_EditorDebuggerPlugin_signal_continued:

- **continued** **(** **)**

Emitted when the game exists a break state.

----

.. _class_EditorDebuggerPlugin_signal_started:

- **started** **(** **)**

Emitted when the debugging starts.

----

.. _class_EditorDebuggerPlugin_signal_stopped:

- **stopped** **(** **)**

Emitted when the debugging stops.

Method Descriptions
-------------------

.. _class_EditorDebuggerPlugin_method_has_capture:

- :ref:`bool<class_bool>` **has_capture** **(** :ref:`StringName<class_StringName>` name **)**

Returns ``true`` if a message capture with given name is present otherwise ``false``.

----

.. _class_EditorDebuggerPlugin_method_is_breaked:

- :ref:`bool<class_bool>` **is_breaked** **(** **)**

Returns ``true`` if the game is in break state otherwise ``false``.

----

.. _class_EditorDebuggerPlugin_method_is_debuggable:

- :ref:`bool<class_bool>` **is_debuggable** **(** **)**

Returns ``true`` if the game can be debugged otherwise ``false``.

----

.. _class_EditorDebuggerPlugin_method_is_session_active:

- :ref:`bool<class_bool>` **is_session_active** **(** **)**

Returns ``true`` if there is an instance of the game running with the attached debugger otherwise ``false``.

----

.. _class_EditorDebuggerPlugin_method_register_message_capture:

- void **register_message_capture** **(** :ref:`StringName<class_StringName>` name, :ref:`Callable<class_Callable>` callable **)**

Registers a message capture with given ``name``. If ``name`` is "my_message" then messages starting with "my_message:" will be called with the given callable.

Callable must accept a message string and a data array as argument. If the message and data are valid then callable must return ``true`` otherwise ``false``.

----

.. _class_EditorDebuggerPlugin_method_send_message:

- void **send_message** **(** :ref:`String<class_String>` message, :ref:`Array<class_Array>` data **)**

Sends a message with given ``message`` and ``data`` array.

----

.. _class_EditorDebuggerPlugin_method_unregister_message_capture:

- void **unregister_message_capture** **(** :ref:`StringName<class_StringName>` name **)**

Unregisters the message capture with given name.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
