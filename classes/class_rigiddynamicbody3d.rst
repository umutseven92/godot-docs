:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the RigidDynamicBody3D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_RigidDynamicBody3D:

RigidDynamicBody3D
==================

**Inherits:** :ref:`PhysicsBody3D<class_PhysicsBody3D>` **<** :ref:`CollisionObject3D<class_CollisionObject3D>` **<** :ref:`Node3D<class_Node3D>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`VehicleBody3D<class_VehicleBody3D>`

Physics Body which is moved by 3D physics simulation. Useful for objects that have gravity and can be pushed by other objects.

Description
-----------

This is the node that implements full 3D physics. This means that you do not control a RigidDynamicBody3D directly. Instead, you can apply forces to it (gravity, impulses, etc.), and the physics simulation will calculate the resulting movement, collision, bouncing, rotating, etc.

You can switch the body's behavior using :ref:`lock_rotation<class_RigidDynamicBody3D_property_lock_rotation>`, :ref:`freeze<class_RigidDynamicBody3D_property_freeze>`, and :ref:`freeze_mode<class_RigidDynamicBody3D_property_freeze_mode>`.

**Note:** Don't change a RigidDynamicBody3D's position every frame or very often. Sporadic changes work fine, but physics runs at a different granularity (fixed Hz) than usual rendering (process callback) and maybe even in a separate thread, so changing this from a process loop may result in strange behavior. If you need to directly affect the body's state, use :ref:`_integrate_forces<class_RigidDynamicBody3D_method__integrate_forces>`, which allows you to directly access the physics state.

If you need to override the default physics behavior, you can write a custom force integration function. See :ref:`custom_integrator<class_RigidDynamicBody3D_property_custom_integrator>`.

Tutorials
---------

- :doc:`../tutorials/physics/physics_introduction`

- `3D Truck Town Demo <https://godotengine.org/asset-library/asset/524>`__

- `3D Physics Tests Demo <https://godotengine.org/asset-library/asset/675>`__

Properties
----------

+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`float<class_float>`                                         | :ref:`angular_damp<class_RigidDynamicBody3D_property_angular_damp>`                           | ``-1.0``             |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`Vector3<class_Vector3>`                                     | :ref:`angular_velocity<class_RigidDynamicBody3D_property_angular_velocity>`                   | ``Vector3(0, 0, 0)`` |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`bool<class_bool>`                                           | :ref:`can_sleep<class_RigidDynamicBody3D_property_can_sleep>`                                 | ``true``             |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`Vector3<class_Vector3>`                                     | :ref:`center_of_mass<class_RigidDynamicBody3D_property_center_of_mass>`                       | ``Vector3(0, 0, 0)`` |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`CenterOfMassMode<enum_RigidDynamicBody3D_CenterOfMassMode>` | :ref:`center_of_mass_mode<class_RigidDynamicBody3D_property_center_of_mass_mode>`             | ``0``                |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`bool<class_bool>`                                           | :ref:`contact_monitor<class_RigidDynamicBody3D_property_contact_monitor>`                     | ``false``            |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`int<class_int>`                                             | :ref:`contacts_reported<class_RigidDynamicBody3D_property_contacts_reported>`                 | ``0``                |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`bool<class_bool>`                                           | :ref:`continuous_cd<class_RigidDynamicBody3D_property_continuous_cd>`                         | ``false``            |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`bool<class_bool>`                                           | :ref:`custom_integrator<class_RigidDynamicBody3D_property_custom_integrator>`                 | ``false``            |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`bool<class_bool>`                                           | :ref:`freeze<class_RigidDynamicBody3D_property_freeze>`                                       | ``false``            |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`FreezeMode<enum_RigidDynamicBody3D_FreezeMode>`             | :ref:`freeze_mode<class_RigidDynamicBody3D_property_freeze_mode>`                             | ``0``                |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`float<class_float>`                                         | :ref:`gravity_scale<class_RigidDynamicBody3D_property_gravity_scale>`                         | ``1.0``              |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`Vector3<class_Vector3>`                                     | :ref:`inertia<class_RigidDynamicBody3D_property_inertia>`                                     | ``Vector3(0, 0, 0)`` |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`float<class_float>`                                         | :ref:`linear_damp<class_RigidDynamicBody3D_property_linear_damp>`                             | ``-1.0``             |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`Vector3<class_Vector3>`                                     | :ref:`linear_velocity<class_RigidDynamicBody3D_property_linear_velocity>`                     | ``Vector3(0, 0, 0)`` |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`bool<class_bool>`                                           | :ref:`lock_rotation<class_RigidDynamicBody3D_property_lock_rotation>`                         | ``false``            |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`float<class_float>`                                         | :ref:`mass<class_RigidDynamicBody3D_property_mass>`                                           | ``1.0``              |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`PhysicsMaterial<class_PhysicsMaterial>`                     | :ref:`physics_material_override<class_RigidDynamicBody3D_property_physics_material_override>` |                      |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+
| :ref:`bool<class_bool>`                                           | :ref:`sleeping<class_RigidDynamicBody3D_property_sleeping>`                                   | ``false``            |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------------------+

Methods
-------

+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`_integrate_forces<class_RigidDynamicBody3D_method__integrate_forces>` **(** :ref:`PhysicsDirectBodyState3D<class_PhysicsDirectBodyState3D>` state **)** |virtual|        |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`add_central_force<class_RigidDynamicBody3D_method_add_central_force>` **(** :ref:`Vector3<class_Vector3>` force **)**                                                    |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`add_force<class_RigidDynamicBody3D_method_add_force>` **(** :ref:`Vector3<class_Vector3>` force, :ref:`Vector3<class_Vector3>` position=Vector3(0, 0, 0) **)**           |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`add_torque<class_RigidDynamicBody3D_method_add_torque>` **(** :ref:`Vector3<class_Vector3>` torque **)**                                                                 |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`apply_central_impulse<class_RigidDynamicBody3D_method_apply_central_impulse>` **(** :ref:`Vector3<class_Vector3>` impulse **)**                                          |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`apply_impulse<class_RigidDynamicBody3D_method_apply_impulse>` **(** :ref:`Vector3<class_Vector3>` impulse, :ref:`Vector3<class_Vector3>` position=Vector3(0, 0, 0) **)** |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`apply_torque_impulse<class_RigidDynamicBody3D_method_apply_torque_impulse>` **(** :ref:`Vector3<class_Vector3>` impulse **)**                                            |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>` | :ref:`get_colliding_bodies<class_RigidDynamicBody3D_method_get_colliding_bodies>` **(** **)** |const|                                                                          |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Basis<class_Basis>` | :ref:`get_inverse_inertia_tensor<class_RigidDynamicBody3D_method_get_inverse_inertia_tensor>` **(** **)** |const|                                                              |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`set_axis_velocity<class_RigidDynamicBody3D_method_set_axis_velocity>` **(** :ref:`Vector3<class_Vector3>` axis_velocity **)**                                            |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Signals
-------

.. _class_RigidDynamicBody3D_signal_body_entered:

- **body_entered** **(** :ref:`Node<class_Node>` body **)**

Emitted when a collision with another :ref:`PhysicsBody3D<class_PhysicsBody3D>` or :ref:`GridMap<class_GridMap>` occurs. Requires :ref:`contact_monitor<class_RigidDynamicBody3D_property_contact_monitor>` to be set to ``true`` and :ref:`contacts_reported<class_RigidDynamicBody3D_property_contacts_reported>` to be set high enough to detect all the collisions. :ref:`GridMap<class_GridMap>`\ s are detected if the :ref:`MeshLibrary<class_MeshLibrary>` has Collision :ref:`Shape3D<class_Shape3D>`\ s.

``body`` the :ref:`Node<class_Node>`, if it exists in the tree, of the other :ref:`PhysicsBody3D<class_PhysicsBody3D>` or :ref:`GridMap<class_GridMap>`.

----

.. _class_RigidDynamicBody3D_signal_body_exited:

- **body_exited** **(** :ref:`Node<class_Node>` body **)**

Emitted when the collision with another :ref:`PhysicsBody3D<class_PhysicsBody3D>` or :ref:`GridMap<class_GridMap>` ends. Requires :ref:`contact_monitor<class_RigidDynamicBody3D_property_contact_monitor>` to be set to ``true`` and :ref:`contacts_reported<class_RigidDynamicBody3D_property_contacts_reported>` to be set high enough to detect all the collisions. :ref:`GridMap<class_GridMap>`\ s are detected if the :ref:`MeshLibrary<class_MeshLibrary>` has Collision :ref:`Shape3D<class_Shape3D>`\ s.

``body`` the :ref:`Node<class_Node>`, if it exists in the tree, of the other :ref:`PhysicsBody3D<class_PhysicsBody3D>` or :ref:`GridMap<class_GridMap>`.

----

.. _class_RigidDynamicBody3D_signal_body_shape_entered:

- **body_shape_entered** **(** :ref:`RID<class_RID>` body_rid, :ref:`Node<class_Node>` body, :ref:`int<class_int>` body_shape, :ref:`int<class_int>` local_shape **)**

Emitted when one of this RigidDynamicBody3D's :ref:`Shape3D<class_Shape3D>`\ s collides with another :ref:`PhysicsBody3D<class_PhysicsBody3D>` or :ref:`GridMap<class_GridMap>`'s :ref:`Shape3D<class_Shape3D>`\ s. Requires :ref:`contact_monitor<class_RigidDynamicBody3D_property_contact_monitor>` to be set to ``true`` and :ref:`contacts_reported<class_RigidDynamicBody3D_property_contacts_reported>` to be set high enough to detect all the collisions. :ref:`GridMap<class_GridMap>`\ s are detected if the :ref:`MeshLibrary<class_MeshLibrary>` has Collision :ref:`Shape3D<class_Shape3D>`\ s.

``body_id`` the :ref:`RID<class_RID>` of the other :ref:`PhysicsBody3D<class_PhysicsBody3D>` or :ref:`MeshLibrary<class_MeshLibrary>`'s :ref:`CollisionObject3D<class_CollisionObject3D>` used by the :ref:`PhysicsServer3D<class_PhysicsServer3D>`.

``body`` the :ref:`Node<class_Node>`, if it exists in the tree, of the other :ref:`PhysicsBody3D<class_PhysicsBody3D>` or :ref:`GridMap<class_GridMap>`.

``body_shape`` the index of the :ref:`Shape3D<class_Shape3D>` of the other :ref:`PhysicsBody3D<class_PhysicsBody3D>` or :ref:`GridMap<class_GridMap>` used by the :ref:`PhysicsServer3D<class_PhysicsServer3D>`.

``local_shape`` the index of the :ref:`Shape3D<class_Shape3D>` of this RigidDynamicBody3D used by the :ref:`PhysicsServer3D<class_PhysicsServer3D>`.

**Note:** Bullet physics cannot identify the shape index when using a :ref:`ConcavePolygonShape3D<class_ConcavePolygonShape3D>`. Don't use multiple :ref:`CollisionShape3D<class_CollisionShape3D>`\ s when using a :ref:`ConcavePolygonShape3D<class_ConcavePolygonShape3D>` with Bullet physics if you need shape indices.

----

.. _class_RigidDynamicBody3D_signal_body_shape_exited:

- **body_shape_exited** **(** :ref:`RID<class_RID>` body_rid, :ref:`Node<class_Node>` body, :ref:`int<class_int>` body_shape, :ref:`int<class_int>` local_shape **)**

Emitted when the collision between one of this RigidDynamicBody3D's :ref:`Shape3D<class_Shape3D>`\ s and another :ref:`PhysicsBody3D<class_PhysicsBody3D>` or :ref:`GridMap<class_GridMap>`'s :ref:`Shape3D<class_Shape3D>`\ s ends. Requires :ref:`contact_monitor<class_RigidDynamicBody3D_property_contact_monitor>` to be set to ``true`` and :ref:`contacts_reported<class_RigidDynamicBody3D_property_contacts_reported>` to be set high enough to detect all the collisions. :ref:`GridMap<class_GridMap>`\ s are detected if the :ref:`MeshLibrary<class_MeshLibrary>` has Collision :ref:`Shape3D<class_Shape3D>`\ s.

``body_id`` the :ref:`RID<class_RID>` of the other :ref:`PhysicsBody3D<class_PhysicsBody3D>` or :ref:`MeshLibrary<class_MeshLibrary>`'s :ref:`CollisionObject3D<class_CollisionObject3D>` used by the :ref:`PhysicsServer3D<class_PhysicsServer3D>`. :ref:`GridMap<class_GridMap>`\ s are detected if the Meshes have :ref:`Shape3D<class_Shape3D>`\ s.

``body`` the :ref:`Node<class_Node>`, if it exists in the tree, of the other :ref:`PhysicsBody3D<class_PhysicsBody3D>` or :ref:`GridMap<class_GridMap>`.

``body_shape`` the index of the :ref:`Shape3D<class_Shape3D>` of the other :ref:`PhysicsBody3D<class_PhysicsBody3D>` or :ref:`GridMap<class_GridMap>` used by the :ref:`PhysicsServer3D<class_PhysicsServer3D>`.

``local_shape`` the index of the :ref:`Shape3D<class_Shape3D>` of this RigidDynamicBody3D used by the :ref:`PhysicsServer3D<class_PhysicsServer3D>`.

**Note:** Bullet physics cannot identify the shape index when using a :ref:`ConcavePolygonShape3D<class_ConcavePolygonShape3D>`. Don't use multiple :ref:`CollisionShape3D<class_CollisionShape3D>`\ s when using a :ref:`ConcavePolygonShape3D<class_ConcavePolygonShape3D>` with Bullet physics if you need shape indices.

----

.. _class_RigidDynamicBody3D_signal_sleeping_state_changed:

- **sleeping_state_changed** **(** **)**

Emitted when the physics engine changes the body's sleeping state.

**Note:** Changing the value :ref:`sleeping<class_RigidDynamicBody3D_property_sleeping>` will not trigger this signal. It is only emitted if the sleeping state is changed by the physics engine or ``emit_signal("sleeping_state_changed")`` is used.

Enumerations
------------

.. _enum_RigidDynamicBody3D_FreezeMode:

.. _class_RigidDynamicBody3D_constant_FREEZE_MODE_STATIC:

.. _class_RigidDynamicBody3D_constant_FREEZE_MODE_KINEMATIC:

enum **FreezeMode**:

- **FREEZE_MODE_STATIC** = **0** --- Static body freeze mode (default). The body is not affected by gravity and forces. It can be only moved by user code and doesn't collide with other bodies along its path.

- **FREEZE_MODE_KINEMATIC** = **1** --- Kinematic body freeze mode. Similar to :ref:`FREEZE_MODE_STATIC<class_RigidDynamicBody3D_constant_FREEZE_MODE_STATIC>`, but collides with other bodies along its path when moved. Useful for a frozen body that needs to be animated.

----

.. _enum_RigidDynamicBody3D_CenterOfMassMode:

.. _class_RigidDynamicBody3D_constant_CENTER_OF_MASS_MODE_AUTO:

.. _class_RigidDynamicBody3D_constant_CENTER_OF_MASS_MODE_CUSTOM:

enum **CenterOfMassMode**:

- **CENTER_OF_MASS_MODE_AUTO** = **0** --- In this mode, the body's center of mass is calculated automatically based on its shapes.

- **CENTER_OF_MASS_MODE_CUSTOM** = **1** --- In this mode, the body's center of mass is set through :ref:`center_of_mass<class_RigidDynamicBody3D_property_center_of_mass>`. Defaults to the body's origin position.

Property Descriptions
---------------------

.. _class_RigidDynamicBody3D_property_angular_damp:

- :ref:`float<class_float>` **angular_damp**

+-----------+-------------------------+
| *Default* | ``-1.0``                |
+-----------+-------------------------+
| *Setter*  | set_angular_damp(value) |
+-----------+-------------------------+
| *Getter*  | get_angular_damp()      |
+-----------+-------------------------+

Damps RigidDynamicBody3D's rotational forces.

See :ref:`ProjectSettings.physics/3d/default_angular_damp<class_ProjectSettings_property_physics/3d/default_angular_damp>` for more details about damping.

----

.. _class_RigidDynamicBody3D_property_angular_velocity:

- :ref:`Vector3<class_Vector3>` **angular_velocity**

+-----------+-----------------------------+
| *Default* | ``Vector3(0, 0, 0)``        |
+-----------+-----------------------------+
| *Setter*  | set_angular_velocity(value) |
+-----------+-----------------------------+
| *Getter*  | get_angular_velocity()      |
+-----------+-----------------------------+

RigidDynamicBody3D's rotational velocity.

----

.. _class_RigidDynamicBody3D_property_can_sleep:

- :ref:`bool<class_bool>` **can_sleep**

+-----------+----------------------+
| *Default* | ``true``             |
+-----------+----------------------+
| *Setter*  | set_can_sleep(value) |
+-----------+----------------------+
| *Getter*  | is_able_to_sleep()   |
+-----------+----------------------+

If ``true``, the body can enter sleep mode when there is no movement. See :ref:`sleeping<class_RigidDynamicBody3D_property_sleeping>`.

----

.. _class_RigidDynamicBody3D_property_center_of_mass:

- :ref:`Vector3<class_Vector3>` **center_of_mass**

+-----------+---------------------------+
| *Default* | ``Vector3(0, 0, 0)``      |
+-----------+---------------------------+
| *Setter*  | set_center_of_mass(value) |
+-----------+---------------------------+
| *Getter*  | get_center_of_mass()      |
+-----------+---------------------------+

The body's custom center of mass, relative to the body's origin position, when :ref:`center_of_mass_mode<class_RigidDynamicBody3D_property_center_of_mass_mode>` is set to :ref:`CENTER_OF_MASS_MODE_CUSTOM<class_RigidDynamicBody3D_constant_CENTER_OF_MASS_MODE_CUSTOM>`. This is the balanced point of the body, where applied forces only cause linear acceleration. Applying forces outside of the center of mass causes angular acceleration.

When :ref:`center_of_mass_mode<class_RigidDynamicBody3D_property_center_of_mass_mode>` is set to :ref:`CENTER_OF_MASS_MODE_AUTO<class_RigidDynamicBody3D_constant_CENTER_OF_MASS_MODE_AUTO>` (default value), the center of mass is automatically computed.

----

.. _class_RigidDynamicBody3D_property_center_of_mass_mode:

- :ref:`CenterOfMassMode<enum_RigidDynamicBody3D_CenterOfMassMode>` **center_of_mass_mode**

+-----------+--------------------------------+
| *Default* | ``0``                          |
+-----------+--------------------------------+
| *Setter*  | set_center_of_mass_mode(value) |
+-----------+--------------------------------+
| *Getter*  | get_center_of_mass_mode()      |
+-----------+--------------------------------+

Defines the way the body's center of mass is set. See :ref:`CenterOfMassMode<enum_RigidDynamicBody3D_CenterOfMassMode>` for possible values.

----

.. _class_RigidDynamicBody3D_property_contact_monitor:

- :ref:`bool<class_bool>` **contact_monitor**

+-----------+------------------------------+
| *Default* | ``false``                    |
+-----------+------------------------------+
| *Setter*  | set_contact_monitor(value)   |
+-----------+------------------------------+
| *Getter*  | is_contact_monitor_enabled() |
+-----------+------------------------------+

If ``true``, the RigidDynamicBody3D will emit signals when it collides with another RigidDynamicBody3D. See also :ref:`contacts_reported<class_RigidDynamicBody3D_property_contacts_reported>`.

----

.. _class_RigidDynamicBody3D_property_contacts_reported:

- :ref:`int<class_int>` **contacts_reported**

+-----------+----------------------------------+
| *Default* | ``0``                            |
+-----------+----------------------------------+
| *Setter*  | set_max_contacts_reported(value) |
+-----------+----------------------------------+
| *Getter*  | get_max_contacts_reported()      |
+-----------+----------------------------------+

The maximum number of contacts that will be recorded. Requires :ref:`contact_monitor<class_RigidDynamicBody3D_property_contact_monitor>` to be set to ``true``.

**Note:** The number of contacts is different from the number of collisions. Collisions between parallel edges will result in two contacts (one at each end), and collisions between parallel faces will result in four contacts (one at each corner).

----

.. _class_RigidDynamicBody3D_property_continuous_cd:

- :ref:`bool<class_bool>` **continuous_cd**

+-----------+-----------------------------------------------+
| *Default* | ``false``                                     |
+-----------+-----------------------------------------------+
| *Setter*  | set_use_continuous_collision_detection(value) |
+-----------+-----------------------------------------------+
| *Getter*  | is_using_continuous_collision_detection()     |
+-----------+-----------------------------------------------+

If ``true``, continuous collision detection is used.

Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. Continuous collision detection is more precise, and misses fewer impacts by small, fast-moving objects. Not using continuous collision detection is faster to compute, but can miss small, fast-moving objects.

----

.. _class_RigidDynamicBody3D_property_custom_integrator:

- :ref:`bool<class_bool>` **custom_integrator**

+-----------+----------------------------------+
| *Default* | ``false``                        |
+-----------+----------------------------------+
| *Setter*  | set_use_custom_integrator(value) |
+-----------+----------------------------------+
| *Getter*  | is_using_custom_integrator()     |
+-----------+----------------------------------+

If ``true``, internal force integration will be disabled (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the :ref:`_integrate_forces<class_RigidDynamicBody3D_method__integrate_forces>` function, if defined.

----

.. _class_RigidDynamicBody3D_property_freeze:

- :ref:`bool<class_bool>` **freeze**

+-----------+---------------------------+
| *Default* | ``false``                 |
+-----------+---------------------------+
| *Setter*  | set_freeze_enabled(value) |
+-----------+---------------------------+
| *Getter*  | is_freeze_enabled()       |
+-----------+---------------------------+

If ``true``, the body is frozen. Gravity and forces are not applied anymore.

See :ref:`freeze_mode<class_RigidDynamicBody3D_property_freeze_mode>` to set the body's behavior when frozen.

For a body that is always frozen, use :ref:`StaticBody3D<class_StaticBody3D>` or :ref:`AnimatableBody3D<class_AnimatableBody3D>` instead.

----

.. _class_RigidDynamicBody3D_property_freeze_mode:

- :ref:`FreezeMode<enum_RigidDynamicBody3D_FreezeMode>` **freeze_mode**

+-----------+------------------------+
| *Default* | ``0``                  |
+-----------+------------------------+
| *Setter*  | set_freeze_mode(value) |
+-----------+------------------------+
| *Getter*  | get_freeze_mode()      |
+-----------+------------------------+

The body's freeze mode. Can be used to set the body's behavior when :ref:`freeze<class_RigidDynamicBody3D_property_freeze>` is enabled. See :ref:`FreezeMode<enum_RigidDynamicBody3D_FreezeMode>` for possible values.

For a body that is always frozen, use :ref:`StaticBody3D<class_StaticBody3D>` or :ref:`AnimatableBody3D<class_AnimatableBody3D>` instead.

----

.. _class_RigidDynamicBody3D_property_gravity_scale:

- :ref:`float<class_float>` **gravity_scale**

+-----------+--------------------------+
| *Default* | ``1.0``                  |
+-----------+--------------------------+
| *Setter*  | set_gravity_scale(value) |
+-----------+--------------------------+
| *Getter*  | get_gravity_scale()      |
+-----------+--------------------------+

This is multiplied by the global 3D gravity setting found in **Project > Project Settings > Physics > 3d** to produce RigidDynamicBody3D's gravity. For example, a value of 1 will be normal gravity, 2 will apply double gravity, and 0.5 will apply half gravity to this object.

----

.. _class_RigidDynamicBody3D_property_inertia:

- :ref:`Vector3<class_Vector3>` **inertia**

+-----------+----------------------+
| *Default* | ``Vector3(0, 0, 0)`` |
+-----------+----------------------+
| *Setter*  | set_inertia(value)   |
+-----------+----------------------+
| *Getter*  | get_inertia()        |
+-----------+----------------------+

The body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body on each axis. The moment of inertia is usually computed automatically from the mass and the shapes, but this property allows you to set a custom value.

If set to ``Vector3.ZERO``, inertia is automatically computed (default value).

----

.. _class_RigidDynamicBody3D_property_linear_damp:

- :ref:`float<class_float>` **linear_damp**

+-----------+------------------------+
| *Default* | ``-1.0``               |
+-----------+------------------------+
| *Setter*  | set_linear_damp(value) |
+-----------+------------------------+
| *Getter*  | get_linear_damp()      |
+-----------+------------------------+

The body's linear damp. Cannot be less than -1.0. If this value is different from -1.0, any linear damp derived from the world or areas will be overridden.

See :ref:`ProjectSettings.physics/3d/default_linear_damp<class_ProjectSettings_property_physics/3d/default_linear_damp>` for more details about damping.

----

.. _class_RigidDynamicBody3D_property_linear_velocity:

- :ref:`Vector3<class_Vector3>` **linear_velocity**

+-----------+----------------------------+
| *Default* | ``Vector3(0, 0, 0)``       |
+-----------+----------------------------+
| *Setter*  | set_linear_velocity(value) |
+-----------+----------------------------+
| *Getter*  | get_linear_velocity()      |
+-----------+----------------------------+

The body's linear velocity. Can be used sporadically, but **don't set this every frame**, because physics may run in another thread and runs at a different granularity. Use :ref:`_integrate_forces<class_RigidDynamicBody3D_method__integrate_forces>` as your process loop for precise control of the body state.

----

.. _class_RigidDynamicBody3D_property_lock_rotation:

- :ref:`bool<class_bool>` **lock_rotation**

+-----------+----------------------------------+
| *Default* | ``false``                        |
+-----------+----------------------------------+
| *Setter*  | set_lock_rotation_enabled(value) |
+-----------+----------------------------------+
| *Getter*  | is_lock_rotation_enabled()       |
+-----------+----------------------------------+

If ``true``, the body cannot rotate. Gravity and forces only apply linear movement.

----

.. _class_RigidDynamicBody3D_property_mass:

- :ref:`float<class_float>` **mass**

+-----------+-----------------+
| *Default* | ``1.0``         |
+-----------+-----------------+
| *Setter*  | set_mass(value) |
+-----------+-----------------+
| *Getter*  | get_mass()      |
+-----------+-----------------+

The body's mass.

----

.. _class_RigidDynamicBody3D_property_physics_material_override:

- :ref:`PhysicsMaterial<class_PhysicsMaterial>` **physics_material_override**

+----------+--------------------------------------+
| *Setter* | set_physics_material_override(value) |
+----------+--------------------------------------+
| *Getter* | get_physics_material_override()      |
+----------+--------------------------------------+

The physics material override for the body.

If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one.

----

.. _class_RigidDynamicBody3D_property_sleeping:

- :ref:`bool<class_bool>` **sleeping**

+-----------+---------------------+
| *Default* | ``false``           |
+-----------+---------------------+
| *Setter*  | set_sleeping(value) |
+-----------+---------------------+
| *Getter*  | is_sleeping()       |
+-----------+---------------------+

If ``true``, the body will not move and will not calculate forces until woken up by another body through, for example, a collision, or by using the :ref:`apply_impulse<class_RigidDynamicBody3D_method_apply_impulse>` or :ref:`add_force<class_RigidDynamicBody3D_method_add_force>` methods.

Method Descriptions
-------------------

.. _class_RigidDynamicBody3D_method__integrate_forces:

- void **_integrate_forces** **(** :ref:`PhysicsDirectBodyState3D<class_PhysicsDirectBodyState3D>` state **)** |virtual|

Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default, it works in addition to the usual physics behavior, but the :ref:`custom_integrator<class_RigidDynamicBody3D_property_custom_integrator>` property allows you to disable the default behavior and do fully custom force integration for a body.

----

.. _class_RigidDynamicBody3D_method_add_central_force:

- void **add_central_force** **(** :ref:`Vector3<class_Vector3>` force **)**

Adds a constant directional force (i.e. acceleration) without affecting rotation.

This is equivalent to ``add_force(force, Vector3(0,0,0))``.

----

.. _class_RigidDynamicBody3D_method_add_force:

- void **add_force** **(** :ref:`Vector3<class_Vector3>` force, :ref:`Vector3<class_Vector3>` position=Vector3(0, 0, 0) **)**

Adds a constant directional force (i.e. acceleration).

The position uses the rotation of the global coordinate system, but is centered at the object's origin.

----

.. _class_RigidDynamicBody3D_method_add_torque:

- void **add_torque** **(** :ref:`Vector3<class_Vector3>` torque **)**

Adds a constant rotational force (i.e. a motor) without affecting position.

----

.. _class_RigidDynamicBody3D_method_apply_central_impulse:

- void **apply_central_impulse** **(** :ref:`Vector3<class_Vector3>` impulse **)**

Applies a directional impulse without affecting rotation.

This is equivalent to ``apply_impulse(Vector3(0,0,0), impulse)``.

----

.. _class_RigidDynamicBody3D_method_apply_impulse:

- void **apply_impulse** **(** :ref:`Vector3<class_Vector3>` impulse, :ref:`Vector3<class_Vector3>` position=Vector3(0, 0, 0) **)**

Applies a positioned impulse to the body. An impulse is time independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason it should only be used when simulating one-time impacts. The position uses the rotation of the global coordinate system, but is centered at the object's origin.

----

.. _class_RigidDynamicBody3D_method_apply_torque_impulse:

- void **apply_torque_impulse** **(** :ref:`Vector3<class_Vector3>` impulse **)**

Applies a torque impulse which will be affected by the body mass and shape. This will rotate the body around the ``impulse`` vector passed.

----

.. _class_RigidDynamicBody3D_method_get_colliding_bodies:

- :ref:`Array<class_Array>` **get_colliding_bodies** **(** **)** |const|

Returns a list of the bodies colliding with this one. Requires :ref:`contact_monitor<class_RigidDynamicBody3D_property_contact_monitor>` to be set to ``true`` and :ref:`contacts_reported<class_RigidDynamicBody3D_property_contacts_reported>` to be set high enough to detect all the collisions.

**Note:** The result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead.

----

.. _class_RigidDynamicBody3D_method_get_inverse_inertia_tensor:

- :ref:`Basis<class_Basis>` **get_inverse_inertia_tensor** **(** **)** |const|

Returns the inverse inertia tensor basis. This is used to calculate the angular acceleration resulting from a torque applied to the ``RigidDynamicBody3D``.

----

.. _class_RigidDynamicBody3D_method_set_axis_velocity:

- void **set_axis_velocity** **(** :ref:`Vector3<class_Vector3>` axis_velocity **)**

Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
