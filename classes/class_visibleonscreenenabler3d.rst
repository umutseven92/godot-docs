:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the VisibleOnScreenEnabler3D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_VisibleOnScreenEnabler3D:

VisibleOnScreenEnabler3D
========================

**Inherits:** :ref:`VisibleOnScreenNotifier3D<class_VisibleOnScreenNotifier3D>` **<** :ref:`VisualInstance3D<class_VisualInstance3D>` **<** :ref:`Node3D<class_Node3D>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

Enables certain nodes only when approximately visible.

Description
-----------

The VisibleOnScreenEnabler3D will disable :ref:`RigidDynamicBody3D<class_RigidDynamicBody3D>` and :ref:`AnimationPlayer<class_AnimationPlayer>` nodes when they are not visible. It will only affect other nodes within the same scene as the VisibleOnScreenEnabler3D itself.

If you just want to receive notifications, use :ref:`VisibleOnScreenNotifier3D<class_VisibleOnScreenNotifier3D>` instead.

**Note:** VisibleOnScreenEnabler3D uses an approximate heuristic for performance reasons. It doesn't take walls and other occlusion into account. The heuristic is an implementation detail and may change in future versions. If you need precise visibility checking, use another method such as adding an :ref:`Area3D<class_Area3D>` node as a child of a :ref:`Camera3D<class_Camera3D>` node and/or :ref:`Vector3.dot<class_Vector3_method_dot>`.

**Note:** VisibleOnScreenEnabler3D will not affect nodes added after scene initialization.

Properties
----------

+-------------------------------------------------------------+-----------------------------------------------------------------------------------+--------------------+
| :ref:`EnableMode<enum_VisibleOnScreenEnabler3D_EnableMode>` | :ref:`enable_mode<class_VisibleOnScreenEnabler3D_property_enable_mode>`           | ``0``              |
+-------------------------------------------------------------+-----------------------------------------------------------------------------------+--------------------+
| :ref:`NodePath<class_NodePath>`                             | :ref:`enable_node_path<class_VisibleOnScreenEnabler3D_property_enable_node_path>` | ``NodePath("..")`` |
+-------------------------------------------------------------+-----------------------------------------------------------------------------------+--------------------+

Enumerations
------------

.. _enum_VisibleOnScreenEnabler3D_EnableMode:

.. _class_VisibleOnScreenEnabler3D_constant_ENABLE_MODE_INHERIT:

.. _class_VisibleOnScreenEnabler3D_constant_ENABLE_MODE_ALWAYS:

.. _class_VisibleOnScreenEnabler3D_constant_ENABLE_MODE_WHEN_PAUSED:

enum **EnableMode**:

- **ENABLE_MODE_INHERIT** = **0**

- **ENABLE_MODE_ALWAYS** = **1**

- **ENABLE_MODE_WHEN_PAUSED** = **2**

Property Descriptions
---------------------

.. _class_VisibleOnScreenEnabler3D_property_enable_mode:

- :ref:`EnableMode<enum_VisibleOnScreenEnabler3D_EnableMode>` **enable_mode**

+-----------+------------------------+
| *Default* | ``0``                  |
+-----------+------------------------+
| *Setter*  | set_enable_mode(value) |
+-----------+------------------------+
| *Getter*  | get_enable_mode()      |
+-----------+------------------------+

----

.. _class_VisibleOnScreenEnabler3D_property_enable_node_path:

- :ref:`NodePath<class_NodePath>` **enable_node_path**

+-----------+-----------------------------+
| *Default* | ``NodePath("..")``          |
+-----------+-----------------------------+
| *Setter*  | set_enable_node_path(value) |
+-----------+-----------------------------+
| *Getter*  | get_enable_node_path()      |
+-----------+-----------------------------+

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
