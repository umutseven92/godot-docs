:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the GPUParticles3D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_GPUParticles3D:

GPUParticles3D
==============

**Inherits:** :ref:`GeometryInstance3D<class_GeometryInstance3D>` **<** :ref:`VisualInstance3D<class_VisualInstance3D>` **<** :ref:`Node3D<class_Node3D>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

3D particle emitter.

Description
-----------

3D particle node used to create a variety of particle systems and effects. ``GPUParticles3D`` features an emitter that generates some number of particles at a given rate.

Use the ``process_material`` property to add a :ref:`ParticlesMaterial<class_ParticlesMaterial>` to configure particle appearance and behavior. Alternatively, you can add a :ref:`ShaderMaterial<class_ShaderMaterial>` which will be applied to all particles.

Tutorials
---------

- :doc:`../tutorials/3d/vertex_animation/controlling_thousands_of_fish`

- `Third Person Shooter Demo <https://godotengine.org/asset-library/asset/678>`__

Properties
----------

+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`int<class_int>`                                     | :ref:`amount<class_GPUParticles3D_property_amount>`                           | ``8``                         |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`float<class_float>`                                 | :ref:`collision_base_size<class_GPUParticles3D_property_collision_base_size>` | ``0.01``                      |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`DrawOrder<enum_GPUParticles3D_DrawOrder>`           | :ref:`draw_order<class_GPUParticles3D_property_draw_order>`                   | ``0``                         |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`Mesh<class_Mesh>`                                   | :ref:`draw_pass_1<class_GPUParticles3D_property_draw_pass_1>`                 |                               |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`Mesh<class_Mesh>`                                   | :ref:`draw_pass_2<class_GPUParticles3D_property_draw_pass_2>`                 |                               |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`Mesh<class_Mesh>`                                   | :ref:`draw_pass_3<class_GPUParticles3D_property_draw_pass_3>`                 |                               |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`Mesh<class_Mesh>`                                   | :ref:`draw_pass_4<class_GPUParticles3D_property_draw_pass_4>`                 |                               |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`int<class_int>`                                     | :ref:`draw_passes<class_GPUParticles3D_property_draw_passes>`                 | ``1``                         |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`Skin<class_Skin>`                                   | :ref:`draw_skin<class_GPUParticles3D_property_draw_skin>`                     |                               |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`emitting<class_GPUParticles3D_property_emitting>`                       | ``true``                      |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`float<class_float>`                                 | :ref:`explosiveness<class_GPUParticles3D_property_explosiveness>`             | ``0.0``                       |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`int<class_int>`                                     | :ref:`fixed_fps<class_GPUParticles3D_property_fixed_fps>`                     | ``30``                        |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`fract_delta<class_GPUParticles3D_property_fract_delta>`                 | ``true``                      |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`interpolate<class_GPUParticles3D_property_interpolate>`                 | ``true``                      |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`float<class_float>`                                 | :ref:`lifetime<class_GPUParticles3D_property_lifetime>`                       | ``1.0``                       |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`local_coords<class_GPUParticles3D_property_local_coords>`               | ``true``                      |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`one_shot<class_GPUParticles3D_property_one_shot>`                       | ``false``                     |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`float<class_float>`                                 | :ref:`preprocess<class_GPUParticles3D_property_preprocess>`                   | ``0.0``                       |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`Material<class_Material>`                           | :ref:`process_material<class_GPUParticles3D_property_process_material>`       |                               |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`float<class_float>`                                 | :ref:`randomness<class_GPUParticles3D_property_randomness>`                   | ``0.0``                       |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`float<class_float>`                                 | :ref:`speed_scale<class_GPUParticles3D_property_speed_scale>`                 | ``1.0``                       |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`NodePath<class_NodePath>`                           | :ref:`sub_emitter<class_GPUParticles3D_property_sub_emitter>`                 | ``NodePath("")``              |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`trail_enabled<class_GPUParticles3D_property_trail_enabled>`             | ``false``                     |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`float<class_float>`                                 | :ref:`trail_length_secs<class_GPUParticles3D_property_trail_length_secs>`     | ``0.3``                       |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`TransformAlign<enum_GPUParticles3D_TransformAlign>` | :ref:`transform_align<class_GPUParticles3D_property_transform_align>`         | ``0``                         |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+
| :ref:`AABB<class_AABB>`                                   | :ref:`visibility_aabb<class_GPUParticles3D_property_visibility_aabb>`         | ``AABB(-4, -4, -4, 8, 8, 8)`` |
+-----------------------------------------------------------+-------------------------------------------------------------------------------+-------------------------------+

Methods
-------

+-------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`AABB<class_AABB>` | :ref:`capture_aabb<class_GPUParticles3D_method_capture_aabb>` **(** **)** |const|                                                                                                                                                                               |
+-------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`emit_particle<class_GPUParticles3D_method_emit_particle>` **(** :ref:`Transform3D<class_Transform3D>` xform, :ref:`Vector3<class_Vector3>` velocity, :ref:`Color<class_Color>` color, :ref:`Color<class_Color>` custom, :ref:`int<class_int>` flags **)** |
+-------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Mesh<class_Mesh>` | :ref:`get_draw_pass_mesh<class_GPUParticles3D_method_get_draw_pass_mesh>` **(** :ref:`int<class_int>` pass **)** |const|                                                                                                                                        |
+-------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`restart<class_GPUParticles3D_method_restart>` **(** **)**                                                                                                                                                                                                 |
+-------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`set_draw_pass_mesh<class_GPUParticles3D_method_set_draw_pass_mesh>` **(** :ref:`int<class_int>` pass, :ref:`Mesh<class_Mesh>` mesh **)**                                                                                                                  |
+-------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumerations
------------

.. _enum_GPUParticles3D_DrawOrder:

.. _class_GPUParticles3D_constant_DRAW_ORDER_INDEX:

.. _class_GPUParticles3D_constant_DRAW_ORDER_LIFETIME:

.. _class_GPUParticles3D_constant_DRAW_ORDER_REVERSE_LIFETIME:

.. _class_GPUParticles3D_constant_DRAW_ORDER_VIEW_DEPTH:

enum **DrawOrder**:

- **DRAW_ORDER_INDEX** = **0** --- Particles are drawn in the order emitted.

- **DRAW_ORDER_LIFETIME** = **1** --- Particles are drawn in order of remaining lifetime.

- **DRAW_ORDER_REVERSE_LIFETIME** = **2**

- **DRAW_ORDER_VIEW_DEPTH** = **3** --- Particles are drawn in order of depth.

----

.. _enum_GPUParticles3D_EmitFlags:

.. _class_GPUParticles3D_constant_EMIT_FLAG_POSITION:

.. _class_GPUParticles3D_constant_EMIT_FLAG_ROTATION_SCALE:

.. _class_GPUParticles3D_constant_EMIT_FLAG_VELOCITY:

.. _class_GPUParticles3D_constant_EMIT_FLAG_COLOR:

.. _class_GPUParticles3D_constant_EMIT_FLAG_CUSTOM:

enum **EmitFlags**:

- **EMIT_FLAG_POSITION** = **1**

- **EMIT_FLAG_ROTATION_SCALE** = **2**

- **EMIT_FLAG_VELOCITY** = **4**

- **EMIT_FLAG_COLOR** = **8**

- **EMIT_FLAG_CUSTOM** = **16**

----

.. _enum_GPUParticles3D_TransformAlign:

.. _class_GPUParticles3D_constant_TRANSFORM_ALIGN_DISABLED:

.. _class_GPUParticles3D_constant_TRANSFORM_ALIGN_Z_BILLBOARD:

.. _class_GPUParticles3D_constant_TRANSFORM_ALIGN_Y_TO_VELOCITY:

.. _class_GPUParticles3D_constant_TRANSFORM_ALIGN_Z_BILLBOARD_Y_TO_VELOCITY:

enum **TransformAlign**:

- **TRANSFORM_ALIGN_DISABLED** = **0**

- **TRANSFORM_ALIGN_Z_BILLBOARD** = **1**

- **TRANSFORM_ALIGN_Y_TO_VELOCITY** = **2**

- **TRANSFORM_ALIGN_Z_BILLBOARD_Y_TO_VELOCITY** = **3**

Constants
---------

.. _class_GPUParticles3D_constant_MAX_DRAW_PASSES:

- **MAX_DRAW_PASSES** = **4** --- Maximum number of draw passes supported.

Property Descriptions
---------------------

.. _class_GPUParticles3D_property_amount:

- :ref:`int<class_int>` **amount**

+-----------+-------------------+
| *Default* | ``8``             |
+-----------+-------------------+
| *Setter*  | set_amount(value) |
+-----------+-------------------+
| *Getter*  | get_amount()      |
+-----------+-------------------+

Number of particles to emit.

----

.. _class_GPUParticles3D_property_collision_base_size:

- :ref:`float<class_float>` **collision_base_size**

+-----------+--------------------------------+
| *Default* | ``0.01``                       |
+-----------+--------------------------------+
| *Setter*  | set_collision_base_size(value) |
+-----------+--------------------------------+
| *Getter*  | get_collision_base_size()      |
+-----------+--------------------------------+

----

.. _class_GPUParticles3D_property_draw_order:

- :ref:`DrawOrder<enum_GPUParticles3D_DrawOrder>` **draw_order**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_draw_order(value) |
+-----------+-----------------------+
| *Getter*  | get_draw_order()      |
+-----------+-----------------------+

Particle draw order. Uses :ref:`DrawOrder<enum_GPUParticles3D_DrawOrder>` values.

----

.. _class_GPUParticles3D_property_draw_pass_1:

- :ref:`Mesh<class_Mesh>` **draw_pass_1**

+----------+---------------------------+
| *Setter* | set_draw_pass_mesh(value) |
+----------+---------------------------+
| *Getter* | get_draw_pass_mesh()      |
+----------+---------------------------+

:ref:`Mesh<class_Mesh>` that is drawn for the first draw pass.

----

.. _class_GPUParticles3D_property_draw_pass_2:

- :ref:`Mesh<class_Mesh>` **draw_pass_2**

+----------+---------------------------+
| *Setter* | set_draw_pass_mesh(value) |
+----------+---------------------------+
| *Getter* | get_draw_pass_mesh()      |
+----------+---------------------------+

:ref:`Mesh<class_Mesh>` that is drawn for the second draw pass.

----

.. _class_GPUParticles3D_property_draw_pass_3:

- :ref:`Mesh<class_Mesh>` **draw_pass_3**

+----------+---------------------------+
| *Setter* | set_draw_pass_mesh(value) |
+----------+---------------------------+
| *Getter* | get_draw_pass_mesh()      |
+----------+---------------------------+

:ref:`Mesh<class_Mesh>` that is drawn for the third draw pass.

----

.. _class_GPUParticles3D_property_draw_pass_4:

- :ref:`Mesh<class_Mesh>` **draw_pass_4**

+----------+---------------------------+
| *Setter* | set_draw_pass_mesh(value) |
+----------+---------------------------+
| *Getter* | get_draw_pass_mesh()      |
+----------+---------------------------+

:ref:`Mesh<class_Mesh>` that is drawn for the fourth draw pass.

----

.. _class_GPUParticles3D_property_draw_passes:

- :ref:`int<class_int>` **draw_passes**

+-----------+------------------------+
| *Default* | ``1``                  |
+-----------+------------------------+
| *Setter*  | set_draw_passes(value) |
+-----------+------------------------+
| *Getter*  | get_draw_passes()      |
+-----------+------------------------+

The number of draw passes when rendering particles.

----

.. _class_GPUParticles3D_property_draw_skin:

- :ref:`Skin<class_Skin>` **draw_skin**

+----------+-----------------+
| *Setter* | set_skin(value) |
+----------+-----------------+
| *Getter* | get_skin()      |
+----------+-----------------+

----

.. _class_GPUParticles3D_property_emitting:

- :ref:`bool<class_bool>` **emitting**

+-----------+---------------------+
| *Default* | ``true``            |
+-----------+---------------------+
| *Setter*  | set_emitting(value) |
+-----------+---------------------+
| *Getter*  | is_emitting()       |
+-----------+---------------------+

If ``true``, particles are being emitted.

----

.. _class_GPUParticles3D_property_explosiveness:

- :ref:`float<class_float>` **explosiveness**

+-----------+--------------------------------+
| *Default* | ``0.0``                        |
+-----------+--------------------------------+
| *Setter*  | set_explosiveness_ratio(value) |
+-----------+--------------------------------+
| *Getter*  | get_explosiveness_ratio()      |
+-----------+--------------------------------+

Time ratio between each emission. If ``0``, particles are emitted continuously. If ``1``, all particles are emitted simultaneously.

----

.. _class_GPUParticles3D_property_fixed_fps:

- :ref:`int<class_int>` **fixed_fps**

+-----------+----------------------+
| *Default* | ``30``               |
+-----------+----------------------+
| *Setter*  | set_fixed_fps(value) |
+-----------+----------------------+
| *Getter*  | get_fixed_fps()      |
+-----------+----------------------+

The particle system's frame rate is fixed to a value. For instance, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the simulation of the particle system itself.

----

.. _class_GPUParticles3D_property_fract_delta:

- :ref:`bool<class_bool>` **fract_delta**

+-----------+-----------------------------+
| *Default* | ``true``                    |
+-----------+-----------------------------+
| *Setter*  | set_fractional_delta(value) |
+-----------+-----------------------------+
| *Getter*  | get_fractional_delta()      |
+-----------+-----------------------------+

If ``true``, results in fractional delta calculation which has a smoother particles display effect.

----

.. _class_GPUParticles3D_property_interpolate:

- :ref:`bool<class_bool>` **interpolate**

+-----------+------------------------+
| *Default* | ``true``               |
+-----------+------------------------+
| *Setter*  | set_interpolate(value) |
+-----------+------------------------+
| *Getter*  | get_interpolate()      |
+-----------+------------------------+

----

.. _class_GPUParticles3D_property_lifetime:

- :ref:`float<class_float>` **lifetime**

+-----------+---------------------+
| *Default* | ``1.0``             |
+-----------+---------------------+
| *Setter*  | set_lifetime(value) |
+-----------+---------------------+
| *Getter*  | get_lifetime()      |
+-----------+---------------------+

Amount of time each particle will exist.

----

.. _class_GPUParticles3D_property_local_coords:

- :ref:`bool<class_bool>` **local_coords**

+-----------+----------------------------------+
| *Default* | ``true``                         |
+-----------+----------------------------------+
| *Setter*  | set_use_local_coordinates(value) |
+-----------+----------------------------------+
| *Getter*  | get_use_local_coordinates()      |
+-----------+----------------------------------+

If ``true``, particles use the parent node's coordinate space. If ``false``, they use global coordinates.

----

.. _class_GPUParticles3D_property_one_shot:

- :ref:`bool<class_bool>` **one_shot**

+-----------+---------------------+
| *Default* | ``false``           |
+-----------+---------------------+
| *Setter*  | set_one_shot(value) |
+-----------+---------------------+
| *Getter*  | get_one_shot()      |
+-----------+---------------------+

If ``true``, only ``amount`` particles will be emitted.

----

.. _class_GPUParticles3D_property_preprocess:

- :ref:`float<class_float>` **preprocess**

+-----------+-----------------------------+
| *Default* | ``0.0``                     |
+-----------+-----------------------------+
| *Setter*  | set_pre_process_time(value) |
+-----------+-----------------------------+
| *Getter*  | get_pre_process_time()      |
+-----------+-----------------------------+

Amount of time to preprocess the particles before animation starts. Lets you start the animation some time after particles have started emitting.

----

.. _class_GPUParticles3D_property_process_material:

- :ref:`Material<class_Material>` **process_material**

+----------+-----------------------------+
| *Setter* | set_process_material(value) |
+----------+-----------------------------+
| *Getter* | get_process_material()      |
+----------+-----------------------------+

:ref:`Material<class_Material>` for processing particles. Can be a :ref:`ParticlesMaterial<class_ParticlesMaterial>` or a :ref:`ShaderMaterial<class_ShaderMaterial>`.

----

.. _class_GPUParticles3D_property_randomness:

- :ref:`float<class_float>` **randomness**

+-----------+-----------------------------+
| *Default* | ``0.0``                     |
+-----------+-----------------------------+
| *Setter*  | set_randomness_ratio(value) |
+-----------+-----------------------------+
| *Getter*  | get_randomness_ratio()      |
+-----------+-----------------------------+

Emission randomness ratio.

----

.. _class_GPUParticles3D_property_speed_scale:

- :ref:`float<class_float>` **speed_scale**

+-----------+------------------------+
| *Default* | ``1.0``                |
+-----------+------------------------+
| *Setter*  | set_speed_scale(value) |
+-----------+------------------------+
| *Getter*  | get_speed_scale()      |
+-----------+------------------------+

Speed scaling ratio. A value of ``0`` can be used to pause the particles.

----

.. _class_GPUParticles3D_property_sub_emitter:

- :ref:`NodePath<class_NodePath>` **sub_emitter**

+-----------+------------------------+
| *Default* | ``NodePath("")``       |
+-----------+------------------------+
| *Setter*  | set_sub_emitter(value) |
+-----------+------------------------+
| *Getter*  | get_sub_emitter()      |
+-----------+------------------------+

----

.. _class_GPUParticles3D_property_trail_enabled:

- :ref:`bool<class_bool>` **trail_enabled**

+-----------+--------------------------+
| *Default* | ``false``                |
+-----------+--------------------------+
| *Setter*  | set_trail_enabled(value) |
+-----------+--------------------------+
| *Getter*  | is_trail_enabled()       |
+-----------+--------------------------+

----

.. _class_GPUParticles3D_property_trail_length_secs:

- :ref:`float<class_float>` **trail_length_secs**

+-----------+-------------------------+
| *Default* | ``0.3``                 |
+-----------+-------------------------+
| *Setter*  | set_trail_length(value) |
+-----------+-------------------------+
| *Getter*  | get_trail_length()      |
+-----------+-------------------------+

----

.. _class_GPUParticles3D_property_transform_align:

- :ref:`TransformAlign<enum_GPUParticles3D_TransformAlign>` **transform_align**

+-----------+----------------------------+
| *Default* | ``0``                      |
+-----------+----------------------------+
| *Setter*  | set_transform_align(value) |
+-----------+----------------------------+
| *Getter*  | get_transform_align()      |
+-----------+----------------------------+

----

.. _class_GPUParticles3D_property_visibility_aabb:

- :ref:`AABB<class_AABB>` **visibility_aabb**

+-----------+-------------------------------+
| *Default* | ``AABB(-4, -4, -4, 8, 8, 8)`` |
+-----------+-------------------------------+
| *Setter*  | set_visibility_aabb(value)    |
+-----------+-------------------------------+
| *Getter*  | get_visibility_aabb()         |
+-----------+-------------------------------+

The :ref:`AABB<class_AABB>` that determines the node's region which needs to be visible on screen for the particle system to be active.

Grow the box if particles suddenly appear/disappear when the node enters/exits the screen. The :ref:`AABB<class_AABB>` can be grown via code or with the **Particles → Generate AABB** editor tool.

Method Descriptions
-------------------

.. _class_GPUParticles3D_method_capture_aabb:

- :ref:`AABB<class_AABB>` **capture_aabb** **(** **)** |const|

Returns the axis-aligned bounding box that contains all the particles that are active in the current frame.

----

.. _class_GPUParticles3D_method_emit_particle:

- void **emit_particle** **(** :ref:`Transform3D<class_Transform3D>` xform, :ref:`Vector3<class_Vector3>` velocity, :ref:`Color<class_Color>` color, :ref:`Color<class_Color>` custom, :ref:`int<class_int>` flags **)**

----

.. _class_GPUParticles3D_method_get_draw_pass_mesh:

- :ref:`Mesh<class_Mesh>` **get_draw_pass_mesh** **(** :ref:`int<class_int>` pass **)** |const|

Returns the :ref:`Mesh<class_Mesh>` that is drawn at index ``pass``.

----

.. _class_GPUParticles3D_method_restart:

- void **restart** **(** **)**

Restarts the particle emission, clearing existing particles.

----

.. _class_GPUParticles3D_method_set_draw_pass_mesh:

- void **set_draw_pass_mesh** **(** :ref:`int<class_int>` pass, :ref:`Mesh<class_Mesh>` mesh **)**

Sets the :ref:`Mesh<class_Mesh>` that is drawn at index ``pass``.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
