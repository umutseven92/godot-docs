:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the TextServerManager.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_TextServerManager:

TextServerManager
=================

**Inherits:** :ref:`Object<class_Object>`

Manager for the font and complex text layout servers.

Description
-----------

``TextServerManager`` is the API backend for loading, enumeration and switching :ref:`TextServer<class_TextServer>`\ s.

**Note:** Switching text server at runtime is possible, but will invalidate all fonts and text buffers. Make sure to unload all controls, fonts, and themes before doing so.

Methods
-------

+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| void                                | :ref:`add_interface<class_TextServerManager_method_add_interface>` **(** :ref:`TextServer<class_TextServer>` interface **)**             |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`TextServer<class_TextServer>` | :ref:`find_interface<class_TextServerManager_method_find_interface>` **(** :ref:`String<class_String>` name **)** |const|                |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`TextServer<class_TextServer>` | :ref:`get_interface<class_TextServerManager_method_get_interface>` **(** :ref:`int<class_int>` idx **)** |const|                         |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`               | :ref:`get_interface_count<class_TextServerManager_method_get_interface_count>` **(** **)** |const|                                       |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`get_interfaces<class_TextServerManager_method_get_interfaces>` **(** **)** |const|                                                 |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`TextServer<class_TextServer>` | :ref:`get_primary_interface<class_TextServerManager_method_get_primary_interface>` **(** **)** |const|                                   |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| void                                | :ref:`remove_interface<class_TextServerManager_method_remove_interface>` **(** :ref:`TextServer<class_TextServer>` interface **)**       |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| void                                | :ref:`set_primary_interface<class_TextServerManager_method_set_primary_interface>` **(** :ref:`TextServer<class_TextServer>` index **)** |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+

Signals
-------

.. _class_TextServerManager_signal_interface_added:

- **interface_added** **(** :ref:`StringName<class_StringName>` interface_name **)**

Emitted when a new interface has been added.

----

.. _class_TextServerManager_signal_interface_removed:

- **interface_removed** **(** :ref:`StringName<class_StringName>` interface_name **)**

Emitted when an interface is removed.

Method Descriptions
-------------------

.. _class_TextServerManager_method_add_interface:

- void **add_interface** **(** :ref:`TextServer<class_TextServer>` interface **)**

Registers an :ref:`TextServer<class_TextServer>` interface.

----

.. _class_TextServerManager_method_find_interface:

- :ref:`TextServer<class_TextServer>` **find_interface** **(** :ref:`String<class_String>` name **)** |const|

Finds an interface by its name.

----

.. _class_TextServerManager_method_get_interface:

- :ref:`TextServer<class_TextServer>` **get_interface** **(** :ref:`int<class_int>` idx **)** |const|

Returns the interface registered at a given index.

----

.. _class_TextServerManager_method_get_interface_count:

- :ref:`int<class_int>` **get_interface_count** **(** **)** |const|

Returns the number of interfaces currently registered.

----

.. _class_TextServerManager_method_get_interfaces:

- :ref:`Array<class_Array>` **get_interfaces** **(** **)** |const|

Returns a list of available interfaces the index and name of each interface.

----

.. _class_TextServerManager_method_get_primary_interface:

- :ref:`TextServer<class_TextServer>` **get_primary_interface** **(** **)** |const|

Returns the primary :ref:`TextServer<class_TextServer>` interface currently in use.

----

.. _class_TextServerManager_method_remove_interface:

- void **remove_interface** **(** :ref:`TextServer<class_TextServer>` interface **)**

Removes interface. All fonts and shaped text caches should be freed before removing interface.

----

.. _class_TextServerManager_method_set_primary_interface:

- void **set_primary_interface** **(** :ref:`TextServer<class_TextServer>` index **)**

Sets the primary :ref:`TextServer<class_TextServer>` interface.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
