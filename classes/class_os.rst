:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the OS.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_OS:

OS
==

**Inherits:** :ref:`Object<class_Object>`

Operating System functions.

Description
-----------

Operating System functions. OS wraps the most common functionality to communicate with the host operating system, such as the clipboard, video driver, date and time, timers, environment variables, execution of binaries, command line, etc.

Tutorials
---------

- `OS Test Demo <https://godotengine.org/asset-library/asset/677>`__

Properties
----------

+-------------------------+---------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>` | :ref:`low_processor_usage_mode<class_OS_property_low_processor_usage_mode>`                       | ``false`` |
+-------------------------+---------------------------------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`   | :ref:`low_processor_usage_mode_sleep_usec<class_OS_property_low_processor_usage_mode_sleep_usec>` | ``6900``  |
+-------------------------+---------------------------------------------------------------------------------------------------+-----------+

Methods
-------

+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`alert<class_OS_method_alert>` **(** :ref:`String<class_String>` text, :ref:`String<class_String>` title="Alert!" **)**                                                                                                      |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`can_use_threads<class_OS_method_can_use_threads>` **(** **)** |const|                                                                                                                                                       |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`close_midi_inputs<class_OS_method_close_midi_inputs>` **(** **)**                                                                                                                                                           |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                             | :ref:`create_process<class_OS_method_create_process>` **(** :ref:`String<class_String>` path, :ref:`PackedStringArray<class_PackedStringArray>` arguments **)**                                                                   |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`delay_msec<class_OS_method_delay_msec>` **(** :ref:`int<class_int>` msec **)** |const|                                                                                                                                      |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`delay_usec<class_OS_method_delay_usec>` **(** :ref:`int<class_int>` usec **)** |const|                                                                                                                                      |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`dump_memory_to_file<class_OS_method_dump_memory_to_file>` **(** :ref:`String<class_String>` file **)**                                                                                                                      |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`dump_resources_to_file<class_OS_method_dump_resources_to_file>` **(** :ref:`String<class_String>` file **)**                                                                                                                |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                             | :ref:`execute<class_OS_method_execute>` **(** :ref:`String<class_String>` path, :ref:`PackedStringArray<class_PackedStringArray>` arguments, :ref:`Array<class_Array>` output=[], :ref:`bool<class_bool>` read_stderr=false **)** |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                             | :ref:`find_keycode_from_string<class_OS_method_find_keycode_from_string>` **(** :ref:`String<class_String>` string **)** |const|                                                                                                  |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`get_cache_dir<class_OS_method_get_cache_dir>` **(** **)** |const|                                                                                                                                                           |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedStringArray<class_PackedStringArray>` | :ref:`get_cmdline_args<class_OS_method_get_cmdline_args>` **(** **)**                                                                                                                                                             |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`get_config_dir<class_OS_method_get_config_dir>` **(** **)** |const|                                                                                                                                                         |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedStringArray<class_PackedStringArray>` | :ref:`get_connected_midi_inputs<class_OS_method_get_connected_midi_inputs>` **(** **)**                                                                                                                                           |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`get_data_dir<class_OS_method_get_data_dir>` **(** **)** |const|                                                                                                                                                             |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`get_environment<class_OS_method_get_environment>` **(** :ref:`String<class_String>` variable **)** |const|                                                                                                                  |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`get_executable_path<class_OS_method_get_executable_path>` **(** **)** |const|                                                                                                                                               |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedStringArray<class_PackedStringArray>` | :ref:`get_granted_permissions<class_OS_method_get_granted_permissions>` **(** **)** |const|                                                                                                                                       |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`get_keycode_string<class_OS_method_get_keycode_string>` **(** :ref:`int<class_int>` code **)** |const|                                                                                                                      |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`get_locale<class_OS_method_get_locale>` **(** **)** |const|                                                                                                                                                                 |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`get_locale_language<class_OS_method_get_locale_language>` **(** **)** |const|                                                                                                                                               |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`get_model_name<class_OS_method_get_model_name>` **(** **)** |const|                                                                                                                                                         |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`get_name<class_OS_method_get_name>` **(** **)** |const|                                                                                                                                                                     |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                             | :ref:`get_process_id<class_OS_method_get_process_id>` **(** **)** |const|                                                                                                                                                         |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                             | :ref:`get_processor_count<class_OS_method_get_processor_count>` **(** **)** |const|                                                                                                                                               |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                             | :ref:`get_static_memory_peak_usage<class_OS_method_get_static_memory_peak_usage>` **(** **)** |const|                                                                                                                             |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                             | :ref:`get_static_memory_usage<class_OS_method_get_static_memory_usage>` **(** **)** |const|                                                                                                                                       |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`get_system_dir<class_OS_method_get_system_dir>` **(** :ref:`SystemDir<enum_OS_SystemDir>` dir, :ref:`bool<class_bool>` shared_storage=true **)** |const|                                                                    |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                             | :ref:`get_thread_caller_id<class_OS_method_get_thread_caller_id>` **(** **)** |const|                                                                                                                                             |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`get_unique_id<class_OS_method_get_unique_id>` **(** **)** |const|                                                                                                                                                           |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                       | :ref:`get_user_data_dir<class_OS_method_get_user_data_dir>` **(** **)** |const|                                                                                                                                                   |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`has_environment<class_OS_method_has_environment>` **(** :ref:`String<class_String>` variable **)** |const|                                                                                                                  |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`has_feature<class_OS_method_has_feature>` **(** :ref:`String<class_String>` tag_name **)** |const|                                                                                                                          |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_debug_build<class_OS_method_is_debug_build>` **(** **)** |const|                                                                                                                                                         |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_keycode_unicode<class_OS_method_is_keycode_unicode>` **(** :ref:`int<class_int>` code **)** |const|                                                                                                                      |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_stdout_verbose<class_OS_method_is_stdout_verbose>` **(** **)** |const|                                                                                                                                                   |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`is_userfs_persistent<class_OS_method_is_userfs_persistent>` **(** **)** |const|                                                                                                                                             |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`kill<class_OS_method_kill>` **(** :ref:`int<class_int>` pid **)**                                                                                                                                                           |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`open_midi_inputs<class_OS_method_open_midi_inputs>` **(** **)**                                                                                                                                                             |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`print_all_resources<class_OS_method_print_all_resources>` **(** :ref:`String<class_String>` tofile="" **)**                                                                                                                 |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`print_all_textures_by_size<class_OS_method_print_all_textures_by_size>` **(** **)**                                                                                                                                         |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`print_resources_by_type<class_OS_method_print_resources_by_type>` **(** :ref:`PackedStringArray<class_PackedStringArray>` types **)**                                                                                       |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`print_resources_in_use<class_OS_method_print_resources_in_use>` **(** :ref:`bool<class_bool>` short=false **)**                                                                                                             |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`request_permission<class_OS_method_request_permission>` **(** :ref:`String<class_String>` name **)**                                                                                                                        |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`request_permissions<class_OS_method_request_permissions>` **(** **)**                                                                                                                                                       |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                           | :ref:`set_environment<class_OS_method_set_environment>` **(** :ref:`String<class_String>` variable, :ref:`String<class_String>` value **)** |const|                                                                               |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`set_thread_name<class_OS_method_set_thread_name>` **(** :ref:`String<class_String>` name **)**                                                                                                                              |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                              | :ref:`set_use_file_access_save_and_swap<class_OS_method_set_use_file_access_save_and_swap>` **(** :ref:`bool<class_bool>` enabled **)**                                                                                           |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`shell_open<class_OS_method_shell_open>` **(** :ref:`String<class_String>` uri **)**                                                                                                                                         |
+---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumerations
------------

.. _enum_OS_VideoDriver:

.. _class_OS_constant_VIDEO_DRIVER_GLES2:

.. _class_OS_constant_VIDEO_DRIVER_VULKAN:

enum **VideoDriver**:

- **VIDEO_DRIVER_GLES2** = **0** --- The GLES2 rendering backend. It uses OpenGL ES 2.0 on mobile devices, OpenGL 2.1 on desktop platforms and WebGL 1.0 on the web.

- **VIDEO_DRIVER_VULKAN** = **1** --- The Vulkan rendering backend.

----

.. _enum_OS_Weekday:

.. _class_OS_constant_DAY_SUNDAY:

.. _class_OS_constant_DAY_MONDAY:

.. _class_OS_constant_DAY_TUESDAY:

.. _class_OS_constant_DAY_WEDNESDAY:

.. _class_OS_constant_DAY_THURSDAY:

.. _class_OS_constant_DAY_FRIDAY:

.. _class_OS_constant_DAY_SATURDAY:

enum **Weekday**:

- **DAY_SUNDAY** = **0** --- Sunday.

- **DAY_MONDAY** = **1** --- Monday.

- **DAY_TUESDAY** = **2** --- Tuesday.

- **DAY_WEDNESDAY** = **3** --- Wednesday.

- **DAY_THURSDAY** = **4** --- Thursday.

- **DAY_FRIDAY** = **5** --- Friday.

- **DAY_SATURDAY** = **6** --- Saturday.

----

.. _enum_OS_Month:

.. _class_OS_constant_MONTH_JANUARY:

.. _class_OS_constant_MONTH_FEBRUARY:

.. _class_OS_constant_MONTH_MARCH:

.. _class_OS_constant_MONTH_APRIL:

.. _class_OS_constant_MONTH_MAY:

.. _class_OS_constant_MONTH_JUNE:

.. _class_OS_constant_MONTH_JULY:

.. _class_OS_constant_MONTH_AUGUST:

.. _class_OS_constant_MONTH_SEPTEMBER:

.. _class_OS_constant_MONTH_OCTOBER:

.. _class_OS_constant_MONTH_NOVEMBER:

.. _class_OS_constant_MONTH_DECEMBER:

enum **Month**:

- **MONTH_JANUARY** = **1** --- January.

- **MONTH_FEBRUARY** = **2** --- February.

- **MONTH_MARCH** = **3** --- March.

- **MONTH_APRIL** = **4** --- April.

- **MONTH_MAY** = **5** --- May.

- **MONTH_JUNE** = **6** --- June.

- **MONTH_JULY** = **7** --- July.

- **MONTH_AUGUST** = **8** --- August.

- **MONTH_SEPTEMBER** = **9** --- September.

- **MONTH_OCTOBER** = **10** --- October.

- **MONTH_NOVEMBER** = **11** --- November.

- **MONTH_DECEMBER** = **12** --- December.

----

.. _enum_OS_SystemDir:

.. _class_OS_constant_SYSTEM_DIR_DESKTOP:

.. _class_OS_constant_SYSTEM_DIR_DCIM:

.. _class_OS_constant_SYSTEM_DIR_DOCUMENTS:

.. _class_OS_constant_SYSTEM_DIR_DOWNLOADS:

.. _class_OS_constant_SYSTEM_DIR_MOVIES:

.. _class_OS_constant_SYSTEM_DIR_MUSIC:

.. _class_OS_constant_SYSTEM_DIR_PICTURES:

.. _class_OS_constant_SYSTEM_DIR_RINGTONES:

enum **SystemDir**:

- **SYSTEM_DIR_DESKTOP** = **0** --- Desktop directory path.

- **SYSTEM_DIR_DCIM** = **1** --- DCIM (Digital Camera Images) directory path.

- **SYSTEM_DIR_DOCUMENTS** = **2** --- Documents directory path.

- **SYSTEM_DIR_DOWNLOADS** = **3** --- Downloads directory path.

- **SYSTEM_DIR_MOVIES** = **4** --- Movies directory path.

- **SYSTEM_DIR_MUSIC** = **5** --- Music directory path.

- **SYSTEM_DIR_PICTURES** = **6** --- Pictures directory path.

- **SYSTEM_DIR_RINGTONES** = **7** --- Ringtones directory path.

Property Descriptions
---------------------

.. _class_OS_property_low_processor_usage_mode:

- :ref:`bool<class_bool>` **low_processor_usage_mode**

+-----------+-------------------------------------+
| *Default* | ``false``                           |
+-----------+-------------------------------------+
| *Setter*  | set_low_processor_usage_mode(value) |
+-----------+-------------------------------------+
| *Getter*  | is_in_low_processor_usage_mode()    |
+-----------+-------------------------------------+

If ``true``, the engine optimizes for low processor usage by only refreshing the screen if needed. Can improve battery consumption on mobile.

----

.. _class_OS_property_low_processor_usage_mode_sleep_usec:

- :ref:`int<class_int>` **low_processor_usage_mode_sleep_usec**

+-----------+------------------------------------------------+
| *Default* | ``6900``                                       |
+-----------+------------------------------------------------+
| *Setter*  | set_low_processor_usage_mode_sleep_usec(value) |
+-----------+------------------------------------------------+
| *Getter*  | get_low_processor_usage_mode_sleep_usec()      |
+-----------+------------------------------------------------+

The amount of sleeping between frames when the low-processor usage mode is enabled (in microseconds). Higher values will result in lower CPU usage.

Method Descriptions
-------------------

.. _class_OS_method_alert:

- void **alert** **(** :ref:`String<class_String>` text, :ref:`String<class_String>` title="Alert!" **)**

Displays a modal dialog box using the host OS' facilities. Execution is blocked until the dialog is closed.

----

.. _class_OS_method_can_use_threads:

- :ref:`bool<class_bool>` **can_use_threads** **(** **)** |const|

Returns ``true`` if the current host platform is using multiple threads.

----

.. _class_OS_method_close_midi_inputs:

- void **close_midi_inputs** **(** **)**

Shuts down system MIDI driver.

**Note:** This method is implemented on Linux, macOS and Windows.

----

.. _class_OS_method_create_process:

- :ref:`int<class_int>` **create_process** **(** :ref:`String<class_String>` path, :ref:`PackedStringArray<class_PackedStringArray>` arguments **)**

Creates a new process that runs independently of Godot. It will not terminate if Godot terminates. The file specified in ``path`` must exist and be executable. Platform path resolution will be used. The ``arguments`` are used in the given order and separated by a space.

If the process creation succeeds, the method will return the new process ID, which you can use to monitor the process (and potentially terminate it with :ref:`kill<class_OS_method_kill>`). If the process creation fails, the method will return ``-1``.

For example, running another instance of the project:


.. tabs::

 .. code-tab:: gdscript

    var pid = OS.create_process(OS.get_executable_path(), [])

 .. code-tab:: csharp

    var pid = OS.CreateProcess(OS.GetExecutablePath(), new string[] {});



See :ref:`execute<class_OS_method_execute>` if you wish to run an external command and retrieve the results.

**Note:** This method is implemented on Android, iOS, Linux, macOS and Windows.

**Note:** On macOS, sandboxed applications are limited to run only embedded helper executables, specified during export.

----

.. _class_OS_method_delay_msec:

- void **delay_msec** **(** :ref:`int<class_int>` msec **)** |const|

Delays execution of the current thread by ``msec`` milliseconds. ``msec`` must be greater than or equal to ``0``. Otherwise, :ref:`delay_msec<class_OS_method_delay_msec>` will do nothing and will print an error message.

**Note:** :ref:`delay_msec<class_OS_method_delay_msec>` is a *blocking* way to delay code execution. To delay code execution in a non-blocking way, see :ref:`SceneTree.create_timer<class_SceneTree_method_create_timer>`. Yielding with :ref:`SceneTree.create_timer<class_SceneTree_method_create_timer>` will delay the execution of code placed below the ``yield`` without affecting the rest of the project (or editor, for :ref:`EditorPlugin<class_EditorPlugin>`\ s and :ref:`EditorScript<class_EditorScript>`\ s).

**Note:** When :ref:`delay_msec<class_OS_method_delay_msec>` is called on the main thread, it will freeze the project and will prevent it from redrawing and registering input until the delay has passed. When using :ref:`delay_msec<class_OS_method_delay_msec>` as part of an :ref:`EditorPlugin<class_EditorPlugin>` or :ref:`EditorScript<class_EditorScript>`, it will freeze the editor but won't freeze the project if it is currently running (since the project is an independent child process).

----

.. _class_OS_method_delay_usec:

- void **delay_usec** **(** :ref:`int<class_int>` usec **)** |const|

Delays execution of the current thread by ``usec`` microseconds. ``usec`` must be greater than or equal to ``0``. Otherwise, :ref:`delay_usec<class_OS_method_delay_usec>` will do nothing and will print an error message.

**Note:** :ref:`delay_usec<class_OS_method_delay_usec>` is a *blocking* way to delay code execution. To delay code execution in a non-blocking way, see :ref:`SceneTree.create_timer<class_SceneTree_method_create_timer>`. Yielding with :ref:`SceneTree.create_timer<class_SceneTree_method_create_timer>` will delay the execution of code placed below the ``yield`` without affecting the rest of the project (or editor, for :ref:`EditorPlugin<class_EditorPlugin>`\ s and :ref:`EditorScript<class_EditorScript>`\ s).

**Note:** When :ref:`delay_usec<class_OS_method_delay_usec>` is called on the main thread, it will freeze the project and will prevent it from redrawing and registering input until the delay has passed. When using :ref:`delay_usec<class_OS_method_delay_usec>` as part of an :ref:`EditorPlugin<class_EditorPlugin>` or :ref:`EditorScript<class_EditorScript>`, it will freeze the editor but won't freeze the project if it is currently running (since the project is an independent child process).

----

.. _class_OS_method_dump_memory_to_file:

- void **dump_memory_to_file** **(** :ref:`String<class_String>` file **)**

Dumps the memory allocation ringlist to a file (only works in debug).

Entry format per line: "Address - Size - Description".

----

.. _class_OS_method_dump_resources_to_file:

- void **dump_resources_to_file** **(** :ref:`String<class_String>` file **)**

Dumps all used resources to file (only works in debug).

Entry format per line: "Resource Type : Resource Location".

At the end of the file is a statistic of all used Resource Types.

----

.. _class_OS_method_execute:

- :ref:`int<class_int>` **execute** **(** :ref:`String<class_String>` path, :ref:`PackedStringArray<class_PackedStringArray>` arguments, :ref:`Array<class_Array>` output=[], :ref:`bool<class_bool>` read_stderr=false **)**

Executes a command. The file specified in ``path`` must exist and be executable. Platform path resolution will be used. The ``arguments`` are used in the given order and separated by a space. If an ``output`` :ref:`Array<class_Array>` is provided, the complete shell output of the process will be appended as a single :ref:`String<class_String>` element in ``output``. If ``read_stderr`` is ``true``, the output to the standard error stream will be included too.

If the command is successfully executed, the method will return the exit code of the command, or ``-1`` if it fails.

**Note:** The Godot thread will pause its execution until the executed command terminates. Use :ref:`Thread<class_Thread>` to create a separate thread that will not pause the Godot thread, or use :ref:`create_process<class_OS_method_create_process>` to create a completely independent process.

For example, to retrieve a list of the working directory's contents:


.. tabs::

 .. code-tab:: gdscript

    var output = []
    var exit_code = OS.execute("ls", ["-l", "/tmp"], output)

 .. code-tab:: csharp

    var output = new Godot.Collections.Array();
    int exitCode = OS.Execute("ls", new string[] {"-l", "/tmp"}, output);



To execute a composite command, a platform-specific shell can be invoked. For example:


.. tabs::

 .. code-tab:: gdscript

    var output = []
    OS.execute("CMD.exe", ["/C", "cd %TEMP% && dir"], output)

 .. code-tab:: csharp

    var output = new Godot.Collections.Array();
    OS.Execute("CMD.exe", new string[] {"/C", "cd %TEMP% && dir"}, output);



**Note:** This method is implemented on Android, iOS, Linux, macOS and Windows.

**Note:** On macOS, sandboxed applications are limited to run only embedded helper executables, specified during export.

----

.. _class_OS_method_find_keycode_from_string:

- :ref:`int<class_int>` **find_keycode_from_string** **(** :ref:`String<class_String>` string **)** |const|

Returns the keycode of the given string (e.g. "Escape").

----

.. _class_OS_method_get_cache_dir:

- :ref:`String<class_String>` **get_cache_dir** **(** **)** |const|

Returns the *global* cache data directory according to the operating system's standards. On desktop platforms, this path can be overridden by setting the ``XDG_CACHE_HOME`` environment variable before starting the project. See `File paths in Godot projects <https://docs.godotengine.org/en/latest/tutorials/io/data_paths.html>`__ in the documentation for more information. See also :ref:`get_config_dir<class_OS_method_get_config_dir>` and :ref:`get_data_dir<class_OS_method_get_data_dir>`.

Not to be confused with :ref:`get_user_data_dir<class_OS_method_get_user_data_dir>`, which returns the *project-specific* user data path.

----

.. _class_OS_method_get_cmdline_args:

- :ref:`PackedStringArray<class_PackedStringArray>` **get_cmdline_args** **(** **)**

Returns the command-line arguments passed to the engine.

Command-line arguments can be written in any form, including both ``--key value`` and ``--key=value`` forms so they can be properly parsed, as long as custom command-line arguments do not conflict with engine arguments.

You can also incorporate environment variables using the :ref:`get_environment<class_OS_method_get_environment>` method.

You can set :ref:`ProjectSettings.editor/run/main_run_args<class_ProjectSettings_property_editor/run/main_run_args>` to define command-line arguments to be passed by the editor when running the project.

Here's a minimal example on how to parse command-line arguments into a dictionary using the ``--key=value`` form for arguments:


.. tabs::

 .. code-tab:: gdscript

    var arguments = {}
    for argument in OS.get_cmdline_args():
        if argument.find("=") > -1:
            var key_value = argument.split("=")
            arguments[key_value[0].lstrip("--")] = key_value[1]

 .. code-tab:: csharp

    var arguments = new Godot.Collections.Dictionary();
    foreach (var argument in OS.GetCmdlineArgs())
    {
        if (argument.Find("=") > -1)
        {
            string[] keyValue = argument.Split("=");
            arguments[keyValue[0].LStrip("--")] = keyValue[1];
        }
    }



----

.. _class_OS_method_get_config_dir:

- :ref:`String<class_String>` **get_config_dir** **(** **)** |const|

Returns the *global* user configuration directory according to the operating system's standards. On desktop platforms, this path can be overridden by setting the ``XDG_CONFIG_HOME`` environment variable before starting the project. See `File paths in Godot projects <https://docs.godotengine.org/en/latest/tutorials/io/data_paths.html>`__ in the documentation for more information. See also :ref:`get_cache_dir<class_OS_method_get_cache_dir>` and :ref:`get_data_dir<class_OS_method_get_data_dir>`.

Not to be confused with :ref:`get_user_data_dir<class_OS_method_get_user_data_dir>`, which returns the *project-specific* user data path.

----

.. _class_OS_method_get_connected_midi_inputs:

- :ref:`PackedStringArray<class_PackedStringArray>` **get_connected_midi_inputs** **(** **)**

Returns an array of MIDI device names.

The returned array will be empty if the system MIDI driver has not previously been initialised with :ref:`open_midi_inputs<class_OS_method_open_midi_inputs>`.

**Note:** This method is implemented on Linux, macOS and Windows.

----

.. _class_OS_method_get_data_dir:

- :ref:`String<class_String>` **get_data_dir** **(** **)** |const|

Returns the *global* user data directory according to the operating system's standards. On desktop platforms, this path can be overridden by setting the ``XDG_DATA_HOME`` environment variable before starting the project. See `File paths in Godot projects <https://docs.godotengine.org/en/latest/tutorials/io/data_paths.html>`__ in the documentation for more information. See also :ref:`get_cache_dir<class_OS_method_get_cache_dir>` and :ref:`get_config_dir<class_OS_method_get_config_dir>`.

Not to be confused with :ref:`get_user_data_dir<class_OS_method_get_user_data_dir>`, which returns the *project-specific* user data path.

----

.. _class_OS_method_get_environment:

- :ref:`String<class_String>` **get_environment** **(** :ref:`String<class_String>` variable **)** |const|

Returns the value of an environment variable. Returns an empty string if the environment variable doesn't exist.

**Note:** Double-check the casing of ``variable``. Environment variable names are case-sensitive on all platforms except Windows.

----

.. _class_OS_method_get_executable_path:

- :ref:`String<class_String>` **get_executable_path** **(** **)** |const|

Returns the path to the current engine executable.

----

.. _class_OS_method_get_granted_permissions:

- :ref:`PackedStringArray<class_PackedStringArray>` **get_granted_permissions** **(** **)** |const|

With this function, you can get the list of dangerous permissions that have been granted to the Android application.

**Note:** This method is implemented on Android.

----

.. _class_OS_method_get_keycode_string:

- :ref:`String<class_String>` **get_keycode_string** **(** :ref:`int<class_int>` code **)** |const|

Returns the given keycode as a string (e.g. Return values: ``"Escape"``, ``"Shift+Escape"``).

See also :ref:`InputEventKey.keycode<class_InputEventKey_property_keycode>` and :ref:`InputEventKey.get_keycode_with_modifiers<class_InputEventKey_method_get_keycode_with_modifiers>`.

----

.. _class_OS_method_get_locale:

- :ref:`String<class_String>` **get_locale** **(** **)** |const|

Returns the host OS locale as a string of the form ``language_Script_COUNTRY_VARIANT@extra``. If you want only the language code and not the fully specified locale from the OS, you can use :ref:`get_locale_language<class_OS_method_get_locale_language>`.

``language`` - 2 or 3-letter `language code <https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes>`__, in lower case.

``Script`` - optional, 4-letter `script code <https://en.wikipedia.org/wiki/ISO_15924>`__, in title case.

``COUNTRY`` - optional, 2 or 3-letter `country code <https://en.wikipedia.org/wiki/ISO_3166-1>`__, in upper case.

``VARIANT`` - optional, language variant, region and sort order. Variant can have any number of underscored keywords.

``extra`` - optional, semicolon separated list of additional key words. Currency, calendar, sort order and numbering system information.

----

.. _class_OS_method_get_locale_language:

- :ref:`String<class_String>` **get_locale_language** **(** **)** |const|

Returns the host OS locale's 2 or 3-letter `language code <https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes>`__ as a string which should be consistent on all platforms. This is equivalent to extracting the ``language`` part of the :ref:`get_locale<class_OS_method_get_locale>` string.

This can be used to narrow down fully specified locale strings to only the "common" language code, when you don't need the additional information about country code or variants. For example, for a French Canadian user with ``fr_CA`` locale, this would return ``fr``.

----

.. _class_OS_method_get_model_name:

- :ref:`String<class_String>` **get_model_name** **(** **)** |const|

Returns the model name of the current device.

**Note:** This method is implemented on Android and iOS. Returns ``"GenericDevice"`` on unsupported platforms.

----

.. _class_OS_method_get_name:

- :ref:`String<class_String>` **get_name** **(** **)** |const|

Returns the name of the host OS. Possible values are: ``"Android"``, ``"iOS"``, ``"HTML5"``, ``"macOS"``, ``"Server"``, ``"Windows"``, ``"UWP"``, ``"X11"``.

----

.. _class_OS_method_get_process_id:

- :ref:`int<class_int>` **get_process_id** **(** **)** |const|

Returns the project's process ID.

**Note:** This method is implemented on Android, iOS, Linux, macOS and Windows.

----

.. _class_OS_method_get_processor_count:

- :ref:`int<class_int>` **get_processor_count** **(** **)** |const|

Returns the number of threads available on the host machine.

----

.. _class_OS_method_get_static_memory_peak_usage:

- :ref:`int<class_int>` **get_static_memory_peak_usage** **(** **)** |const|

Returns the maximum amount of static memory used (only works in debug).

----

.. _class_OS_method_get_static_memory_usage:

- :ref:`int<class_int>` **get_static_memory_usage** **(** **)** |const|

Returns the amount of static memory being used by the program in bytes.

----

.. _class_OS_method_get_system_dir:

- :ref:`String<class_String>` **get_system_dir** **(** :ref:`SystemDir<enum_OS_SystemDir>` dir, :ref:`bool<class_bool>` shared_storage=true **)** |const|

Returns the actual path to commonly used folders across different platforms. Available locations are specified in :ref:`SystemDir<enum_OS_SystemDir>`.

**Note:** This method is implemented on Android, Linux, macOS and Windows.

**Note:** Shared storage is implemented on Android and allows to differentiate between app specific and shared directories. Shared directories have additional restrictions on Android.

----

.. _class_OS_method_get_thread_caller_id:

- :ref:`int<class_int>` **get_thread_caller_id** **(** **)** |const|

Returns the ID of the current thread. This can be used in logs to ease debugging of multi-threaded applications.

**Note:** Thread IDs are not deterministic and may be reused across application restarts.

----

.. _class_OS_method_get_unique_id:

- :ref:`String<class_String>` **get_unique_id** **(** **)** |const|

Returns a string that is unique to the device.

**Note:** This string may change without notice if the user reinstalls/upgrades their operating system or changes their hardware. This means it should generally not be used to encrypt persistent data as the data saved before an unexpected ID change would become inaccessible. The returned string may also be falsified using external programs, so do not rely on the string returned by :ref:`get_unique_id<class_OS_method_get_unique_id>` for security purposes.

**Note:** Returns an empty string on HTML5 and UWP, as this method isn't implemented on those platforms yet.

----

.. _class_OS_method_get_user_data_dir:

- :ref:`String<class_String>` **get_user_data_dir** **(** **)** |const|

Returns the absolute directory path where user data is written (``user://``).

On Linux, this is ``~/.local/share/godot/app_userdata/[project_name]``, or ``~/.local/share/[custom_name]`` if ``use_custom_user_dir`` is set.

On macOS, this is ``~/Library/Application Support/Godot/app_userdata/[project_name]``, or ``~/Library/Application Support/[custom_name]`` if ``use_custom_user_dir`` is set.

On Windows, this is ``%APPDATA%\Godot\app_userdata\[project_name]``, or ``%APPDATA%\[custom_name]`` if ``use_custom_user_dir`` is set. ``%APPDATA%`` expands to ``%USERPROFILE%\AppData\Roaming``.

If the project name is empty, ``user://`` falls back to ``res://``.

Not to be confused with :ref:`get_data_dir<class_OS_method_get_data_dir>`, which returns the *global* (non-project-specific) user data directory.

----

.. _class_OS_method_has_environment:

- :ref:`bool<class_bool>` **has_environment** **(** :ref:`String<class_String>` variable **)** |const|

Returns ``true`` if the environment variable with the name ``variable`` exists.

**Note:** Double-check the casing of ``variable``. Environment variable names are case-sensitive on all platforms except Windows.

----

.. _class_OS_method_has_feature:

- :ref:`bool<class_bool>` **has_feature** **(** :ref:`String<class_String>` tag_name **)** |const|

Returns ``true`` if the feature for the given feature tag is supported in the currently running instance, depending on the platform, build, etc. Can be used to check whether you're currently running a debug build, on a certain platform or arch, etc. Refer to the `Feature Tags <https://docs.godotengine.org/en/latest/getting_started/workflow/export/feature_tags.html>`__ documentation for more details.

**Note:** Tag names are case-sensitive.

----

.. _class_OS_method_is_debug_build:

- :ref:`bool<class_bool>` **is_debug_build** **(** **)** |const|

Returns ``true`` if the Godot binary used to run the project is a *debug* export template, or when running in the editor.

Returns ``false`` if the Godot binary used to run the project is a *release* export template.

To check whether the Godot binary used to run the project is an export template (debug or release), use ``OS.has_feature("standalone")`` instead.

----

.. _class_OS_method_is_keycode_unicode:

- :ref:`bool<class_bool>` **is_keycode_unicode** **(** :ref:`int<class_int>` code **)** |const|

Returns ``true`` if the input keycode corresponds to a Unicode character.

----

.. _class_OS_method_is_stdout_verbose:

- :ref:`bool<class_bool>` **is_stdout_verbose** **(** **)** |const|

Returns ``true`` if the engine was executed with the ``--verbose`` or ``-v`` command line argument, or if :ref:`ProjectSettings.debug/settings/stdout/verbose_stdout<class_ProjectSettings_property_debug/settings/stdout/verbose_stdout>` is ``true``. See also :ref:`@GlobalScope.print_verbose<class_@GlobalScope_method_print_verbose>`.

----

.. _class_OS_method_is_userfs_persistent:

- :ref:`bool<class_bool>` **is_userfs_persistent** **(** **)** |const|

If ``true``, the ``user://`` file system is persistent, so that its state is the same after a player quits and starts the game again. Relevant to the HTML5 platform, where this persistence may be unavailable.

----

.. _class_OS_method_kill:

- :ref:`Error<enum_@GlobalScope_Error>` **kill** **(** :ref:`int<class_int>` pid **)**

Kill (terminate) the process identified by the given process ID (``pid``), e.g. the one returned by :ref:`execute<class_OS_method_execute>` in non-blocking mode.

**Note:** This method can also be used to kill processes that were not spawned by the game.

**Note:** This method is implemented on Android, iOS, Linux, macOS and Windows.

----

.. _class_OS_method_open_midi_inputs:

- void **open_midi_inputs** **(** **)**

Initialises the singleton for the system MIDI driver.

**Note:** This method is implemented on Linux, macOS and Windows.

----

.. _class_OS_method_print_all_resources:

- void **print_all_resources** **(** :ref:`String<class_String>` tofile="" **)**

Shows all resources in the game. Optionally, the list can be written to a file by specifying a file path in ``tofile``.

----

.. _class_OS_method_print_all_textures_by_size:

- void **print_all_textures_by_size** **(** **)**

Shows the list of loaded textures sorted by size in memory.

----

.. _class_OS_method_print_resources_by_type:

- void **print_resources_by_type** **(** :ref:`PackedStringArray<class_PackedStringArray>` types **)**

Shows the number of resources loaded by the game of the given types.

----

.. _class_OS_method_print_resources_in_use:

- void **print_resources_in_use** **(** :ref:`bool<class_bool>` short=false **)**

Shows all resources currently used by the game.

----

.. _class_OS_method_request_permission:

- :ref:`bool<class_bool>` **request_permission** **(** :ref:`String<class_String>` name **)**

At the moment this function is only used by ``AudioDriverOpenSL`` to request permission for ``RECORD_AUDIO`` on Android.

----

.. _class_OS_method_request_permissions:

- :ref:`bool<class_bool>` **request_permissions** **(** **)**

With this function, you can request dangerous permissions since normal permissions are automatically granted at install time in Android applications.

**Note:** This method is implemented on Android.

----

.. _class_OS_method_set_environment:

- :ref:`bool<class_bool>` **set_environment** **(** :ref:`String<class_String>` variable, :ref:`String<class_String>` value **)** |const|

Sets the value of the environment variable ``variable`` to ``value``. The environment variable will be set for the Godot process and any process executed with :ref:`execute<class_OS_method_execute>` after running :ref:`set_environment<class_OS_method_set_environment>`. The environment variable will *not* persist to processes run after the Godot process was terminated.

**Note:** Double-check the casing of ``variable``. Environment variable names are case-sensitive on all platforms except Windows.

----

.. _class_OS_method_set_thread_name:

- :ref:`Error<enum_@GlobalScope_Error>` **set_thread_name** **(** :ref:`String<class_String>` name **)**

Sets the name of the current thread.

----

.. _class_OS_method_set_use_file_access_save_and_swap:

- void **set_use_file_access_save_and_swap** **(** :ref:`bool<class_bool>` enabled **)**

Enables backup saves if ``enabled`` is ``true``.

----

.. _class_OS_method_shell_open:

- :ref:`Error<enum_@GlobalScope_Error>` **shell_open** **(** :ref:`String<class_String>` uri **)**

Requests the OS to open a resource with the most appropriate program. For example:

- ``OS.shell_open("C:\\Users\name\Downloads")`` on Windows opens the file explorer at the user's Downloads folder.

- ``OS.shell_open("https://godotengine.org")`` opens the default web browser on the official Godot website.

- ``OS.shell_open("mailto:example@example.com")`` opens the default email client with the "To" field set to ``example@example.com``. See `Customizing ``mailto:`` Links <https://blog.escapecreative.com/customizing-mailto-links/>`__ for a list of fields that can be added.

Use :ref:`ProjectSettings.globalize_path<class_ProjectSettings_method_globalize_path>` to convert a ``res://`` or ``user://`` path into a system path for use with this method.

**Note:** This method is implemented on Android, iOS, HTML5, Linux, macOS and Windows.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
