:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the EditorScript.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_EditorScript:

EditorScript
============

**Inherits:** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

Base script that can be used to add extension functions to the editor.

Description
-----------

Scripts extending this class and implementing its :ref:`_run<class_EditorScript_method__run>` method can be executed from the Script Editor's **File > Run** menu option (or by pressing :kbd:`Ctrl + Shift + X`) while the editor is running. This is useful for adding custom in-editor functionality to Godot. For more complex additions, consider using :ref:`EditorPlugin<class_EditorPlugin>`\ s instead.

**Note:** Extending scripts need to have ``tool`` mode enabled.

**Example script:**


.. tabs::

 .. code-tab:: gdscript

    tool
    extends EditorScript
    
    func _run():
        print("Hello from the Godot Editor!")

 .. code-tab:: csharp

    using Godot;
    using System;
    
    [Tool]
    public class HelloEditor : EditorScript
    {
        public override void _Run()
        {
            GD.Print("Hello from the Godot Editor!");
        }
    }



**Note:** The script is run in the Editor context, which means the output is visible in the console window started with the Editor (stdout) instead of the usual Godot **Output** dock.

Methods
-------

+-----------------------------------------------+--------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`_run<class_EditorScript_method__run>` **(** **)** |virtual|                                      |
+-----------------------------------------------+--------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`add_root_node<class_EditorScript_method_add_root_node>` **(** :ref:`Node<class_Node>` node **)** |
+-----------------------------------------------+--------------------------------------------------------------------------------------------------------+
| :ref:`EditorInterface<class_EditorInterface>` | :ref:`get_editor_interface<class_EditorScript_method_get_editor_interface>` **(** **)**                |
+-----------------------------------------------+--------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`                       | :ref:`get_scene<class_EditorScript_method_get_scene>` **(** **)**                                      |
+-----------------------------------------------+--------------------------------------------------------------------------------------------------------+

Method Descriptions
-------------------

.. _class_EditorScript_method__run:

- void **_run** **(** **)** |virtual|

This method is executed by the Editor when **File > Run** is used.

----

.. _class_EditorScript_method_add_root_node:

- void **add_root_node** **(** :ref:`Node<class_Node>` node **)**

Adds ``node`` as a child of the root node in the editor context.

**Warning:** The implementation of this method is currently disabled.

----

.. _class_EditorScript_method_get_editor_interface:

- :ref:`EditorInterface<class_EditorInterface>` **get_editor_interface** **(** **)**

Returns the :ref:`EditorInterface<class_EditorInterface>` singleton instance.

----

.. _class_EditorScript_method_get_scene:

- :ref:`Node<class_Node>` **get_scene** **(** **)**

Returns the Editor's currently active scene.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
