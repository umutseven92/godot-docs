:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the RigidDynamicBody2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_RigidDynamicBody2D:

RigidDynamicBody2D
==================

**Inherits:** :ref:`PhysicsBody2D<class_PhysicsBody2D>` **<** :ref:`CollisionObject2D<class_CollisionObject2D>` **<** :ref:`Node2D<class_Node2D>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`PhysicalBone2D<class_PhysicalBone2D>`

Physics Body which is moved by 2D physics simulation. Useful for objects that have gravity and can be pushed by other objects.

Description
-----------

This node implements simulated 2D physics. You do not control a RigidDynamicBody2D directly. Instead, you apply forces to it (gravity, impulses, etc.) and the physics simulation calculates the resulting movement based on its mass, friction, and other physical properties.

You can switch the body's behavior using :ref:`lock_rotation<class_RigidDynamicBody2D_property_lock_rotation>`, :ref:`freeze<class_RigidDynamicBody2D_property_freeze>`, and :ref:`freeze_mode<class_RigidDynamicBody2D_property_freeze_mode>`.

**Note:** You should not change a RigidDynamicBody2D's ``position`` or ``linear_velocity`` every frame or even very often. If you need to directly affect the body's state, use :ref:`_integrate_forces<class_RigidDynamicBody2D_method__integrate_forces>`, which allows you to directly access the physics state.

Please also keep in mind that physics bodies manage their own transform which overwrites the ones you set. So any direct or indirect transformation (including scaling of the node or its parent) will be visible in the editor only, and immediately reset at runtime.

If you need to override the default physics behavior or add a transformation at runtime, you can write a custom force integration. See :ref:`custom_integrator<class_RigidDynamicBody2D_property_custom_integrator>`.

Tutorials
---------

- `2D Physics Platformer Demo <https://godotengine.org/asset-library/asset/119>`__

- `Instancing Demo <https://godotengine.org/asset-library/asset/148>`__

Properties
----------

+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`float<class_float>`                                         | :ref:`angular_damp<class_RigidDynamicBody2D_property_angular_damp>`                           | ``-1.0``          |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`float<class_float>`                                         | :ref:`angular_velocity<class_RigidDynamicBody2D_property_angular_velocity>`                   | ``0.0``           |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`Vector2<class_Vector2>`                                     | :ref:`applied_force<class_RigidDynamicBody2D_property_applied_force>`                         | ``Vector2(0, 0)`` |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`float<class_float>`                                         | :ref:`applied_torque<class_RigidDynamicBody2D_property_applied_torque>`                       | ``0.0``           |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`bool<class_bool>`                                           | :ref:`can_sleep<class_RigidDynamicBody2D_property_can_sleep>`                                 | ``true``          |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`Vector2<class_Vector2>`                                     | :ref:`center_of_mass<class_RigidDynamicBody2D_property_center_of_mass>`                       | ``Vector2(0, 0)`` |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`CenterOfMassMode<enum_RigidDynamicBody2D_CenterOfMassMode>` | :ref:`center_of_mass_mode<class_RigidDynamicBody2D_property_center_of_mass_mode>`             | ``0``             |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`bool<class_bool>`                                           | :ref:`contact_monitor<class_RigidDynamicBody2D_property_contact_monitor>`                     | ``false``         |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`int<class_int>`                                             | :ref:`contacts_reported<class_RigidDynamicBody2D_property_contacts_reported>`                 | ``0``             |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`CCDMode<enum_RigidDynamicBody2D_CCDMode>`                   | :ref:`continuous_cd<class_RigidDynamicBody2D_property_continuous_cd>`                         | ``0``             |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`bool<class_bool>`                                           | :ref:`custom_integrator<class_RigidDynamicBody2D_property_custom_integrator>`                 | ``false``         |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`bool<class_bool>`                                           | :ref:`freeze<class_RigidDynamicBody2D_property_freeze>`                                       | ``false``         |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`FreezeMode<enum_RigidDynamicBody2D_FreezeMode>`             | :ref:`freeze_mode<class_RigidDynamicBody2D_property_freeze_mode>`                             | ``0``             |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`float<class_float>`                                         | :ref:`gravity_scale<class_RigidDynamicBody2D_property_gravity_scale>`                         | ``1.0``           |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`float<class_float>`                                         | :ref:`inertia<class_RigidDynamicBody2D_property_inertia>`                                     | ``0.0``           |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`float<class_float>`                                         | :ref:`linear_damp<class_RigidDynamicBody2D_property_linear_damp>`                             | ``-1.0``          |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`Vector2<class_Vector2>`                                     | :ref:`linear_velocity<class_RigidDynamicBody2D_property_linear_velocity>`                     | ``Vector2(0, 0)`` |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`bool<class_bool>`                                           | :ref:`lock_rotation<class_RigidDynamicBody2D_property_lock_rotation>`                         | ``false``         |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`float<class_float>`                                         | :ref:`mass<class_RigidDynamicBody2D_property_mass>`                                           | ``1.0``           |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`PhysicsMaterial<class_PhysicsMaterial>`                     | :ref:`physics_material_override<class_RigidDynamicBody2D_property_physics_material_override>` |                   |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+
| :ref:`bool<class_bool>`                                           | :ref:`sleeping<class_RigidDynamicBody2D_property_sleeping>`                                   | ``false``         |
+-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-------------------+

Methods
-------

+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`_integrate_forces<class_RigidDynamicBody2D_method__integrate_forces>` **(** :ref:`PhysicsDirectBodyState2D<class_PhysicsDirectBodyState2D>` state **)** |virtual|     |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`add_central_force<class_RigidDynamicBody2D_method_add_central_force>` **(** :ref:`Vector2<class_Vector2>` force **)**                                                 |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`add_force<class_RigidDynamicBody2D_method_add_force>` **(** :ref:`Vector2<class_Vector2>` force, :ref:`Vector2<class_Vector2>` position=Vector2(0, 0) **)**           |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`add_torque<class_RigidDynamicBody2D_method_add_torque>` **(** :ref:`float<class_float>` torque **)**                                                                  |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`apply_central_impulse<class_RigidDynamicBody2D_method_apply_central_impulse>` **(** :ref:`Vector2<class_Vector2>` impulse=Vector2(0, 0) **)**                         |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`apply_impulse<class_RigidDynamicBody2D_method_apply_impulse>` **(** :ref:`Vector2<class_Vector2>` impulse, :ref:`Vector2<class_Vector2>` position=Vector2(0, 0) **)** |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`apply_torque_impulse<class_RigidDynamicBody2D_method_apply_torque_impulse>` **(** :ref:`float<class_float>` torque **)**                                              |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node2D[]<class_Node2D>` | :ref:`get_colliding_bodies<class_RigidDynamicBody2D_method_get_colliding_bodies>` **(** **)** |const|                                                                       |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`set_axis_velocity<class_RigidDynamicBody2D_method_set_axis_velocity>` **(** :ref:`Vector2<class_Vector2>` axis_velocity **)**                                         |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Signals
-------

.. _class_RigidDynamicBody2D_signal_body_entered:

- **body_entered** **(** :ref:`Node<class_Node>` body **)**

Emitted when a collision with another :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>` occurs. Requires :ref:`contact_monitor<class_RigidDynamicBody2D_property_contact_monitor>` to be set to ``true`` and :ref:`contacts_reported<class_RigidDynamicBody2D_property_contacts_reported>` to be set high enough to detect all the collisions. :ref:`TileMap<class_TileMap>`\ s are detected if the :ref:`TileSet<class_TileSet>` has Collision :ref:`Shape2D<class_Shape2D>`\ s.

``body`` the :ref:`Node<class_Node>`, if it exists in the tree, of the other :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>`.

----

.. _class_RigidDynamicBody2D_signal_body_exited:

- **body_exited** **(** :ref:`Node<class_Node>` body **)**

Emitted when the collision with another :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>` ends. Requires :ref:`contact_monitor<class_RigidDynamicBody2D_property_contact_monitor>` to be set to ``true`` and :ref:`contacts_reported<class_RigidDynamicBody2D_property_contacts_reported>` to be set high enough to detect all the collisions. :ref:`TileMap<class_TileMap>`\ s are detected if the :ref:`TileSet<class_TileSet>` has Collision :ref:`Shape2D<class_Shape2D>`\ s.

``body`` the :ref:`Node<class_Node>`, if it exists in the tree, of the other :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>`.

----

.. _class_RigidDynamicBody2D_signal_body_shape_entered:

- **body_shape_entered** **(** :ref:`RID<class_RID>` body_rid, :ref:`Node<class_Node>` body, :ref:`int<class_int>` body_shape, :ref:`int<class_int>` local_shape **)**

Emitted when one of this RigidDynamicBody2D's :ref:`Shape2D<class_Shape2D>`\ s collides with another :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>`'s :ref:`Shape2D<class_Shape2D>`\ s. Requires :ref:`contact_monitor<class_RigidDynamicBody2D_property_contact_monitor>` to be set to ``true`` and :ref:`contacts_reported<class_RigidDynamicBody2D_property_contacts_reported>` to be set high enough to detect all the collisions. :ref:`TileMap<class_TileMap>`\ s are detected if the :ref:`TileSet<class_TileSet>` has Collision :ref:`Shape2D<class_Shape2D>`\ s.

``body_id`` the :ref:`RID<class_RID>` of the other :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileSet<class_TileSet>`'s :ref:`CollisionObject2D<class_CollisionObject2D>` used by the :ref:`PhysicsServer2D<class_PhysicsServer2D>`.

``body`` the :ref:`Node<class_Node>`, if it exists in the tree, of the other :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>`.

``body_shape`` the index of the :ref:`Shape2D<class_Shape2D>` of the other :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>` used by the :ref:`PhysicsServer2D<class_PhysicsServer2D>`.

``local_shape`` the index of the :ref:`Shape2D<class_Shape2D>` of this RigidDynamicBody2D used by the :ref:`PhysicsServer2D<class_PhysicsServer2D>`.

----

.. _class_RigidDynamicBody2D_signal_body_shape_exited:

- **body_shape_exited** **(** :ref:`RID<class_RID>` body_rid, :ref:`Node<class_Node>` body, :ref:`int<class_int>` body_shape, :ref:`int<class_int>` local_shape **)**

Emitted when the collision between one of this RigidDynamicBody2D's :ref:`Shape2D<class_Shape2D>`\ s and another :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>`'s :ref:`Shape2D<class_Shape2D>`\ s ends. Requires :ref:`contact_monitor<class_RigidDynamicBody2D_property_contact_monitor>` to be set to ``true`` and :ref:`contacts_reported<class_RigidDynamicBody2D_property_contacts_reported>` to be set high enough to detect all the collisions. :ref:`TileMap<class_TileMap>`\ s are detected if the :ref:`TileSet<class_TileSet>` has Collision :ref:`Shape2D<class_Shape2D>`\ s.

``body_id`` the :ref:`RID<class_RID>` of the other :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileSet<class_TileSet>`'s :ref:`CollisionObject2D<class_CollisionObject2D>` used by the :ref:`PhysicsServer2D<class_PhysicsServer2D>`.

``body`` the :ref:`Node<class_Node>`, if it exists in the tree, of the other :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>`.

``body_shape`` the index of the :ref:`Shape2D<class_Shape2D>` of the other :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>` used by the :ref:`PhysicsServer2D<class_PhysicsServer2D>`.

``local_shape`` the index of the :ref:`Shape2D<class_Shape2D>` of this RigidDynamicBody2D used by the :ref:`PhysicsServer2D<class_PhysicsServer2D>`.

----

.. _class_RigidDynamicBody2D_signal_sleeping_state_changed:

- **sleeping_state_changed** **(** **)**

Emitted when the physics engine changes the body's sleeping state.

**Note:** Changing the value :ref:`sleeping<class_RigidDynamicBody2D_property_sleeping>` will not trigger this signal. It is only emitted if the sleeping state is changed by the physics engine or ``emit_signal("sleeping_state_changed")`` is used.

Enumerations
------------

.. _enum_RigidDynamicBody2D_FreezeMode:

.. _class_RigidDynamicBody2D_constant_FREEZE_MODE_STATIC:

.. _class_RigidDynamicBody2D_constant_FREEZE_MODE_KINEMATIC:

enum **FreezeMode**:

- **FREEZE_MODE_STATIC** = **0** --- Static body freeze mode (default). The body is not affected by gravity and forces. It can be only moved by user code and doesn't collide with other bodies along its path.

- **FREEZE_MODE_KINEMATIC** = **1** --- Kinematic body freeze mode. Similar to :ref:`FREEZE_MODE_STATIC<class_RigidDynamicBody2D_constant_FREEZE_MODE_STATIC>`, but collides with other bodies along its path when moved. Useful for a frozen body that needs to be animated.

----

.. _enum_RigidDynamicBody2D_CenterOfMassMode:

.. _class_RigidDynamicBody2D_constant_CENTER_OF_MASS_MODE_AUTO:

.. _class_RigidDynamicBody2D_constant_CENTER_OF_MASS_MODE_CUSTOM:

enum **CenterOfMassMode**:

- **CENTER_OF_MASS_MODE_AUTO** = **0** --- In this mode, the body's center of mass is calculated automatically based on its shapes.

- **CENTER_OF_MASS_MODE_CUSTOM** = **1** --- In this mode, the body's center of mass is set through :ref:`center_of_mass<class_RigidDynamicBody2D_property_center_of_mass>`. Defaults to the body's origin position.

----

.. _enum_RigidDynamicBody2D_CCDMode:

.. _class_RigidDynamicBody2D_constant_CCD_MODE_DISABLED:

.. _class_RigidDynamicBody2D_constant_CCD_MODE_CAST_RAY:

.. _class_RigidDynamicBody2D_constant_CCD_MODE_CAST_SHAPE:

enum **CCDMode**:

- **CCD_MODE_DISABLED** = **0** --- Continuous collision detection disabled. This is the fastest way to detect body collisions, but can miss small, fast-moving objects.

- **CCD_MODE_CAST_RAY** = **1** --- Continuous collision detection enabled using raycasting. This is faster than shapecasting but less precise.

- **CCD_MODE_CAST_SHAPE** = **2** --- Continuous collision detection enabled using shapecasting. This is the slowest CCD method and the most precise.

Property Descriptions
---------------------

.. _class_RigidDynamicBody2D_property_angular_damp:

- :ref:`float<class_float>` **angular_damp**

+-----------+-------------------------+
| *Default* | ``-1.0``                |
+-----------+-------------------------+
| *Setter*  | set_angular_damp(value) |
+-----------+-------------------------+
| *Getter*  | get_angular_damp()      |
+-----------+-------------------------+

Damps the body's :ref:`angular_velocity<class_RigidDynamicBody2D_property_angular_velocity>`. If ``-1``, the body will use the **Default Angular Damp** defined in **Project > Project Settings > Physics > 2d**.

See :ref:`ProjectSettings.physics/2d/default_angular_damp<class_ProjectSettings_property_physics/2d/default_angular_damp>` for more details about damping.

----

.. _class_RigidDynamicBody2D_property_angular_velocity:

- :ref:`float<class_float>` **angular_velocity**

+-----------+-----------------------------+
| *Default* | ``0.0``                     |
+-----------+-----------------------------+
| *Setter*  | set_angular_velocity(value) |
+-----------+-----------------------------+
| *Getter*  | get_angular_velocity()      |
+-----------+-----------------------------+

The body's rotational velocity.

----

.. _class_RigidDynamicBody2D_property_applied_force:

- :ref:`Vector2<class_Vector2>` **applied_force**

+-----------+--------------------------+
| *Default* | ``Vector2(0, 0)``        |
+-----------+--------------------------+
| *Setter*  | set_applied_force(value) |
+-----------+--------------------------+
| *Getter*  | get_applied_force()      |
+-----------+--------------------------+

The body's total applied force.

----

.. _class_RigidDynamicBody2D_property_applied_torque:

- :ref:`float<class_float>` **applied_torque**

+-----------+---------------------------+
| *Default* | ``0.0``                   |
+-----------+---------------------------+
| *Setter*  | set_applied_torque(value) |
+-----------+---------------------------+
| *Getter*  | get_applied_torque()      |
+-----------+---------------------------+

The body's total applied torque.

----

.. _class_RigidDynamicBody2D_property_can_sleep:

- :ref:`bool<class_bool>` **can_sleep**

+-----------+----------------------+
| *Default* | ``true``             |
+-----------+----------------------+
| *Setter*  | set_can_sleep(value) |
+-----------+----------------------+
| *Getter*  | is_able_to_sleep()   |
+-----------+----------------------+

If ``true``, the body can enter sleep mode when there is no movement. See :ref:`sleeping<class_RigidDynamicBody2D_property_sleeping>`.

----

.. _class_RigidDynamicBody2D_property_center_of_mass:

- :ref:`Vector2<class_Vector2>` **center_of_mass**

+-----------+---------------------------+
| *Default* | ``Vector2(0, 0)``         |
+-----------+---------------------------+
| *Setter*  | set_center_of_mass(value) |
+-----------+---------------------------+
| *Getter*  | get_center_of_mass()      |
+-----------+---------------------------+

The body's custom center of mass, relative to the body's origin position, when :ref:`center_of_mass_mode<class_RigidDynamicBody2D_property_center_of_mass_mode>` is set to :ref:`CENTER_OF_MASS_MODE_CUSTOM<class_RigidDynamicBody2D_constant_CENTER_OF_MASS_MODE_CUSTOM>`. This is the balanced point of the body, where applied forces only cause linear acceleration. Applying forces outside of the center of mass causes angular acceleration.

When :ref:`center_of_mass_mode<class_RigidDynamicBody2D_property_center_of_mass_mode>` is set to :ref:`CENTER_OF_MASS_MODE_AUTO<class_RigidDynamicBody2D_constant_CENTER_OF_MASS_MODE_AUTO>` (default value), the center of mass is automatically computed.

----

.. _class_RigidDynamicBody2D_property_center_of_mass_mode:

- :ref:`CenterOfMassMode<enum_RigidDynamicBody2D_CenterOfMassMode>` **center_of_mass_mode**

+-----------+--------------------------------+
| *Default* | ``0``                          |
+-----------+--------------------------------+
| *Setter*  | set_center_of_mass_mode(value) |
+-----------+--------------------------------+
| *Getter*  | get_center_of_mass_mode()      |
+-----------+--------------------------------+

Defines the way the body's center of mass is set. See :ref:`CenterOfMassMode<enum_RigidDynamicBody2D_CenterOfMassMode>` for possible values.

----

.. _class_RigidDynamicBody2D_property_contact_monitor:

- :ref:`bool<class_bool>` **contact_monitor**

+-----------+------------------------------+
| *Default* | ``false``                    |
+-----------+------------------------------+
| *Setter*  | set_contact_monitor(value)   |
+-----------+------------------------------+
| *Getter*  | is_contact_monitor_enabled() |
+-----------+------------------------------+

If ``true``, the body will emit signals when it collides with another RigidDynamicBody2D. See also :ref:`contacts_reported<class_RigidDynamicBody2D_property_contacts_reported>`.

----

.. _class_RigidDynamicBody2D_property_contacts_reported:

- :ref:`int<class_int>` **contacts_reported**

+-----------+----------------------------------+
| *Default* | ``0``                            |
+-----------+----------------------------------+
| *Setter*  | set_max_contacts_reported(value) |
+-----------+----------------------------------+
| *Getter*  | get_max_contacts_reported()      |
+-----------+----------------------------------+

The maximum number of contacts that will be recorded. Requires :ref:`contact_monitor<class_RigidDynamicBody2D_property_contact_monitor>` to be set to ``true``.

**Note:** The number of contacts is different from the number of collisions. Collisions between parallel edges will result in two contacts (one at each end).

----

.. _class_RigidDynamicBody2D_property_continuous_cd:

- :ref:`CCDMode<enum_RigidDynamicBody2D_CCDMode>` **continuous_cd**

+-----------+------------------------------------------------+
| *Default* | ``0``                                          |
+-----------+------------------------------------------------+
| *Setter*  | set_continuous_collision_detection_mode(value) |
+-----------+------------------------------------------------+
| *Getter*  | get_continuous_collision_detection_mode()      |
+-----------+------------------------------------------------+

Continuous collision detection mode.

Continuous collision detection tries to predict where a moving body will collide instead of moving it and correcting its movement after collision. Continuous collision detection is slower, but more precise and misses fewer collisions with small, fast-moving objects. Raycasting and shapecasting methods are available. See :ref:`CCDMode<enum_RigidDynamicBody2D_CCDMode>` for details.

----

.. _class_RigidDynamicBody2D_property_custom_integrator:

- :ref:`bool<class_bool>` **custom_integrator**

+-----------+----------------------------------+
| *Default* | ``false``                        |
+-----------+----------------------------------+
| *Setter*  | set_use_custom_integrator(value) |
+-----------+----------------------------------+
| *Getter*  | is_using_custom_integrator()     |
+-----------+----------------------------------+

If ``true``, internal force integration is disabled for this body. Aside from collision response, the body will only move as determined by the :ref:`_integrate_forces<class_RigidDynamicBody2D_method__integrate_forces>` function.

----

.. _class_RigidDynamicBody2D_property_freeze:

- :ref:`bool<class_bool>` **freeze**

+-----------+---------------------------+
| *Default* | ``false``                 |
+-----------+---------------------------+
| *Setter*  | set_freeze_enabled(value) |
+-----------+---------------------------+
| *Getter*  | is_freeze_enabled()       |
+-----------+---------------------------+

If ``true``, the body is frozen. Gravity and forces are not applied anymore.

See :ref:`freeze_mode<class_RigidDynamicBody2D_property_freeze_mode>` to set the body's behavior when frozen.

For a body that is always frozen, use :ref:`StaticBody2D<class_StaticBody2D>` or :ref:`AnimatableBody2D<class_AnimatableBody2D>` instead.

----

.. _class_RigidDynamicBody2D_property_freeze_mode:

- :ref:`FreezeMode<enum_RigidDynamicBody2D_FreezeMode>` **freeze_mode**

+-----------+------------------------+
| *Default* | ``0``                  |
+-----------+------------------------+
| *Setter*  | set_freeze_mode(value) |
+-----------+------------------------+
| *Getter*  | get_freeze_mode()      |
+-----------+------------------------+

The body's freeze mode. Can be used to set the body's behavior when :ref:`freeze<class_RigidDynamicBody2D_property_freeze>` is enabled. See :ref:`FreezeMode<enum_RigidDynamicBody2D_FreezeMode>` for possible values.

For a body that is always frozen, use :ref:`StaticBody2D<class_StaticBody2D>` or :ref:`AnimatableBody2D<class_AnimatableBody2D>` instead.

----

.. _class_RigidDynamicBody2D_property_gravity_scale:

- :ref:`float<class_float>` **gravity_scale**

+-----------+--------------------------+
| *Default* | ``1.0``                  |
+-----------+--------------------------+
| *Setter*  | set_gravity_scale(value) |
+-----------+--------------------------+
| *Getter*  | get_gravity_scale()      |
+-----------+--------------------------+

Multiplies the gravity applied to the body. The body's gravity is calculated from the **Default Gravity** value in **Project > Project Settings > Physics > 2d** and/or any additional gravity vector applied by :ref:`Area2D<class_Area2D>`\ s.

----

.. _class_RigidDynamicBody2D_property_inertia:

- :ref:`float<class_float>` **inertia**

+-----------+--------------------+
| *Default* | ``0.0``            |
+-----------+--------------------+
| *Setter*  | set_inertia(value) |
+-----------+--------------------+
| *Getter*  | get_inertia()      |
+-----------+--------------------+

The body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body. The moment of inertia is usually computed automatically from the mass and the shapes, but this property allows you to set a custom value.

If set to ``0``, inertia is automatically computed (default value).

----

.. _class_RigidDynamicBody2D_property_linear_damp:

- :ref:`float<class_float>` **linear_damp**

+-----------+------------------------+
| *Default* | ``-1.0``               |
+-----------+------------------------+
| *Setter*  | set_linear_damp(value) |
+-----------+------------------------+
| *Getter*  | get_linear_damp()      |
+-----------+------------------------+

Damps the body's :ref:`linear_velocity<class_RigidDynamicBody2D_property_linear_velocity>`. If ``-1``, the body will use the **Default Linear Damp** in **Project > Project Settings > Physics > 2d**.

See :ref:`ProjectSettings.physics/2d/default_linear_damp<class_ProjectSettings_property_physics/2d/default_linear_damp>` for more details about damping.

----

.. _class_RigidDynamicBody2D_property_linear_velocity:

- :ref:`Vector2<class_Vector2>` **linear_velocity**

+-----------+----------------------------+
| *Default* | ``Vector2(0, 0)``          |
+-----------+----------------------------+
| *Setter*  | set_linear_velocity(value) |
+-----------+----------------------------+
| *Getter*  | get_linear_velocity()      |
+-----------+----------------------------+

The body's linear velocity.

----

.. _class_RigidDynamicBody2D_property_lock_rotation:

- :ref:`bool<class_bool>` **lock_rotation**

+-----------+----------------------------------+
| *Default* | ``false``                        |
+-----------+----------------------------------+
| *Setter*  | set_lock_rotation_enabled(value) |
+-----------+----------------------------------+
| *Getter*  | is_lock_rotation_enabled()       |
+-----------+----------------------------------+

If ``true``, the body cannot rotate. Gravity and forces only apply linear movement.

----

.. _class_RigidDynamicBody2D_property_mass:

- :ref:`float<class_float>` **mass**

+-----------+-----------------+
| *Default* | ``1.0``         |
+-----------+-----------------+
| *Setter*  | set_mass(value) |
+-----------+-----------------+
| *Getter*  | get_mass()      |
+-----------+-----------------+

The body's mass.

----

.. _class_RigidDynamicBody2D_property_physics_material_override:

- :ref:`PhysicsMaterial<class_PhysicsMaterial>` **physics_material_override**

+----------+--------------------------------------+
| *Setter* | set_physics_material_override(value) |
+----------+--------------------------------------+
| *Getter* | get_physics_material_override()      |
+----------+--------------------------------------+

The physics material override for the body.

If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one.

----

.. _class_RigidDynamicBody2D_property_sleeping:

- :ref:`bool<class_bool>` **sleeping**

+-----------+---------------------+
| *Default* | ``false``           |
+-----------+---------------------+
| *Setter*  | set_sleeping(value) |
+-----------+---------------------+
| *Getter*  | is_sleeping()       |
+-----------+---------------------+

If ``true``, the body will not move and will not calculate forces until woken up by another body through, for example, a collision, or by using the :ref:`apply_impulse<class_RigidDynamicBody2D_method_apply_impulse>` or :ref:`add_force<class_RigidDynamicBody2D_method_add_force>` methods.

Method Descriptions
-------------------

.. _class_RigidDynamicBody2D_method__integrate_forces:

- void **_integrate_forces** **(** :ref:`PhysicsDirectBodyState2D<class_PhysicsDirectBodyState2D>` state **)** |virtual|

Allows you to read and safely modify the simulation state for the object. Use this instead of :ref:`Node._physics_process<class_Node_method__physics_process>` if you need to directly change the body's ``position`` or other physics properties. By default, it works in addition to the usual physics behavior, but :ref:`custom_integrator<class_RigidDynamicBody2D_property_custom_integrator>` allows you to disable the default behavior and write custom force integration for a body.

----

.. _class_RigidDynamicBody2D_method_add_central_force:

- void **add_central_force** **(** :ref:`Vector2<class_Vector2>` force **)**

Adds a constant directional force without affecting rotation.

----

.. _class_RigidDynamicBody2D_method_add_force:

- void **add_force** **(** :ref:`Vector2<class_Vector2>` force, :ref:`Vector2<class_Vector2>` position=Vector2(0, 0) **)**

Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates.

----

.. _class_RigidDynamicBody2D_method_add_torque:

- void **add_torque** **(** :ref:`float<class_float>` torque **)**

Adds a constant rotational force.

----

.. _class_RigidDynamicBody2D_method_apply_central_impulse:

- void **apply_central_impulse** **(** :ref:`Vector2<class_Vector2>` impulse=Vector2(0, 0) **)**

Applies a directional impulse without affecting rotation.

----

.. _class_RigidDynamicBody2D_method_apply_impulse:

- void **apply_impulse** **(** :ref:`Vector2<class_Vector2>` impulse, :ref:`Vector2<class_Vector2>` position=Vector2(0, 0) **)**

Applies a positioned impulse to the body. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason it should only be used when simulating one-time impacts (use the "_force" functions otherwise). The position uses the rotation of the global coordinate system, but is centered at the object's origin.

----

.. _class_RigidDynamicBody2D_method_apply_torque_impulse:

- void **apply_torque_impulse** **(** :ref:`float<class_float>` torque **)**

Applies a rotational impulse to the body.

----

.. _class_RigidDynamicBody2D_method_get_colliding_bodies:

- :ref:`Node2D[]<class_Node2D>` **get_colliding_bodies** **(** **)** |const|

Returns a list of the bodies colliding with this one. Requires :ref:`contact_monitor<class_RigidDynamicBody2D_property_contact_monitor>` to be set to ``true`` and :ref:`contacts_reported<class_RigidDynamicBody2D_property_contacts_reported>` to be set high enough to detect all the collisions.

**Note:** The result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead.

----

.. _class_RigidDynamicBody2D_method_set_axis_velocity:

- void **set_axis_velocity** **(** :ref:`Vector2<class_Vector2>` axis_velocity **)**

Sets the body's velocity on the given axis. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
