:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Camera3D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Camera3D:

Camera3D
========

**Inherits:** :ref:`Node3D<class_Node3D>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`XRCamera3D<class_XRCamera3D>`

Camera node, displays from a point of view.

Description
-----------

``Camera3D`` is a special node that displays what is visible from its current location. Cameras register themselves in the nearest :ref:`Viewport<class_Viewport>` node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the camera will register in the global viewport. In other words, a camera just provides 3D display capabilities to a :ref:`Viewport<class_Viewport>`, and, without one, a scene registered in that :ref:`Viewport<class_Viewport>` (or higher viewports) can't be displayed.

Tutorials
---------

- `Third Person Shooter Demo <https://godotengine.org/asset-library/asset/678>`__

Properties
----------

+-------------------------------------------------------+-------------------------------------------------------------------+-------------------+
| :ref:`int<class_int>`                                 | :ref:`cull_mask<class_Camera3D_property_cull_mask>`               | ``1048575``       |
+-------------------------------------------------------+-------------------------------------------------------------------+-------------------+
| :ref:`bool<class_bool>`                               | :ref:`current<class_Camera3D_property_current>`                   | ``false``         |
+-------------------------------------------------------+-------------------------------------------------------------------+-------------------+
| :ref:`DopplerTracking<enum_Camera3D_DopplerTracking>` | :ref:`doppler_tracking<class_Camera3D_property_doppler_tracking>` | ``0``             |
+-------------------------------------------------------+-------------------------------------------------------------------+-------------------+
| :ref:`CameraEffects<class_CameraEffects>`             | :ref:`effects<class_Camera3D_property_effects>`                   |                   |
+-------------------------------------------------------+-------------------------------------------------------------------+-------------------+
| :ref:`Environment<class_Environment>`                 | :ref:`environment<class_Camera3D_property_environment>`           |                   |
+-------------------------------------------------------+-------------------------------------------------------------------+-------------------+
| :ref:`float<class_float>`                             | :ref:`far<class_Camera3D_property_far>`                           | ``4000.0``        |
+-------------------------------------------------------+-------------------------------------------------------------------+-------------------+
| :ref:`float<class_float>`                             | :ref:`fov<class_Camera3D_property_fov>`                           | ``75.0``          |
+-------------------------------------------------------+-------------------------------------------------------------------+-------------------+
| :ref:`Vector2<class_Vector2>`                         | :ref:`frustum_offset<class_Camera3D_property_frustum_offset>`     | ``Vector2(0, 0)`` |
+-------------------------------------------------------+-------------------------------------------------------------------+-------------------+
| :ref:`float<class_float>`                             | :ref:`h_offset<class_Camera3D_property_h_offset>`                 | ``0.0``           |
+-------------------------------------------------------+-------------------------------------------------------------------+-------------------+
| :ref:`KeepAspect<enum_Camera3D_KeepAspect>`           | :ref:`keep_aspect<class_Camera3D_property_keep_aspect>`           | ``1``             |
+-------------------------------------------------------+-------------------------------------------------------------------+-------------------+
| :ref:`float<class_float>`                             | :ref:`near<class_Camera3D_property_near>`                         | ``0.05``          |
+-------------------------------------------------------+-------------------------------------------------------------------+-------------------+
| :ref:`Projection<enum_Camera3D_Projection>`           | :ref:`projection<class_Camera3D_property_projection>`             | ``0``             |
+-------------------------------------------------------+-------------------------------------------------------------------+-------------------+
| :ref:`float<class_float>`                             | :ref:`size<class_Camera3D_property_size>`                         | ``1.0``           |
+-------------------------------------------------------+-------------------------------------------------------------------+-------------------+
| :ref:`float<class_float>`                             | :ref:`v_offset<class_Camera3D_property_v_offset>`                 | ``0.0``           |
+-------------------------------------------------------+-------------------------------------------------------------------+-------------------+

Methods
-------

+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`clear_current<class_Camera3D_method_clear_current>` **(** :ref:`bool<class_bool>` enable_next=true **)**                                                                                            |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`RID<class_RID>`                 | :ref:`get_camera_rid<class_Camera3D_method_get_camera_rid>` **(** **)** |const|                                                                                                                           |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform3D<class_Transform3D>` | :ref:`get_camera_transform<class_Camera3D_method_get_camera_transform>` **(** **)** |const|                                                                                                               |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`get_cull_mask_value<class_Camera3D_method_get_cull_mask_value>` **(** :ref:`int<class_int>` layer_number **)** |const|                                                                              |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`             | :ref:`get_frustum<class_Camera3D_method_get_frustum>` **(** **)** |const|                                                                                                                                 |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`RID<class_RID>`                 | :ref:`get_pyramid_shape_rid<class_Camera3D_method_get_pyramid_shape_rid>` **(** **)**                                                                                                                     |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`is_position_behind<class_Camera3D_method_is_position_behind>` **(** :ref:`Vector3<class_Vector3>` world_point **)** |const|                                                                         |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`is_position_in_frustum<class_Camera3D_method_is_position_in_frustum>` **(** :ref:`Vector3<class_Vector3>` world_point **)** |const|                                                                 |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`make_current<class_Camera3D_method_make_current>` **(** **)**                                                                                                                                       |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`         | :ref:`project_local_ray_normal<class_Camera3D_method_project_local_ray_normal>` **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|                                                            |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`         | :ref:`project_position<class_Camera3D_method_project_position>` **(** :ref:`Vector2<class_Vector2>` screen_point, :ref:`float<class_float>` z_depth **)** |const|                                         |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`         | :ref:`project_ray_normal<class_Camera3D_method_project_ray_normal>` **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|                                                                        |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`         | :ref:`project_ray_origin<class_Camera3D_method_project_ray_origin>` **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|                                                                        |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`set_cull_mask_value<class_Camera3D_method_set_cull_mask_value>` **(** :ref:`int<class_int>` layer_number, :ref:`bool<class_bool>` value **)**                                                       |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`set_frustum<class_Camera3D_method_set_frustum>` **(** :ref:`float<class_float>` size, :ref:`Vector2<class_Vector2>` offset, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)** |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`set_orthogonal<class_Camera3D_method_set_orthogonal>` **(** :ref:`float<class_float>` size, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)**                                 |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`set_perspective<class_Camera3D_method_set_perspective>` **(** :ref:`float<class_float>` fov, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)**                                |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`unproject_position<class_Camera3D_method_unproject_position>` **(** :ref:`Vector3<class_Vector3>` world_point **)** |const|                                                                         |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumerations
------------

.. _enum_Camera3D_Projection:

.. _class_Camera3D_constant_PROJECTION_PERSPECTIVE:

.. _class_Camera3D_constant_PROJECTION_ORTHOGONAL:

.. _class_Camera3D_constant_PROJECTION_FRUSTUM:

enum **Projection**:

- **PROJECTION_PERSPECTIVE** = **0** --- Perspective projection. Objects on the screen becomes smaller when they are far away.

- **PROJECTION_ORTHOGONAL** = **1** --- Orthogonal projection, also known as orthographic projection. Objects remain the same size on the screen no matter how far away they are.

- **PROJECTION_FRUSTUM** = **2** --- Frustum projection. This mode allows adjusting :ref:`frustum_offset<class_Camera3D_property_frustum_offset>` to create "tilted frustum" effects.

----

.. _enum_Camera3D_KeepAspect:

.. _class_Camera3D_constant_KEEP_WIDTH:

.. _class_Camera3D_constant_KEEP_HEIGHT:

enum **KeepAspect**:

- **KEEP_WIDTH** = **0** --- Preserves the horizontal aspect ratio; also known as Vert- scaling. This is usually the best option for projects running in portrait mode, as taller aspect ratios will benefit from a wider vertical FOV.

- **KEEP_HEIGHT** = **1** --- Preserves the vertical aspect ratio; also known as Hor+ scaling. This is usually the best option for projects running in landscape mode, as wider aspect ratios will automatically benefit from a wider horizontal FOV.

----

.. _enum_Camera3D_DopplerTracking:

.. _class_Camera3D_constant_DOPPLER_TRACKING_DISABLED:

.. _class_Camera3D_constant_DOPPLER_TRACKING_IDLE_STEP:

.. _class_Camera3D_constant_DOPPLER_TRACKING_PHYSICS_STEP:

enum **DopplerTracking**:

- **DOPPLER_TRACKING_DISABLED** = **0** --- Disables `Doppler effect <https://en.wikipedia.org/wiki/Doppler_effect>`__ simulation (default).

- **DOPPLER_TRACKING_IDLE_STEP** = **1** --- Simulate `Doppler effect <https://en.wikipedia.org/wiki/Doppler_effect>`__ by tracking positions of objects that are changed in ``_process``. Changes in the relative velocity of this camera compared to those objects affect how Audio is perceived (changing the Audio's ``pitch shift``).

- **DOPPLER_TRACKING_PHYSICS_STEP** = **2** --- Simulate `Doppler effect <https://en.wikipedia.org/wiki/Doppler_effect>`__ by tracking positions of objects that are changed in ``_physics_process``. Changes in the relative velocity of this camera compared to those objects affect how Audio is perceived (changing the Audio's ``pitch shift``).

Property Descriptions
---------------------

.. _class_Camera3D_property_cull_mask:

- :ref:`int<class_int>` **cull_mask**

+-----------+----------------------+
| *Default* | ``1048575``          |
+-----------+----------------------+
| *Setter*  | set_cull_mask(value) |
+-----------+----------------------+
| *Getter*  | get_cull_mask()      |
+-----------+----------------------+

The culling mask that describes which 3D render layers are rendered by this camera.

----

.. _class_Camera3D_property_current:

- :ref:`bool<class_bool>` **current**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_current(value) |
+-----------+--------------------+
| *Getter*  | is_current()       |
+-----------+--------------------+

If ``true``, the ancestor :ref:`Viewport<class_Viewport>` is currently using this camera.

----

.. _class_Camera3D_property_doppler_tracking:

- :ref:`DopplerTracking<enum_Camera3D_DopplerTracking>` **doppler_tracking**

+-----------+-----------------------------+
| *Default* | ``0``                       |
+-----------+-----------------------------+
| *Setter*  | set_doppler_tracking(value) |
+-----------+-----------------------------+
| *Getter*  | get_doppler_tracking()      |
+-----------+-----------------------------+

If not :ref:`DOPPLER_TRACKING_DISABLED<class_Camera3D_constant_DOPPLER_TRACKING_DISABLED>`, this camera will simulate the `Doppler effect <https://en.wikipedia.org/wiki/Doppler_effect>`__ for objects changed in particular ``_process`` methods. See :ref:`DopplerTracking<enum_Camera3D_DopplerTracking>` for possible values.

----

.. _class_Camera3D_property_effects:

- :ref:`CameraEffects<class_CameraEffects>` **effects**

+----------+--------------------+
| *Setter* | set_effects(value) |
+----------+--------------------+
| *Getter* | get_effects()      |
+----------+--------------------+

The :ref:`CameraEffects<class_CameraEffects>` to use for this camera.

----

.. _class_Camera3D_property_environment:

- :ref:`Environment<class_Environment>` **environment**

+----------+------------------------+
| *Setter* | set_environment(value) |
+----------+------------------------+
| *Getter* | get_environment()      |
+----------+------------------------+

The :ref:`Environment<class_Environment>` to use for this camera.

----

.. _class_Camera3D_property_far:

- :ref:`float<class_float>` **far**

+-----------+----------------+
| *Default* | ``4000.0``     |
+-----------+----------------+
| *Setter*  | set_far(value) |
+-----------+----------------+
| *Getter*  | get_far()      |
+-----------+----------------+

The distance to the far culling boundary for this camera relative to its local Z axis.

----

.. _class_Camera3D_property_fov:

- :ref:`float<class_float>` **fov**

+-----------+----------------+
| *Default* | ``75.0``       |
+-----------+----------------+
| *Setter*  | set_fov(value) |
+-----------+----------------+
| *Getter*  | get_fov()      |
+-----------+----------------+

The camera's field of view angle (in degrees). Only applicable in perspective mode. Since :ref:`keep_aspect<class_Camera3D_property_keep_aspect>` locks one axis, ``fov`` sets the other axis' field of view angle.

For reference, the default vertical field of view value (``75.0``) is equivalent to a horizontal FOV of:

- ~91.31 degrees in a 4:3 viewport

- ~101.67 degrees in a 16:10 viewport

- ~107.51 degrees in a 16:9 viewport

- ~121.63 degrees in a 21:9 viewport

----

.. _class_Camera3D_property_frustum_offset:

- :ref:`Vector2<class_Vector2>` **frustum_offset**

+-----------+---------------------------+
| *Default* | ``Vector2(0, 0)``         |
+-----------+---------------------------+
| *Setter*  | set_frustum_offset(value) |
+-----------+---------------------------+
| *Getter*  | get_frustum_offset()      |
+-----------+---------------------------+

The camera's frustum offset. This can be changed from the default to create "tilted frustum" effects such as `Y-shearing <https://zdoom.org/wiki/Y-shearing>`__.

----

.. _class_Camera3D_property_h_offset:

- :ref:`float<class_float>` **h_offset**

+-----------+---------------------+
| *Default* | ``0.0``             |
+-----------+---------------------+
| *Setter*  | set_h_offset(value) |
+-----------+---------------------+
| *Getter*  | get_h_offset()      |
+-----------+---------------------+

The horizontal (X) offset of the camera viewport.

----

.. _class_Camera3D_property_keep_aspect:

- :ref:`KeepAspect<enum_Camera3D_KeepAspect>` **keep_aspect**

+-----------+-----------------------------+
| *Default* | ``1``                       |
+-----------+-----------------------------+
| *Setter*  | set_keep_aspect_mode(value) |
+-----------+-----------------------------+
| *Getter*  | get_keep_aspect_mode()      |
+-----------+-----------------------------+

The axis to lock during :ref:`fov<class_Camera3D_property_fov>`/:ref:`size<class_Camera3D_property_size>` adjustments. Can be either :ref:`KEEP_WIDTH<class_Camera3D_constant_KEEP_WIDTH>` or :ref:`KEEP_HEIGHT<class_Camera3D_constant_KEEP_HEIGHT>`.

----

.. _class_Camera3D_property_near:

- :ref:`float<class_float>` **near**

+-----------+-----------------+
| *Default* | ``0.05``        |
+-----------+-----------------+
| *Setter*  | set_near(value) |
+-----------+-----------------+
| *Getter*  | get_near()      |
+-----------+-----------------+

The distance to the near culling boundary for this camera relative to its local Z axis.

----

.. _class_Camera3D_property_projection:

- :ref:`Projection<enum_Camera3D_Projection>` **projection**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_projection(value) |
+-----------+-----------------------+
| *Getter*  | get_projection()      |
+-----------+-----------------------+

The camera's projection mode. In :ref:`PROJECTION_PERSPECTIVE<class_Camera3D_constant_PROJECTION_PERSPECTIVE>` mode, objects' Z distance from the camera's local space scales their perceived size.

----

.. _class_Camera3D_property_size:

- :ref:`float<class_float>` **size**

+-----------+-----------------+
| *Default* | ``1.0``         |
+-----------+-----------------+
| *Setter*  | set_size(value) |
+-----------+-----------------+
| *Getter*  | get_size()      |
+-----------+-----------------+

The camera's size measured as 1/2 the width or height. Only applicable in orthogonal mode. Since :ref:`keep_aspect<class_Camera3D_property_keep_aspect>` locks on axis, ``size`` sets the other axis' size length.

----

.. _class_Camera3D_property_v_offset:

- :ref:`float<class_float>` **v_offset**

+-----------+---------------------+
| *Default* | ``0.0``             |
+-----------+---------------------+
| *Setter*  | set_v_offset(value) |
+-----------+---------------------+
| *Getter*  | get_v_offset()      |
+-----------+---------------------+

The vertical (Y) offset of the camera viewport.

Method Descriptions
-------------------

.. _class_Camera3D_method_clear_current:

- void **clear_current** **(** :ref:`bool<class_bool>` enable_next=true **)**

If this is the current camera, remove it from being current. If ``enable_next`` is ``true``, request to make the next camera current, if any.

----

.. _class_Camera3D_method_get_camera_rid:

- :ref:`RID<class_RID>` **get_camera_rid** **(** **)** |const|

Returns the camera's RID from the :ref:`RenderingServer<class_RenderingServer>`.

----

.. _class_Camera3D_method_get_camera_transform:

- :ref:`Transform3D<class_Transform3D>` **get_camera_transform** **(** **)** |const|

Returns the transform of the camera plus the vertical (:ref:`v_offset<class_Camera3D_property_v_offset>`) and horizontal (:ref:`h_offset<class_Camera3D_property_h_offset>`) offsets; and any other adjustments made to the position and orientation of the camera by subclassed cameras such as :ref:`XRCamera3D<class_XRCamera3D>`.

----

.. _class_Camera3D_method_get_cull_mask_value:

- :ref:`bool<class_bool>` **get_cull_mask_value** **(** :ref:`int<class_int>` layer_number **)** |const|

Returns whether or not the specified layer of the :ref:`cull_mask<class_Camera3D_property_cull_mask>` is enabled, given a ``layer_number`` between 1 and 20.

----

.. _class_Camera3D_method_get_frustum:

- :ref:`Array<class_Array>` **get_frustum** **(** **)** |const|

Returns the camera's frustum planes in world space units as an array of :ref:`Plane<class_Plane>`\ s in the following order: near, far, left, top, right, bottom. Not to be confused with :ref:`frustum_offset<class_Camera3D_property_frustum_offset>`.

----

.. _class_Camera3D_method_get_pyramid_shape_rid:

- :ref:`RID<class_RID>` **get_pyramid_shape_rid** **(** **)**

Returns the RID of a pyramid shape encompassing the camera's view frustum, ignoring the camera's near plane. The tip of the pyramid represents the position of the camera.

----

.. _class_Camera3D_method_is_position_behind:

- :ref:`bool<class_bool>` **is_position_behind** **(** :ref:`Vector3<class_Vector3>` world_point **)** |const|

Returns ``true`` if the given position is behind the camera (the blue part of the linked diagram). `See this diagram <https://raw.githubusercontent.com/godotengine/godot-docs/master/img/camera3d_position_frustum.png>`__ for an overview of position query methods.

**Note:** A position which returns ``false`` may still be outside the camera's field of view.

----

.. _class_Camera3D_method_is_position_in_frustum:

- :ref:`bool<class_bool>` **is_position_in_frustum** **(** :ref:`Vector3<class_Vector3>` world_point **)** |const|

Returns ``true`` if the given position is inside the camera's frustum (the green part of the linked diagram). `See this diagram <https://raw.githubusercontent.com/godotengine/godot-docs/master/img/camera3d_position_frustum.png>`__ for an overview of position query methods.

----

.. _class_Camera3D_method_make_current:

- void **make_current** **(** **)**

Makes this camera the current camera for the :ref:`Viewport<class_Viewport>` (see class description). If the camera node is outside the scene tree, it will attempt to become current once it's added.

----

.. _class_Camera3D_method_project_local_ray_normal:

- :ref:`Vector3<class_Vector3>` **project_local_ray_normal** **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|

Returns a normal vector from the screen point location directed along the camera. Orthogonal cameras are normalized. Perspective cameras account for perspective, screen width/height, etc.

----

.. _class_Camera3D_method_project_position:

- :ref:`Vector3<class_Vector3>` **project_position** **(** :ref:`Vector2<class_Vector2>` screen_point, :ref:`float<class_float>` z_depth **)** |const|

Returns the 3D point in world space that maps to the given 2D coordinate in the :ref:`Viewport<class_Viewport>` rectangle on a plane that is the given ``z_depth`` distance into the scene away from the camera.

----

.. _class_Camera3D_method_project_ray_normal:

- :ref:`Vector3<class_Vector3>` **project_ray_normal** **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|

Returns a normal vector in world space, that is the result of projecting a point on the :ref:`Viewport<class_Viewport>` rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.

----

.. _class_Camera3D_method_project_ray_origin:

- :ref:`Vector3<class_Vector3>` **project_ray_origin** **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|

Returns a 3D position in world space, that is the result of projecting a point on the :ref:`Viewport<class_Viewport>` rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.

----

.. _class_Camera3D_method_set_cull_mask_value:

- void **set_cull_mask_value** **(** :ref:`int<class_int>` layer_number, :ref:`bool<class_bool>` value **)**

Based on ``value``, enables or disables the specified layer in the :ref:`cull_mask<class_Camera3D_property_cull_mask>`, given a ``layer_number`` between 1 and 20.

----

.. _class_Camera3D_method_set_frustum:

- void **set_frustum** **(** :ref:`float<class_float>` size, :ref:`Vector2<class_Vector2>` offset, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)**

Sets the camera projection to frustum mode (see :ref:`PROJECTION_FRUSTUM<class_Camera3D_constant_PROJECTION_FRUSTUM>`), by specifying a ``size``, an ``offset``, and the ``z_near`` and ``z_far`` clip planes in world space units.

----

.. _class_Camera3D_method_set_orthogonal:

- void **set_orthogonal** **(** :ref:`float<class_float>` size, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)**

Sets the camera projection to orthogonal mode (see :ref:`PROJECTION_ORTHOGONAL<class_Camera3D_constant_PROJECTION_ORTHOGONAL>`), by specifying a ``size``, and the ``z_near`` and ``z_far`` clip planes in world space units. (As a hint, 2D games often use this projection, with values specified in pixels.)

----

.. _class_Camera3D_method_set_perspective:

- void **set_perspective** **(** :ref:`float<class_float>` fov, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)**

Sets the camera projection to perspective mode (see :ref:`PROJECTION_PERSPECTIVE<class_Camera3D_constant_PROJECTION_PERSPECTIVE>`), by specifying a ``fov`` (field of view) angle in degrees, and the ``z_near`` and ``z_far`` clip planes in world space units.

----

.. _class_Camera3D_method_unproject_position:

- :ref:`Vector2<class_Vector2>` **unproject_position** **(** :ref:`Vector3<class_Vector3>` world_point **)** |const|

Returns the 2D coordinate in the :ref:`Viewport<class_Viewport>` rectangle that maps to the given 3D point in world space.

**Note:** When using this to position GUI elements over a 3D viewport, use :ref:`is_position_behind<class_Camera3D_method_is_position_behind>` to prevent them from appearing if the 3D point is behind the camera:

::

    # This code block is part of a script that inherits from Node3D.
    # `control` is a reference to a node inheriting from Control.
    control.visible = not get_viewport().get_camera_3d().is_position_behind(global_transform.origin)
    control.rect_position = get_viewport().get_camera_3d().unproject_position(global_transform.origin)

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
